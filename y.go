// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		switch input[idx].(type) {
		case string:
			if input[idx].(string) == "false" {
				x := map[int]interface{}{0: &boolNode{BOOL, false}}
				res = append(res, x)
			}
			if input[idx].(string) == "true" {
				x := map[int]interface{}{0: &boolNode{BOOL, true}}
				res = append(res, x)
			} else {
				x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
				res = append(res, x)
			}
		case int:
			x := map[int]interface{}{0: &numNode{NUM, input[idx].(int)}}
			res = append(res, x)

		default: //Most likely a node
			res = append(res, map[int]interface{}{0: input[idx]})
		}
		/*if input[idx].(string) == "false" {
		         x := map[int]interface{}{0: &boolNode{BOOL, false}}
		         res = append(res, x)
		  } else if input[idx].(string) == "true" {
		         x := map[int]interface{}{0: &boolNode{BOOL, true}}
		         res = append(res, x)
		  } else if v,e := strconv.Atoi(input[idx].(string)); e == nil {
		         x := map[int]interface{}{0: &numNode{NUM, v}}
		         res = append(res, x)
		  } else {
		         x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
		         res = append(res, x)
		  }*/
	}
	return res
}

func resMap(x *string, ent string, isUpdate bool) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if isUpdate == true {
			res[resarr[i]] = resarr[i+1]
		} else if i+1 < len(resarr) {
			switch ent {
			case "sensor", "group":
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "type",
					"parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "room_template":
				switch resarr[i] {
				case "id", "slug", "orientation", "separators",
					"tiles", "colors", "rows", "sizeWDHm",
					"technicalArea", "reservedArea":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "obj_template":
				switch resarr[i] {
				case "id", "slug", "description", "category",
					"slots", "colors", "components", "sizeWDHmm",
					"fbxModel":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			default:
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			}
		}
		i += 2
	}
	if len(attrs) > 0 {
		res["attributes"] = attrs
	}

	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_/", cmd.State.CurrPath+"/", 1)
}

func auxGetNode(path string) string {
	stk := cmd.StrToStack(path)
	nd := cmd.FindNodeInTree(&cmd.State.TreeHierarchy, stk)
	if nd != nil {
		return cmd.EntityToString((*nd).Entity)
	} else {
		println("Error while finding object in path")
	}
	return ""
}

func resolveReference(ref string) string {
	/*Probably code to reference SymbolTable and return data*/
	idx := dynamicMap[ref]
	item := dynamicSymbolTable[idx]
	switch item.(type) {
	case bool:
		dCatchNodePtr = &boolNode{BOOL, item.(bool)}
		if item.(bool) == false {
			return "false"
		} else {
			return "true"
		}
	case string:
		dCatchNodePtr = &strNode{STR, item.(string)}
		return item.(string)
	case int:
		dCatchNodePtr = &numNode{NUM, item.(int)}
		return strconv.Itoa(item.(int))
	/*case map[string]interface{}:
	  //dCatchNodePtr=&symbolReferenceNode{REFERENCE, }
	  return item.(map[string]interface{})[subIdx].(string)*/
	case *commonNode:
		dCatchNodePtr = item
		args := ""
		for i := range item.(*commonNode).args {
			args += item.(*commonNode).args[i].(string)
		}
		return item.(*commonNode).val + " " + args
	default:
		println("Unable to deref your variable ")
		return ""
	}
}

func formActualPath(x string) string {
	if x == "" || x == "." {
		return cmd.State.CurrPath
	} else if string(x[0]) == "/" {
		return x

	} else {
		return cmd.State.CurrPath + "/" + x
	}
}

type yySymType struct {
	yys     int
	n       int
	s       string
	f       float64
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57453
	yyEofCode      = 57344
	TOK_AC         = 57359
	TOK_AND        = 57428
	TOK_APOST      = 57448
	TOK_ATTRSPEC   = 57405
	TOK_BLDG       = 57351
	TOK_BOOL       = 57369
	TOK_CABINET    = 57360
	TOK_CAM        = 57451
	TOK_CD         = 57380
	TOK_CLR        = 57382
	TOK_CMDFLAG    = 57376
	TOK_CMDS       = 57414
	TOK_COL        = 57408
	TOK_COMMA      = 57412
	TOK_CORIDOR    = 57356
	TOK_CREATE     = 57370
	TOK_DELETE     = 57373
	TOK_DEREF      = 57417
	TOK_DEVICE     = 57354
	TOK_DIV        = 57433
	TOK_DO         = 57443
	TOK_DOC        = 57379
	TOK_DONE       = 57439
	TOK_DOT        = 57413
	TOK_ELIF       = 57442
	TOK_ELSE       = 57422
	TOK_EQUAL      = 57375
	TOK_EXIT       = 57378
	TOK_FI         = 57438
	TOK_FLOAT      = 57347
	TOK_FOR        = 57420
	TOK_GET        = 57371
	TOK_GREATER    = 57435
	TOK_GREP       = 57383
	TOK_GROUP      = 57357
	TOK_IF         = 57419
	TOK_IN         = 57429
	TOK_LBLOCK     = 57423
	TOK_LBRAC      = 57410
	TOK_LEN        = 57444
	TOK_LESS       = 57436
	TOK_LPAREN     = 57425
	TOK_LS         = 57384
	TOK_LSAC       = 57394
	TOK_LSBLDG     = 57389
	TOK_LSCAB      = 57392
	TOK_LSCORRIDOR = 57397
	TOK_LSDEV      = 57400
	TOK_LSOG       = 57386
	TOK_LSPANEL    = 57395
	TOK_LSRACK     = 57399
	TOK_LSROOM     = 57398
	TOK_LSROW      = 57390
	TOK_LSSENSOR   = 57393
	TOK_LSSITE     = 57388
	TOK_LSTEN      = 57387
	TOK_LSTILE     = 57391
	TOK_LSWALL     = 57396
	TOK_MOD        = 57440
	TOK_MULT       = 57434
	TOK_NOT        = 57432
	TOK_NUM        = 57346
	TOK_OBJ_TMPL   = 57366
	TOK_OCBLDG     = 57401
	TOK_OCCORIDOR  = 57447
	TOK_OCDEL      = 57368
	TOK_OCDEV      = 57402
	TOK_OCGROUP    = 57445
	TOK_OCRACK     = 57403
	TOK_OCROOM     = 57404
	TOK_OCSITE     = 57406
	TOK_OCTENANT   = 57407
	TOK_OCWALL     = 57446
	TOK_OR         = 57427
	TOK_PANEL      = 57361
	TOK_PARTIAL    = 57450
	TOK_PLUS       = 57367
	TOK_PRNT       = 57430
	TOK_PWD        = 57381
	TOK_QUOT       = 57431
	TOK_RACK       = 57353
	TOK_RBLOCK     = 57424
	TOK_RBRAC      = 57411
	TOK_ROOM       = 57352
	TOK_ROOM_TMPL  = 57365
	TOK_ROW        = 57362
	TOK_RPAREN     = 57426
	TOK_SEARCH     = 57374
	TOK_SELECT     = 57409
	TOK_SEMICOL    = 57418
	TOK_SENSOR     = 57364
	TOK_SITE       = 57350
	TOK_SLASH      = 57377
	TOK_STR        = 57355
	TOK_TEMPLATE   = 57415
	TOK_TENANT     = 57349
	TOK_THEN       = 57437
	TOK_TILE       = 57363
	TOK_TREE       = 57385
	TOK_UI         = 57452
	TOK_UNSET      = 57441
	TOK_UPDATE     = 57372
	TOK_USE_JSON   = 57449
	TOK_VAR        = 57416
	TOK_WALL       = 57358
	TOK_WHILE      = 57421
	TOK_WORD       = 57348
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -256
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57439: 0,   // TOK_DONE (317x)
		57411: 1,   // TOK_RBRAC (313x)
		57426: 2,   // TOK_RPAREN (313x)
		57422: 3,   // TOK_ELSE (311x)
		57418: 4,   // TOK_SEMICOL (310x)
		57442: 5,   // TOK_ELIF (309x)
		57438: 6,   // TOK_FI (309x)
		57344: 7,   // $end (308x)
		57368: 8,   // TOK_OCDEL (213x)
		57417: 9,   // TOK_DEREF (190x)
		57348: 10,  // TOK_WORD (151x)
		57413: 11,  // TOK_DOT (118x)
		57405: 12,  // TOK_ATTRSPEC (109x)
		57408: 13,  // TOK_COL (109x)
		57377: 14,  // TOK_SLASH (108x)
		57432: 15,  // TOK_NOT (103x)
		57346: 16,  // TOK_NUM (97x)
		57483: 17,  // P1 (91x)
		57427: 18,  // TOK_OR (90x)
		57482: 19,  // P (88x)
		57425: 20,  // TOK_LPAREN (85x)
		57369: 21,  // TOK_BOOL (81x)
		57347: 22,  // TOK_FLOAT (81x)
		57355: 23,  // TOK_STR (79x)
		57488: 24,  // factor (78x)
		57444: 25,  // TOK_LEN (78x)
		57494: 26,  // unary (75x)
		57493: 27,  // term (70x)
		57489: 28,  // nex (68x)
		57485: 29,  // REL (64x)
		57459: 30,  // EQAL (62x)
		57465: 31,  // JOIN (61x)
		57460: 32,  // EXPR (60x)
		57375: 33,  // TOK_EQUAL (56x)
		57412: 34,  // TOK_COMMA (50x)
		57367: 35,  // TOK_PLUS (45x)
		57449: 36,  // TOK_USE_JSON (45x)
		57424: 37,  // TOK_RBLOCK (39x)
		57428: 38,  // TOK_AND (30x)
		57435: 39,  // TOK_GREATER (19x)
		57436: 40,  // TOK_LESS (19x)
		57433: 41,  // TOK_DIV (18x)
		57440: 42,  // TOK_MOD (18x)
		57434: 43,  // TOK_MULT (18x)
		57380: 44,  // TOK_CD (17x)
		57384: 45,  // TOK_LS (17x)
		57389: 46,  // TOK_LSBLDG (17x)
		57400: 47,  // TOK_LSDEV (17x)
		57386: 48,  // TOK_LSOG (17x)
		57399: 49,  // TOK_LSRACK (17x)
		57398: 50,  // TOK_LSROOM (17x)
		57388: 51,  // TOK_LSSITE (17x)
		57387: 52,  // TOK_LSTEN (17x)
		57430: 53,  // TOK_PRNT (17x)
		57381: 54,  // TOK_PWD (17x)
		57385: 55,  // TOK_TREE (17x)
		57441: 56,  // TOK_UNSET (17x)
		57454: 57,  // BASH (16x)
		57484: 58,  // Q (16x)
		57382: 59,  // TOK_CLR (16x)
		57370: 60,  // TOK_CREATE (16x)
		57373: 61,  // TOK_DELETE (16x)
		57379: 62,  // TOK_DOC (16x)
		57378: 63,  // TOK_EXIT (16x)
		57371: 64,  // TOK_GET (16x)
		57383: 65,  // TOK_GREP (16x)
		57394: 66,  // TOK_LSAC (16x)
		57392: 67,  // TOK_LSCAB (16x)
		57397: 68,  // TOK_LSCORRIDOR (16x)
		57395: 69,  // TOK_LSPANEL (16x)
		57390: 70,  // TOK_LSROW (16x)
		57393: 71,  // TOK_LSSENSOR (16x)
		57391: 72,  // TOK_LSTILE (16x)
		57396: 73,  // TOK_LSWALL (16x)
		57372: 74,  // TOK_UPDATE (16x)
		57466: 75,  // K (15x)
		57469: 76,  // NT_CREATE (15x)
		57470: 77,  // NT_DEL (15x)
		57471: 78,  // NT_GET (15x)
		57472: 79,  // NT_UPDATE (15x)
		57409: 80,  // TOK_SELECT (15x)
		57473: 81,  // OCCHOOSE (14x)
		57475: 82,  // OCDEL (14x)
		57477: 83,  // OCGET (14x)
		57479: 84,  // OCSEL (14x)
		57480: 85,  // OCUPDATE (14x)
		57451: 86,  // TOK_CAM (14x)
		57452: 87,  // TOK_UI (14x)
		57462: 88,  // FUNC (13x)
		57464: 89,  // HANDLEUI (13x)
		57476: 90,  // OCDOT (13x)
		57478: 91,  // OCLISYNTX (13x)
		57492: 92,  // stmnt (13x)
		57420: 93,  // TOK_FOR (13x)
		57419: 94,  // TOK_IF (13x)
		57421: 95,  // TOK_WHILE (13x)
		57456: 96,  // CTRL (12x)
		57481: 97,  // OPEN_STMT (12x)
		57490: 98,  // st2 (12x)
		57423: 99,  // TOK_LBLOCK (9x)
		57461: 100, // F (6x)
		57359: 101, // TOK_AC (5x)
		57351: 102, // TOK_BLDG (5x)
		57360: 103, // TOK_CABINET (5x)
		57356: 104, // TOK_CORIDOR (5x)
		57354: 105, // TOK_DEVICE (5x)
		57357: 106, // TOK_GROUP (5x)
		57366: 107, // TOK_OBJ_TMPL (5x)
		57361: 108, // TOK_PANEL (5x)
		57353: 109, // TOK_RACK (5x)
		57352: 110, // TOK_ROOM (5x)
		57365: 111, // TOK_ROOM_TMPL (5x)
		57362: 112, // TOK_ROW (5x)
		57364: 113, // TOK_SENSOR (5x)
		57350: 114, // TOK_SITE (5x)
		57349: 115, // TOK_TENANT (5x)
		57363: 116, // TOK_TILE (5x)
		57358: 117, // TOK_WALL (5x)
		57455: 118, // CDORFG (3x)
		57457: 119, // E (3x)
		57414: 120, // TOK_CMDS (3x)
		57410: 121, // TOK_LBRAC (3x)
		57487: 122, // WORDORNUM (3x)
		57458: 123, // EIF (2x)
		57463: 124, // GETOBJS (2x)
		57467: 125, // NODEACC (2x)
		57468: 126, // NODEGETTER (2x)
		57474: 127, // OCCR (2x)
		57443: 128, // TOK_DO (2x)
		57401: 129, // TOK_OCBLDG (2x)
		57447: 130, // TOK_OCCORIDOR (2x)
		57402: 131, // TOK_OCDEV (2x)
		57445: 132, // TOK_OCGROUP (2x)
		57403: 133, // TOK_OCRACK (2x)
		57404: 134, // TOK_OCROOM (2x)
		57406: 135, // TOK_OCSITE (2x)
		57407: 136, // TOK_OCTENANT (2x)
		57446: 137, // TOK_OCWALL (2x)
		57415: 138, // TOK_TEMPLATE (2x)
		57437: 139, // TOK_THEN (2x)
		57416: 140, // TOK_VAR (2x)
		57486: 141, // WNARG (2x)
		57491: 142, // start (1x)
		57429: 143, // TOK_IN (1x)
		57450: 144, // TOK_PARTIAL (1x)
		57453: 145, // $default (0x)
		57345: 146, // error (0x)
		57448: 147, // TOK_APOST (0x)
		57376: 148, // TOK_CMDFLAG (0x)
		57431: 149, // TOK_QUOT (0x)
		57374: 150, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_RBRAC",
		"TOK_RPAREN",
		"TOK_ELSE",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"$end",
		"TOK_OCDEL",
		"TOK_DEREF",
		"TOK_WORD",
		"TOK_DOT",
		"TOK_ATTRSPEC",
		"TOK_COL",
		"TOK_SLASH",
		"TOK_NOT",
		"TOK_NUM",
		"P1",
		"TOK_OR",
		"P",
		"TOK_LPAREN",
		"TOK_BOOL",
		"TOK_FLOAT",
		"TOK_STR",
		"factor",
		"TOK_LEN",
		"unary",
		"term",
		"nex",
		"REL",
		"EQAL",
		"JOIN",
		"EXPR",
		"TOK_EQUAL",
		"TOK_COMMA",
		"TOK_PLUS",
		"TOK_USE_JSON",
		"TOK_RBLOCK",
		"TOK_AND",
		"TOK_GREATER",
		"TOK_LESS",
		"TOK_DIV",
		"TOK_MOD",
		"TOK_MULT",
		"TOK_CD",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_TREE",
		"TOK_UNSET",
		"BASH",
		"Q",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_LSAC",
		"TOK_LSCAB",
		"TOK_LSCORRIDOR",
		"TOK_LSPANEL",
		"TOK_LSROW",
		"TOK_LSSENSOR",
		"TOK_LSTILE",
		"TOK_LSWALL",
		"TOK_UPDATE",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"TOK_SELECT",
		"OCCHOOSE",
		"OCDEL",
		"OCGET",
		"OCSEL",
		"OCUPDATE",
		"TOK_CAM",
		"TOK_UI",
		"FUNC",
		"HANDLEUI",
		"OCDOT",
		"OCLISYNTX",
		"stmnt",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"TOK_LBLOCK",
		"F",
		"TOK_AC",
		"TOK_BLDG",
		"TOK_CABINET",
		"TOK_CORIDOR",
		"TOK_DEVICE",
		"TOK_GROUP",
		"TOK_OBJ_TMPL",
		"TOK_PANEL",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_ROOM_TMPL",
		"TOK_ROW",
		"TOK_SENSOR",
		"TOK_SITE",
		"TOK_TENANT",
		"TOK_TILE",
		"TOK_WALL",
		"CDORFG",
		"E",
		"TOK_CMDS",
		"TOK_LBRAC",
		"WORDORNUM",
		"EIF",
		"GETOBJS",
		"NODEACC",
		"NODEGETTER",
		"OCCR",
		"TOK_DO",
		"TOK_OCBLDG",
		"TOK_OCCORIDOR",
		"TOK_OCDEV",
		"TOK_OCGROUP",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_OCWALL",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"WNARG",
		"start",
		"TOK_IN",
		"TOK_PARTIAL",
		"$default",
		"error",
		"TOK_APOST",
		"TOK_CMDFLAG",
		"TOK_QUOT",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {142, 1},
		2:   {98, 1},
		3:   {98, 3},
		4:   {98, 1},
		5:   {92, 1},
		6:   {92, 1},
		7:   {92, 1},
		8:   {92, 1},
		9:   {92, 0},
		10:  {96, 1},
		11:  {97, 7},
		12:  {97, 10},
		13:  {97, 6},
		14:  {97, 15},
		15:  {97, 7},
		16:  {97, 12},
		17:  {97, 10},
		18:  {97, 10},
		19:  {123, 7},
		20:  {123, 0},
		21:  {32, 3},
		22:  {32, 1},
		23:  {31, 3},
		24:  {31, 1},
		25:  {30, 4},
		26:  {30, 4},
		27:  {30, 1},
		28:  {29, 3},
		29:  {29, 4},
		30:  {29, 4},
		31:  {29, 3},
		32:  {29, 1},
		33:  {28, 3},
		34:  {28, 3},
		35:  {28, 1},
		36:  {27, 3},
		37:  {27, 3},
		38:  {27, 3},
		39:  {27, 1},
		40:  {26, 2},
		41:  {26, 2},
		42:  {26, 1},
		43:  {24, 3},
		44:  {24, 1},
		45:  {24, 1},
		46:  {24, 2},
		47:  {24, 5},
		48:  {24, 4},
		49:  {24, 1},
		50:  {24, 1},
		51:  {75, 1},
		52:  {75, 1},
		53:  {75, 1},
		54:  {75, 1},
		55:  {76, 5},
		56:  {76, 5},
		57:  {78, 2},
		58:  {78, 3},
		59:  {79, 4},
		60:  {79, 6},
		61:  {79, 7},
		62:  {77, 2},
		63:  {119, 1},
		64:  {119, 1},
		65:  {119, 1},
		66:  {119, 1},
		67:  {119, 1},
		68:  {119, 1},
		69:  {119, 1},
		70:  {119, 1},
		71:  {119, 1},
		72:  {119, 1},
		73:  {119, 1},
		74:  {119, 1},
		75:  {119, 1},
		76:  {119, 1},
		77:  {119, 1},
		78:  {119, 1},
		79:  {119, 1},
		80:  {122, 1},
		81:  {122, 1},
		82:  {122, 1},
		83:  {122, 4},
		84:  {122, 4},
		85:  {122, 4},
		86:  {122, 4},
		87:  {122, 1},
		88:  {122, 2},
		89:  {100, 4},
		90:  {100, 3},
		91:  {100, 4},
		92:  {100, 3},
		93:  {100, 3},
		94:  {100, 4},
		95:  {19, 1},
		96:  {19, 2},
		97:  {17, 3},
		98:  {17, 1},
		99:  {17, 4},
		100: {17, 3},
		101: {17, 2},
		102: {17, 1},
		103: {17, 2},
		104: {17, 0},
		105: {58, 2},
		106: {58, 2},
		107: {58, 2},
		108: {58, 2},
		109: {58, 2},
		110: {58, 2},
		111: {58, 2},
		112: {58, 2},
		113: {58, 2},
		114: {58, 2},
		115: {58, 2},
		116: {58, 2},
		117: {58, 2},
		118: {58, 2},
		119: {58, 2},
		120: {58, 2},
		121: {58, 2},
		122: {58, 3},
		123: {58, 4},
		124: {58, 6},
		125: {58, 1},
		126: {57, 1},
		127: {57, 1},
		128: {57, 2},
		129: {57, 1},
		130: {57, 1},
		131: {57, 1},
		132: {57, 1},
		133: {57, 2},
		134: {57, 2},
		135: {57, 2},
		136: {57, 2},
		137: {57, 2},
		138: {57, 2},
		139: {57, 2},
		140: {57, 2},
		141: {57, 2},
		142: {57, 2},
		143: {57, 2},
		144: {57, 2},
		145: {57, 2},
		146: {57, 2},
		147: {57, 2},
		148: {57, 2},
		149: {57, 2},
		150: {57, 2},
		151: {57, 2},
		152: {57, 2},
		153: {57, 2},
		154: {57, 2},
		155: {57, 2},
		156: {57, 2},
		157: {57, 2},
		158: {57, 2},
		159: {57, 3},
		160: {57, 3},
		161: {57, 3},
		162: {57, 2},
		163: {57, 2},
		164: {91, 2},
		165: {91, 1},
		166: {91, 1},
		167: {91, 1},
		168: {91, 1},
		169: {91, 1},
		170: {91, 1},
		171: {91, 1},
		172: {127, 5},
		173: {127, 5},
		174: {127, 5},
		175: {127, 5},
		176: {127, 7},
		177: {127, 7},
		178: {127, 7},
		179: {127, 7},
		180: {127, 7},
		181: {127, 7},
		182: {127, 7},
		183: {127, 7},
		184: {127, 11},
		185: {127, 11},
		186: {127, 6},
		187: {127, 6},
		188: {127, 9},
		189: {127, 9},
		190: {127, 5},
		191: {127, 5},
		192: {127, 5},
		193: {127, 5},
		194: {127, 5},
		195: {127, 5},
		196: {127, 5},
		197: {127, 5},
		198: {127, 5},
		199: {127, 5},
		200: {127, 5},
		201: {127, 5},
		202: {127, 5},
		203: {127, 5},
		204: {127, 5},
		205: {127, 5},
		206: {127, 5},
		207: {127, 5},
		208: {127, 5},
		209: {127, 5},
		210: {127, 5},
		211: {127, 5},
		212: {127, 5},
		213: {127, 5},
		214: {127, 5},
		215: {127, 5},
		216: {82, 2},
		217: {85, 5},
		218: {83, 2},
		219: {124, 3},
		220: {124, 1},
		221: {81, 4},
		222: {90, 8},
		223: {90, 9},
		224: {90, 9},
		225: {90, 10},
		226: {90, 9},
		227: {90, 9},
		228: {90, 9},
		229: {90, 9},
		230: {90, 9},
		231: {90, 6},
		232: {90, 4},
		233: {90, 4},
		234: {90, 6},
		235: {90, 6},
		236: {90, 2},
		237: {90, 5},
		238: {90, 7},
		239: {90, 8},
		240: {90, 4},
		241: {84, 1},
		242: {84, 5},
		243: {89, 7},
		244: {89, 5},
		245: {89, 17},
		246: {141, 3},
		247: {141, 1},
		248: {88, 6},
		249: {88, 1},
		250: {126, 3},
		251: {126, 1},
		252: {126, 0},
		253: {125, 1},
		254: {118, 3},
		255: {118, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [645][]uint16{
		// 0
		{4: 247, 7: 247, 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 258, 142: 257},
		{7: 256},
		{7: 255},
		{254, 254, 3: 254, 899, 254, 254, 254},
		{252, 252, 3: 252, 5: 252, 252, 252},
		// 5
		{251, 251, 251, 251, 251, 251, 251, 251},
		{250, 250, 250, 250, 250, 250, 250, 250},
		{249, 249, 249, 249, 249, 249, 249, 249},
		{248, 248, 248, 248, 248, 248, 248, 248},
		{246, 246, 3: 246, 5: 246, 246, 246},
		// 10
		{99: 882},
		{20: 877},
		{10: 837, 20: 836},
		{205, 205, 205, 205, 205, 205, 205, 205},
		{204, 204, 204, 204, 204, 204, 204, 204},
		// 15
		{203, 203, 203, 203, 203, 203, 203, 203},
		{202, 202, 202, 202, 202, 202, 202, 202},
		{101: 804, 800, 806, 811, 803, 812, 813, 805, 802, 801, 814, 807, 810, 799, 798, 808, 809, 119: 829},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 826, 101: 804, 800, 806, 811, 803, 812, 813, 805, 802, 801, 814, 807, 810, 799, 798, 808, 809, 119: 827},
		{8: 406, 407, 404, 405, 13: 152, 278, 17: 277, 19: 792},
		// 20
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 791},
		{161, 161, 161, 161, 161, 161, 161, 161, 12: 161, 161, 16: 161, 34: 161},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 152, 152, 16: 152, 790, 34: 152},
		{7, 7, 7, 7, 7, 7, 7, 7, 11: 420, 13: 158, 419, 20: 785},
		{11: 416, 120: 747, 138: 748, 140: 746},
		// 25
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 13: 154, 278, 17: 277, 19: 745},
		{10: 734},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 733},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 732},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 731},
		// 30
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 730},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 729},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 728},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 727},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 726},
		// 35
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 725},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 724},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 723},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 722},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 721},
		// 40
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 720},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 719},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 718},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 16: 152, 277, 19: 716},
		{8: 708, 709},
		// 45
		{131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129},
		{4, 4, 4, 4, 4, 4, 4, 4, 9: 338, 16: 336, 20: 335, 341, 337, 340, 705, 339, 125: 704, 703},
		{127, 127, 127, 127, 127, 127, 127, 127},
		// 50
		{126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 696, 10: 681, 697, 33: 699, 35: 698, 44: 674, 671, 692, 695, 689, 694, 693, 691, 690, 673, 672, 682, 686, 60: 677, 680, 64: 678, 74: 679, 80: 687, 86: 675, 676, 93: 685, 683, 684, 120: 688},
		{101: 446, 433, 448, 441, 439, 443, 452, 447, 437, 435, 453, 449, 451, 431, 429, 450, 445, 127: 427, 129: 432, 440, 438, 442, 436, 434, 430, 428, 444},
		{91, 91, 91, 91, 91, 91, 91, 91},
		// 55
		{90, 90, 90, 90, 90, 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86},
		// 60
		{85, 85, 85, 85, 85, 85, 85, 85},
		{13: 423},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 408, 121: 409},
		{15, 15, 15, 15, 15, 15, 15, 15, 11: 400},
		{11: 394},
		// 65
		{11: 322},
		{10: 323},
		{33: 324},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 325, 99: 342},
		{12, 12, 12, 12, 12, 12, 12, 12, 18: 344},
		// 70
		{234, 234, 234, 234, 234, 234, 234, 234, 12: 234, 18: 234, 34: 234, 37: 234, 357},
		{232, 232, 232, 232, 232, 232, 232, 232, 12: 232, 15: 360, 18: 232, 33: 359, 232, 37: 232, 232},
		{229, 229, 229, 229, 229, 229, 229, 229, 12: 229, 15: 229, 18: 229, 33: 229, 229, 37: 229, 229},
		{224, 224, 224, 224, 224, 224, 224, 224, 385, 12: 224, 15: 224, 18: 224, 33: 224, 224, 384, 37: 224, 224, 383, 382},
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 12: 221, 15: 221, 18: 221, 33: 221, 221, 221, 37: 221, 221, 221, 221, 377, 378, 376},
		// 75
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 12: 217, 15: 217, 18: 217, 33: 217, 217, 217, 37: 217, 217, 217, 217, 217, 217, 217},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 375},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 374},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 12: 214, 15: 214, 18: 214, 33: 214, 214, 214, 37: 214, 214, 214, 214, 214, 214, 214},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 372},
		// 80
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 12: 212, 15: 212, 18: 212, 33: 212, 212, 212, 37: 212, 212, 212, 212, 212, 212, 212},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 12: 211, 15: 211, 18: 211, 33: 211, 211, 211, 37: 211, 211, 211, 211, 211, 211, 211},
		{10: 368},
		{20: 365},
		{207, 207, 207, 207, 207, 207, 207, 207, 207, 12: 207, 15: 207, 18: 207, 33: 207, 207, 207, 37: 207, 207, 207, 207, 207, 207, 207},
		// 85
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 12: 206, 15: 206, 18: 206, 33: 206, 206, 206, 37: 206, 206, 206, 206, 206, 206, 206},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 343},
		{18: 344, 34: 345},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 356},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 346},
		// 90
		{18: 344, 34: 347},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 348},
		{18: 344, 37: 349},
		{12: 350},
		{99: 351},
		// 95
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 352},
		{18: 344, 34: 353},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 354},
		{18: 344, 37: 355},
		{11, 11, 11, 11, 11, 11, 11, 11},
		// 100
		{235, 235, 235, 235, 235, 235, 235, 235, 12: 235, 18: 235, 34: 235, 37: 235, 357},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 358},
		{233, 233, 233, 233, 233, 233, 233, 233, 12: 233, 15: 360, 18: 233, 33: 359, 233, 37: 233, 233},
		{33: 363},
		{33: 361},
		// 105
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 362},
		{230, 230, 230, 230, 230, 230, 230, 230, 12: 230, 15: 230, 18: 230, 33: 230, 230, 37: 230, 230},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 364},
		{231, 231, 231, 231, 231, 231, 231, 231, 12: 231, 15: 231, 18: 231, 33: 231, 231, 37: 231, 231},
		{10: 366},
		// 110
		{2: 367},
		{208, 208, 208, 208, 208, 208, 208, 208, 208, 12: 208, 15: 208, 18: 208, 33: 208, 208, 208, 37: 208, 208, 208, 208, 208, 208, 208},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 12: 210, 15: 210, 18: 210, 33: 210, 210, 210, 37: 210, 210, 210, 210, 210, 210, 210, 99: 369},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 370},
		{18: 344, 37: 371},
		// 115
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 12: 209, 15: 209, 18: 209, 33: 209, 209, 209, 37: 209, 209, 209, 209, 209, 209, 209},
		{2: 373, 18: 344},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 12: 213, 15: 213, 18: 213, 33: 213, 213, 213, 37: 213, 213, 213, 213, 213, 213, 213},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 12: 215, 15: 215, 18: 215, 33: 215, 215, 215, 37: 215, 215, 215, 215, 215, 215, 215},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 12: 216, 15: 216, 18: 216, 33: 216, 216, 216, 37: 216, 216, 216, 216, 216, 216, 216},
		// 120
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 381},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 380},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 379},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 12: 218, 15: 218, 18: 218, 33: 218, 218, 218, 37: 218, 218, 218, 218, 218, 218, 218},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 12: 219, 15: 219, 18: 219, 33: 219, 219, 219, 37: 219, 219, 219, 219, 219, 219, 219},
		// 125
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 12: 220, 15: 220, 18: 220, 33: 220, 220, 220, 37: 220, 220, 220, 220, 220, 220, 220},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 391, 33: 392},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 389, 33: 388},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 387},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 386},
		// 130
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 12: 222, 15: 222, 18: 222, 33: 222, 222, 222, 37: 222, 222, 222, 222, 377, 378, 376},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 12: 223, 15: 223, 18: 223, 33: 223, 223, 223, 37: 223, 223, 223, 223, 377, 378, 376},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 390},
		{225, 225, 225, 225, 225, 225, 225, 225, 385, 12: 225, 15: 225, 18: 225, 33: 225, 225, 384, 37: 225, 225},
		{226, 226, 226, 226, 226, 226, 226, 226, 385, 12: 226, 15: 226, 18: 226, 33: 226, 226, 384, 37: 226, 226},
		// 135
		{228, 228, 228, 228, 228, 228, 228, 228, 385, 12: 228, 15: 228, 18: 228, 33: 228, 228, 384, 37: 228, 228},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 393},
		{227, 227, 227, 227, 227, 227, 227, 227, 385, 12: 227, 15: 227, 18: 227, 33: 227, 227, 384, 37: 227, 227},
		{10: 395},
		{33: 396},
		// 140
		{99: 397},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 398},
		{18: 344, 37: 399},
		{13, 13, 13, 13, 13, 13, 13, 13},
		{10: 401},
		// 145
		{33: 402},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 403},
		{14, 14, 14, 14, 14, 14, 14, 14, 18: 344},
		{158, 158, 158, 158, 158, 158, 158, 158, 11: 420, 158, 158, 419, 16: 158, 34: 158},
		{11: 416},
		// 150
		{154, 154, 154, 154, 154, 154, 154, 154, 12: 154, 154, 16: 154, 34: 154},
		{10: 415},
		{38, 38, 38, 38, 38, 38, 38, 38},
		{1: 152, 8: 406, 407, 404, 405, 14: 278, 17: 277, 19: 410, 34: 152, 124: 411},
		{1: 36, 34: 413},
		// 155
		{1: 412},
		{35, 35, 35, 35, 35, 35, 35, 35},
		{1: 152, 8: 406, 407, 404, 405, 14: 278, 17: 277, 19: 410, 34: 152, 124: 414},
		{1: 37},
		{153, 153, 153, 153, 153, 153, 153, 153, 12: 153, 153, 16: 153, 34: 153},
		// 160
		{155, 155, 155, 155, 155, 155, 155, 155, 12: 155, 155, 417, 16: 155, 34: 155},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 152, 152, 16: 152, 418, 34: 152},
		{157, 157, 157, 157, 157, 157, 157, 157, 12: 157, 157, 16: 157, 34: 157},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 152, 152, 16: 152, 422, 34: 152},
		{10: 421},
		// 165
		{156, 156, 156, 156, 156, 156, 156, 156, 12: 156, 156, 16: 156, 34: 156},
		{159, 159, 159, 159, 159, 159, 159, 159, 12: 159, 159, 16: 159, 34: 159},
		{10: 424},
		{33: 425},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 426},
		// 170
		{39, 39, 39, 39, 39, 39, 39, 39, 18: 344},
		{92, 92, 92, 92, 92, 92, 92, 92},
		{13: 664},
		{13: 657},
		{13: 650},
		// 175
		{13: 643},
		{13: 634},
		{13: 625},
		{13: 616},
		{13: 607},
		// 180
		{13: 598},
		{13: 589},
		{13: 580},
		{13: 571},
		{13: 558},
		// 185
		{13: 545},
		{13: 537},
		{13: 508},
		{13: 497},
		{13: 486},
		// 190
		{13: 482},
		{13: 478},
		{13: 474},
		{13: 470},
		{13: 466},
		// 195
		{13: 462},
		{13: 458},
		{13: 454},
		{36: 455},
		{13: 456},
		// 200
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 457},
		{41, 41, 41, 41, 41, 41, 41, 41},
		{36: 459},
		{13: 460},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 461},
		// 205
		{42, 42, 42, 42, 42, 42, 42, 42},
		{36: 463},
		{13: 464},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 465},
		{43, 43, 43, 43, 43, 43, 43, 43},
		// 210
		{36: 467},
		{13: 468},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 469},
		{44, 44, 44, 44, 44, 44, 44, 44},
		{36: 471},
		// 215
		{13: 472},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 473},
		{45, 45, 45, 45, 45, 45, 45, 45},
		{36: 475},
		{13: 476},
		// 220
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 477},
		{46, 46, 46, 46, 46, 46, 46, 46},
		{36: 479},
		{13: 480},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 481},
		// 225
		{47, 47, 47, 47, 47, 47, 47, 47},
		{36: 483},
		{13: 484},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 485},
		{48, 48, 48, 48, 48, 48, 48, 48},
		// 230
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 487, 36: 488},
		{12: 491},
		{13: 489},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 490},
		{49, 49, 49, 49, 49, 49, 49, 49},
		// 235
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 492},
		{12: 493, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 494},
		{12: 495, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 496},
		// 240
		{67, 67, 67, 67, 67, 67, 67, 67, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 498, 36: 499},
		{12: 502},
		{13: 500},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 501},
		// 245
		{50, 50, 50, 50, 50, 50, 50, 50},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 503},
		{12: 504, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 505},
		{12: 506, 18: 344},
		// 250
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 507},
		{68, 68, 68, 68, 68, 68, 68, 68, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 509, 36: 510},
		{12: 513},
		{13: 511},
		// 255
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 512},
		{51, 51, 51, 51, 51, 51, 51, 51},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 514},
		{1, 1, 1, 1, 1, 1, 1, 1, 12: 516, 18: 344, 118: 515},
		{69, 69, 69, 69, 69, 69, 69, 69},
		// 260
		{8: 521, 523, 517, 16: 518, 21: 522, 519, 35: 520, 122: 524},
		{176, 176, 176, 176, 176, 176, 176, 176, 10: 176, 12: 176},
		{175, 175, 175, 175, 175, 175, 175, 175, 10: 175, 12: 175},
		{174, 174, 174, 174, 174, 174, 174, 174, 10: 174, 12: 174},
		{10: 532},
		// 265
		{10: 527},
		{169, 169, 169, 169, 169, 169, 169, 169, 10: 169, 12: 169},
		{10: 526},
		{1, 1, 1, 1, 1, 1, 1, 1, 12: 516, 118: 525},
		{2, 2, 2, 2, 2, 2, 2, 2},
		// 270
		{168, 168, 168, 168, 168, 168, 168, 168, 10: 168, 12: 168},
		{8: 528, 35: 529},
		{10: 531},
		{10: 530},
		{170, 170, 170, 170, 170, 170, 170, 170, 10: 170, 12: 170},
		// 275
		{171, 171, 171, 171, 171, 171, 171, 171, 10: 171, 12: 171},
		{8: 534, 35: 533},
		{10: 536},
		{10: 535},
		{172, 172, 172, 172, 172, 172, 172, 172, 10: 172, 12: 172},
		// 280
		{173, 173, 173, 173, 173, 173, 173, 173, 10: 173, 12: 173},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 538, 36: 539},
		{12: 542},
		{13: 540},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 541},
		// 285
		{52, 52, 52, 52, 52, 52, 52, 52},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 543},
		{1, 1, 1, 1, 1, 1, 1, 1, 12: 516, 18: 344, 118: 544},
		{70, 70, 70, 70, 70, 70, 70, 70},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 546, 36: 547},
		// 290
		{12: 550},
		{13: 548},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 549},
		{53, 53, 53, 53, 53, 53, 53, 53},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 551},
		// 295
		{12: 552, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 553},
		{12: 554, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 555},
		{12: 556, 18: 344},
		// 300
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 557},
		{71, 71, 71, 71, 71, 71, 71, 71, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 559, 36: 560},
		{12: 563},
		{13: 561},
		// 305
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 562},
		{54, 54, 54, 54, 54, 54, 54, 54},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 564},
		{12: 565, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 566},
		// 310
		{12: 567, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 568},
		{12: 569, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 570},
		{72, 72, 72, 72, 72, 72, 72, 72, 18: 344},
		// 315
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 572, 36: 573},
		{12: 576},
		{13: 574},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 575},
		{56, 56, 56, 56, 56, 56, 56, 56},
		// 320
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 577},
		{12: 578, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 579},
		{73, 73, 73, 73, 73, 73, 73, 73, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 581, 36: 582},
		// 325
		{12: 585},
		{13: 583},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 584},
		{55, 55, 55, 55, 55, 55, 55, 55},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 586},
		// 330
		{12: 587, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 588},
		{74, 74, 74, 74, 74, 74, 74, 74, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 590, 36: 591},
		{12: 594},
		// 335
		{13: 592},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 593},
		{58, 58, 58, 58, 58, 58, 58, 58},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 595},
		{12: 596, 18: 344},
		// 340
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 597},
		{75, 75, 75, 75, 75, 75, 75, 75, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 599, 36: 600},
		{12: 603},
		{13: 601},
		// 345
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 602},
		{57, 57, 57, 57, 57, 57, 57, 57},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 604},
		{12: 605, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 606},
		// 350
		{76, 76, 76, 76, 76, 76, 76, 76, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 608, 36: 609},
		{12: 612},
		{13: 610},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 611},
		// 355
		{60, 60, 60, 60, 60, 60, 60, 60},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 613},
		{12: 614, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 615},
		{77, 77, 77, 77, 77, 77, 77, 77, 18: 344},
		// 360
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 617, 36: 618},
		{12: 621},
		{13: 619},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 620},
		{59, 59, 59, 59, 59, 59, 59, 59},
		// 365
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 622},
		{12: 623, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 624},
		{78, 78, 78, 78, 78, 78, 78, 78, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 626, 36: 627},
		// 370
		{12: 630},
		{13: 628},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 629},
		{62, 62, 62, 62, 62, 62, 62, 62},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 631},
		// 375
		{12: 632, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 633},
		{79, 79, 79, 79, 79, 79, 79, 79, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 635, 36: 636},
		{12: 639},
		// 380
		{13: 637},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 638},
		{61, 61, 61, 61, 61, 61, 61, 61},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 640},
		{12: 641, 18: 344},
		// 385
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 642},
		{80, 80, 80, 80, 80, 80, 80, 80, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 644, 36: 645},
		{12: 648},
		{13: 646},
		// 390
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 647},
		{64, 64, 64, 64, 64, 64, 64, 64},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 649},
		{81, 81, 81, 81, 81, 81, 81, 81, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 651, 36: 652},
		// 395
		{12: 655},
		{13: 653},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 654},
		{63, 63, 63, 63, 63, 63, 63, 63},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 656},
		// 400
		{82, 82, 82, 82, 82, 82, 82, 82, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 658, 36: 659},
		{12: 662},
		{13: 660},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 661},
		// 405
		{66, 66, 66, 66, 66, 66, 66, 66},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 663},
		{83, 83, 83, 83, 83, 83, 83, 83, 18: 344},
		{8: 406, 407, 404, 405, 152, 14: 278, 17: 277, 19: 665, 36: 666},
		{12: 669},
		// 410
		{13: 667},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 668},
		{65, 65, 65, 65, 65, 65, 65, 65},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 670},
		{84, 84, 84, 84, 84, 84, 84, 84, 18: 344},
		// 415
		{123, 123, 123, 123, 123, 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119},
		// 420
		{118, 118, 118, 118, 118, 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117},
		{116, 116, 116, 116, 116, 116, 116, 116},
		{115, 115, 115, 115, 115, 115, 115, 115},
		{114, 114, 114, 114, 114, 114, 114, 114},
		// 425
		{113, 113, 113, 113, 113, 113, 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112},
		{111, 111, 111, 111, 111, 111, 111, 111},
		{110, 110, 110, 110, 110, 110, 110, 110},
		{109, 109, 109, 109, 109, 109, 109, 109},
		// 430
		{108, 108, 108, 108, 108, 108, 108, 108},
		{107, 107, 107, 107, 107, 107, 107, 107},
		{106, 106, 106, 106, 106, 106, 106, 106},
		{105, 105, 105, 105, 105, 105, 105, 105},
		{104, 104, 104, 104, 104, 104, 104, 104},
		// 435
		{103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100},
		{99, 99, 99, 99, 99, 99, 99, 99},
		// 440
		{98, 98, 98, 98, 98, 98, 98, 98},
		{120: 701, 138: 700, 140: 702},
		{94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93},
		{97, 97, 97, 97, 97, 97, 97, 97},
		// 445
		{96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95},
		{128, 128, 128, 128, 128, 128, 128, 128},
		{5, 5, 5, 5, 5, 5, 5, 5, 35: 706},
		{3, 3, 3, 3, 3, 3, 3, 3, 35: 3},
		// 450
		{4, 4, 4, 4, 4, 4, 4, 4, 9: 338, 16: 336, 20: 335, 341, 337, 340, 705, 339, 125: 704, 707},
		{6, 6, 6, 6, 6, 6, 6, 6},
		{10: 714},
		{10: 710},
		{99: 711},
		// 455
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 712},
		{18: 344, 37: 713},
		{132, 132, 132, 132, 132, 132, 132, 132},
		{10: 715},
		{133, 133, 133, 133, 133, 133, 133, 133},
		// 460
		{135, 135, 135, 135, 135, 135, 135, 135, 16: 717},
		{134, 134, 134, 134, 134, 134, 134, 134},
		{136, 136, 136, 136, 136, 136, 136, 136},
		{137, 137, 137, 137, 137, 137, 137, 137},
		{138, 138, 138, 138, 138, 138, 138, 138},
		// 465
		{139, 139, 139, 139, 139, 139, 139, 139},
		{140, 140, 140, 140, 140, 140, 140, 140},
		{141, 141, 141, 141, 141, 141, 141, 141},
		{142, 142, 142, 142, 142, 142, 142, 142},
		{143, 143, 143, 143, 143, 143, 143, 143},
		// 470
		{144, 144, 144, 144, 144, 144, 144, 144},
		{145, 145, 145, 145, 145, 145, 145, 145},
		{146, 146, 146, 146, 146, 146, 146, 146},
		{147, 147, 147, 147, 147, 147, 147, 147},
		{148, 148, 148, 148, 148, 148, 148, 148},
		// 475
		{149, 149, 149, 149, 149, 149, 149, 149},
		{150, 150, 150, 150, 150, 150, 150, 150},
		{151, 151, 151, 151, 151, 151, 151, 151},
		{20, 20, 20, 20, 20, 20, 20, 20, 13: 153, 33: 736, 99: 735},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 738},
		// 480
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 737},
		{16, 16, 16, 16, 16, 16, 16, 16, 18: 344},
		{18: 344, 37: 739},
		{19, 19, 19, 19, 19, 19, 19, 19, 33: 740, 99: 741},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 744},
		// 485
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 742},
		{18: 344, 37: 743},
		{17, 17, 17, 17, 17, 17, 17, 17},
		{18, 18, 18, 18, 18, 18, 18, 18, 18: 344},
		{40, 40, 40, 40, 40, 40, 40, 40},
		// 490
		{13: 753},
		{13: 751},
		{13: 749},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 750},
		{23, 23, 23, 23, 23, 23, 23, 23},
		// 495
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 752},
		{24, 24, 24, 24, 24, 24, 24, 24},
		{10: 754},
		{33: 755},
		{8: 333, 758, 15: 332, 336, 20: 757, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 756, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 759, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 760, 269, 272, 270, 271},
		// 500
		{25, 25, 25, 25, 25, 25, 25, 25, 18: 344},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 779, 141: 780},
		{10: 368, 20: 761},
		{22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21},
		// 505
		{8: 281, 407, 404, 405, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 764, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 763, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 762, 269, 272, 270, 271, 319, 768, 765, 767, 769, 766},
		{2: 778},
		{2: 777},
		{101: 446, 433, 448, 441, 439, 443, 452, 447, 437, 435, 453, 449, 451, 431, 429, 450, 445, 127: 775, 129: 432, 440, 438, 442, 436, 434, 430, 428, 444},
		{2: 774},
		// 510
		{2: 773},
		{2: 772},
		{2: 771},
		{2: 770},
		{26, 26, 26, 26, 26, 26, 26, 26},
		// 515
		{27, 27, 27, 27, 27, 27, 27, 27},
		{28, 28, 28, 28, 28, 28, 28, 28},
		{29, 29, 29, 29, 29, 29, 29, 29},
		{30, 30, 30, 30, 30, 30, 30, 30},
		{2: 776},
		// 520
		{31, 31, 31, 31, 31, 31, 31, 31},
		{32, 32, 32, 32, 32, 32, 32, 32},
		{33, 33, 33, 33, 33, 33, 33, 33},
		{2: 373, 18: 344, 34: 782},
		{2: 781},
		// 525
		{34, 34, 34, 34, 34, 34, 34, 34},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 783, 141: 784},
		{2: 9, 18: 344, 34: 782},
		{2: 10},
		{2: 786},
		// 530
		{121: 787},
		{1: 247, 4: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 788},
		{1: 789},
		{8, 8, 8, 8, 8, 8, 8, 8},
		{160, 160, 160, 160, 160, 160, 160, 160, 12: 160, 160, 16: 160, 34: 160},
		// 535
		{194, 194, 194, 194, 194, 194, 194, 194},
		{13: 793},
		{10: 796, 36: 795, 100: 794},
		{197, 197, 197, 197, 197, 197, 197, 197},
		{13: 821, 144: 822},
		// 540
		{33: 797},
		{8: 521, 523, 517, 16: 518, 21: 522, 519, 816, 35: 520, 101: 804, 800, 806, 811, 803, 812, 813, 805, 802, 801, 814, 807, 810, 799, 798, 808, 809, 119: 817, 122: 815},
		{193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 13: 193, 193, 36: 193},
		{192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 13: 192, 192, 36: 192},
		{191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 13: 191, 191, 36: 191},
		// 545
		{190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 13: 190, 190, 36: 190},
		{189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 13: 189, 189, 36: 189},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 13: 188, 188, 36: 188},
		{187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 13: 187, 187, 36: 187},
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 13: 186, 186, 36: 186},
		// 550
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 13: 185, 185, 36: 185},
		{184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 13: 184, 184, 36: 184},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 13: 183, 183, 36: 183},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 13: 182, 182, 36: 182},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 13: 181, 181, 36: 181},
		// 555
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 13: 180, 180, 36: 180},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 13: 179, 179, 36: 179},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 13: 178, 178, 36: 178},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 13: 177, 177, 36: 177},
		{166, 166, 166, 166, 166, 166, 166, 166, 10: 796, 100: 820},
		// 560
		{164, 164, 164, 164, 164, 164, 164, 164, 10: 796, 100: 819},
		{163, 163, 163, 163, 163, 163, 163, 163, 10: 796, 100: 818},
		{162, 162, 162, 162, 162, 162, 162, 162},
		{165, 165, 165, 165, 165, 165, 165, 165},
		{167, 167, 167, 167, 167, 167, 167, 167},
		// 565
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 825},
		{13: 823},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 824},
		{195, 195, 195, 195, 195, 195, 195, 195},
		{196, 196, 196, 196, 196, 196, 196, 196},
		// 570
		{199, 199, 199, 199, 199, 199, 199, 199},
		{10: 796, 100: 828},
		{198, 198, 198, 198, 198, 198, 198, 198},
		{8: 406, 407, 404, 405, 13: 152, 278, 17: 277, 19: 830, 36: 831},
		{13: 834},
		// 575
		{13: 832},
		{152, 152, 152, 152, 152, 152, 152, 152, 406, 407, 404, 405, 14: 278, 17: 277, 19: 833},
		{200, 200, 200, 200, 200, 200, 200, 200},
		{10: 796, 100: 835},
		{201, 201, 201, 201, 201, 201, 201, 201},
		// 580
		{20: 864},
		{143: 838},
		{8: 333, 841, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 839, 121: 840},
		{4: 861, 18: 344},
		{16: 853},
		// 585
		{10: 368, 20: 842},
		{9: 338, 16: 336, 20: 335, 341, 337, 340, 844, 339, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 843, 302, 62: 308, 307, 65: 303, 293, 296, 297, 294, 291, 298, 292, 295},
		{2: 849},
		{2: 845},
		{128: 846},
		// 590
		{247, 4: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 847},
		{848},
		{238, 238, 3: 238, 5: 238, 238, 238},
		{128: 850},
		{247, 4: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 851},
		// 595
		{852},
		{239, 239, 3: 239, 5: 239, 239, 239},
		{11: 854},
		{11: 855},
		{16: 856},
		// 600
		{1: 857},
		{4: 858},
		{247, 4: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 859},
		{860},
		{240, 240, 3: 240, 5: 240, 240, 240},
		// 605
		{247, 4: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 862},
		{863},
		{241, 241, 3: 241, 5: 241, 241, 241},
		{10: 865},
		{33: 866},
		// 610
		{8: 521, 523, 517, 16: 518, 21: 522, 519, 35: 520, 122: 867},
		{4: 868},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 869},
		{4: 870, 18: 344},
		{2: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 871},
		// 615
		{2: 872},
		{2: 873},
		{4: 874},
		{247, 4: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 875},
		{876},
		// 620
		{242, 242, 3: 242, 5: 242, 242, 242},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 878},
		{2: 879, 18: 344},
		{247, 4: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 880},
		{881},
		// 625
		{243, 243, 3: 243, 5: 243, 243, 243},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 883},
		{18: 344, 37: 884},
		{139: 885},
		{3: 247, 247, 247, 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 886},
		// 630
		{3: 236, 5: 889, 887, 123: 888},
		{245, 245, 3: 245, 5: 245, 245, 245},
		{3: 896},
		{99: 890},
		{8: 333, 338, 15: 332, 336, 20: 335, 341, 337, 340, 334, 339, 331, 330, 329, 328, 327, 326, 891},
		// 635
		{18: 344, 37: 892},
		{139: 893},
		{3: 247, 247, 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 894},
		{3: 236, 5: 889, 123: 895},
		{3: 237},
		// 640
		{4: 247, 6: 247, 8: 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 897},
		{6: 898},
		{244, 244, 3: 244, 5: 244, 244, 244},
		{247, 247, 3: 247, 247, 247, 247, 247, 281, 282, 279, 280, 13: 152, 278, 17: 277, 19: 317, 33: 318, 35: 309, 44: 283, 284, 287, 290, 305, 289, 288, 286, 285, 304, 306, 299, 300, 301, 262, 302, 273, 276, 308, 307, 274, 303, 293, 296, 297, 294, 291, 298, 292, 295, 275, 261, 269, 272, 270, 271, 319, 313, 310, 312, 315, 311, 321, 320, 264, 316, 314, 263, 259, 268, 266, 267, 260, 265, 900},
		{253, 253, 3: 253, 5: 253, 253, 253},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 146

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
			if cmd.State.ScriptCalled == true {
				println("File:",cmd.GetScriptPath() )
				println("Line Number:", cmd.GetLineNumber())
			}
			cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}, nil}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}, nil}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			arrNd := yyS[yypt-4].node
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 18:
		{
			arrNd := yyS[yypt-4].node
			//This NonTerminal is broken, it is kept
			//here to show that eventuall the feature
			//must be added
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 19:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 20:
		{
			yyVAL.elifArr = nil
		}
	case 24:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 38:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "%", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 39:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 40:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 41:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 42:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 43:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 44:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 45:
		{
			yyVAL.node = &floatNode{FLOAT, yyS[yypt-0].f}
		}
	case 46:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 47:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 48:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-1].s, &numNode{NUM, -1}, nil}
			switch x.execute().(type) {
			case int:
				yyVAL.node = &numNode{NUM, x.execute().(int)}
			default: //Error, the array length is not an int
				println("Error! Single element arrays are not supported")
				yyVAL.node = &numNode{NUM, -1}

			}
		}
	case 49:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-0].s}
		}
	case 50:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 51:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State start")
			}
		}
	case 55:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false)}}
		}
	case 56:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, yyS[yypt-0].s}}
		}
	case 57:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 58:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s, yyS[yypt-1].s, false)}}
		}
	case 59:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-2].s, resMap(&yyS[yypt-0].s, auxGetNode(yyS[yypt-2].s), true)}}
		}
	case 60:
		{
			yyVAL.node = &commonNode{COMMON, cmd.EasyUpdate, "EasyUpdate", []interface{}{yyS[yypt-4].s, yyS[yypt-0].s, false}}
		}
	case 61:
		{
			yyVAL.node = &commonNode{COMMON, cmd.EasyUpdate, "EasyUpdate", []interface{}{yyS[yypt-5].s, yyS[yypt-0].s, true}}
		}
	case 62:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State NT_DEL")
			}
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 80:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 81:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 82:
		{
			x := strconv.FormatFloat(yyS[yypt-0].f, 'E', -1, 64)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].f
			dCatchNodePtr = &floatNode{FLOAT, yyS[yypt-0].f}
		}
	case 83:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 84:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 85:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 86:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 87:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 88:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
		}
	case 89:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 90:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 91:
		{
			yyVAL.s = yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s
		}
	case 92:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 93:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 94:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 96:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 97:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 98:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 99:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 100:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 101:
		{
			yyVAL.s = ".."
		}
	case 102:
		{
			yyVAL.s = "-"
		}
	case 103:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
		}
	case 104:
		{
			yyVAL.s = ""
		}
	case 105:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 106:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 10}}
		}
	case 114:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 11}}
		}
	case 115:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 116:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 117:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 8}}
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 9}}
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 12}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 13}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s, nil, nil}}
		}
	case 124:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
			//$$=&assignNode{ASSIGN, v, "deleteValue"}
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{"", "", v, nil}}

		}
	case 125:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", yyS[yypt-0].arr}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 134:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"pwd"}}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"print"}}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"camera"}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ui"}}
		}
	case 139:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 141:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 143:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 144:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 145:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"if"}}
		}
	case 146:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"while"}}
		}
	case 147:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"for"}}
		}
	case 148:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"unset"}}
		}
	case 149:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"select"}}
		}
	case 150:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cmds"}}
		}
	case 151:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 152:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsten"}}
		}
	case 153:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssite"}}
		}
	case 154:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsbldg"}}
		}
	case 155:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsroom"}}
		}
	case 156:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsrack"}}
		}
	case 157:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsdev"}}
		}
	case 158:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"-"}}
		}
	case 159:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".template"}}
		}
	case 160:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".cmds"}}
		}
	case 161:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".var"}}
		}
	case 162:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"+"}}
		}
	case 163:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"="}}
		}
	case 164:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 165:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 166:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 167:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 168:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 169:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 170:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 171:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 172:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].node}}}}
		}
	case 173:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].node}}}}
		}
	case 174:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].node}}}}
		}
	case 175:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].node}}}}
		}
	case 176:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}}}
		}
	case 177:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}}}
		}
	case 178:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}}}
		}
	case 179:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}}}
		}
	case 180:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}}}
		}
	case 181:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}}}
		}
	case 182:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].node, "sizeUnit": yyS[yypt-0].node}}}}
		}
	case 183:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].node, "sizeUnit": yyS[yypt-0].node}}}}
		}
	case 184:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].node, "leftRack": yyS[yypt-4].node, "rightRack": yyS[yypt-2].node, "temperature": yyS[yypt-0].node}}}
		}
	case 185:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].node, "leftRack": yyS[yypt-4].node, "rightRack": yyS[yypt-2].node, "temperature": yyS[yypt-0].node}}}
		}
	case 186:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].node, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x}}
		}
	case 187:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].node, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x}}
		}
	case 188:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].node, "pos1": yyS[yypt-2].node, "pos2": yyS[yypt-0].node}}}
		}
	case 189:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].node, "pos1": yyS[yypt-2].node, "pos2": yyS[yypt-0].node}}}
		}
	case 190:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 191:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("tenant"), "tenant", yyS[yypt-0].s}}
		}
	case 192:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 193:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("site"), "site", yyS[yypt-0].s}}
		}
	case 194:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 195:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("building"), "building", yyS[yypt-0].s}}
		}
	case 196:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 197:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("room"), "room", yyS[yypt-0].s}}
		}
	case 198:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 199:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("rack"), "rack", yyS[yypt-0].s}}
		}
	case 200:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 201:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("device"), "device", yyS[yypt-0].s}}
		}
	case 202:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("corridor"), "corridor", yyS[yypt-0].s}}
		}
	case 203:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 204:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("group"), "group", yyS[yypt-0].s}}
		}
	case 205:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 206:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("separator"), "separator", yyS[yypt-0].s}}
		}
	case 207:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 208:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 209:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 210:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 211:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 212:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 213:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 214:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 215:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 216:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 217:
		{
			val := map[string]interface{}{yyS[yypt-2].s: (yyS[yypt-0].node).(node).execute()}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), val}}
			if cmd.State.DebugLvl >= 3 {
				println("Attribute Acquired")
			}
		}
	case 218:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 219:
		{
			x := make([]string, 0)
			x = append(x, formActualPath(yyS[yypt-2].s))
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 220:
		{
			yyVAL.sarr = []string{formActualPath(yyS[yypt-0].s)}
		}
	case 221:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 222:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 223:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 224:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 225:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-6].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 226:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 227:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 228:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 229:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 230:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 231:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, (yyS[yypt-0].node).(node).execute()}
		}
	case 232:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s, "cmd"}}
		}
	case 233:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadTemplate, "Load", []interface{}{yyS[yypt-0].s, "template"}}
		}
	case 234:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 235:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 236:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 237:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 238:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, yyS[yypt-3].node, nil}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 239:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-6].s /*&numNode{NUM,$4}*/, yyS[yypt-4].node /*&strNode{STR, $7}*/, yyS[yypt-1].node}
		}
	case 240:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}, nil}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 241:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 242:
		{ /*x := $3+"="+$5;*/
			val := (yyS[yypt-0].node).(node).execute()
			println("Our val:", val)
			x := map[string]interface{}{yyS[yypt-2].s: val}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{x}}
		}
	case 243:
		{
			yyVAL.node = &commonNode{COMMON, cmd.HandleUI, "HandleUnity", []interface{}{"ui", yyS[yypt-4].s, (yyS[yypt-1].node).(node).execute()}}
		}
	case 244:
		{
			yyVAL.node = &commonNode{COMMON, cmd.HandleUI, "HandleUnity", []interface{}{"camera", yyS[yypt-2].s, (yyS[yypt-0].node).(node).execute()}}
		}
	case 245:
		{
			yyVAL.node = &commonNode{COMMON, cmd.HandleUI, "HandleUnity", []interface{}{"camera", yyS[yypt-14].s, []interface{}{yyS[yypt-11].node, yyS[yypt-9].node, yyS[yypt-7].node}, []interface{}{yyS[yypt-3].node, yyS[yypt-1].node}}}
		}
	case 246:
		{
			x := []interface{}{yyS[yypt-2].node}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 247:
		{
			x := []interface{}{yyS[yypt-0].node}
			yyVAL.arr = x
		}
	case 248:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 249:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}
	case 250:
		{
			if len(yyS[yypt-0].arr) != 0 {
				yyVAL.arr = append(yyS[yypt-2].arr, yyS[yypt-0].arr...)
			} else {
				yyVAL.arr = yyS[yypt-2].arr
			}
		}
	case 251:
		{
			yyVAL.arr = yyS[yypt-0].arr
		}
	case 252:
		{
			yyVAL.arr = nil
		}
	case 253:
		{
			yyVAL.arr = []interface{}{yyS[yypt-0].node}
		}
	case 254:
		{
			x := yyS[yypt-1].s
			yyVAL.s = x + "," + yyS[yypt-0].s
		}
	case 255:
		{
			yyVAL.s = ""
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
