// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

/*
https://www.cs.unc.edu/~olivier/comp524/Lecture08.pdf
https://www.gnu.org/software/bison/manual/html_node/
       Using-Mid_002dRule-Actions.html#Using-Mid_002dRule-Actions

https://stackoverflow.com/questions/9576373/
       can-bison-verify-scope-as-well-as-syntax
*/
var root node

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57425
	yyEofCode      = 57344
	TOK_AND        = 57415
	TOK_ATTR       = 57356
	TOK_ATTRSPEC   = 57390
	TOK_BASHTYPE   = 57365
	TOK_BLDG       = 57350
	TOK_BOOL       = 57359
	TOK_CD         = 57371
	TOK_CLR        = 57373
	TOK_CMDFLAG    = 57367
	TOK_CMDS       = 57401
	TOK_COMMA      = 57399
	TOK_CREATE     = 57360
	TOK_DELETE     = 57363
	TOK_DEREF      = 57404
	TOK_DEVICE     = 57353
	TOK_DIV        = 57418
	TOK_DOC        = 57370
	TOK_DONE       = 57424
	TOK_DOT        = 57400
	TOK_ELSE       = 57409
	TOK_EQUAL      = 57366
	TOK_EXIT       = 57369
	TOK_FI         = 57423
	TOK_FOR        = 57407
	TOK_GET        = 57361
	TOK_GREATER    = 57420
	TOK_GREP       = 57374
	TOK_IF         = 57406
	TOK_IN         = 57416
	TOK_LBLOCK     = 57410
	TOK_LBRAC      = 57397
	TOK_LESS       = 57421
	TOK_LPAREN     = 57412
	TOK_LS         = 57375
	TOK_LSBLDG     = 57380
	TOK_LSDEV      = 57383
	TOK_LSOG       = 57377
	TOK_LSRACK     = 57382
	TOK_LSROOM     = 57381
	TOK_LSSITE     = 57379
	TOK_LSSUBDEV   = 57384
	TOK_LSSUBDEV1  = 57385
	TOK_LSTEN      = 57378
	TOK_MULT       = 57419
	TOK_NOT        = 57417
	TOK_NUM        = 57346
	TOK_OCBLDG     = 57386
	TOK_OCDEL      = 57358
	TOK_OCDEV      = 57387
	TOK_OCPSPEC    = 57395
	TOK_OCRACK     = 57388
	TOK_OCROOM     = 57389
	TOK_OCSDEV     = 57393
	TOK_OCSDEV1    = 57394
	TOK_OCSITE     = 57391
	TOK_OCTENANT   = 57392
	TOK_OR         = 57414
	TOK_PLUS       = 57357
	TOK_PWD        = 57372
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57411
	TOK_RBRAC      = 57398
	TOK_ROOM       = 57351
	TOK_RPAREN     = 57413
	TOK_SEARCH     = 57364
	TOK_SELECT     = 57396
	TOK_SEMICOL    = 57405
	TOK_SITE       = 57349
	TOK_SLASH      = 57368
	TOK_SUBDEVICE  = 57354
	TOK_SUBDEVICE1 = 57355
	TOK_TEMPLATE   = 57402
	TOK_TENANT     = 57348
	TOK_THEN       = 57422
	TOK_TREE       = 57376
	TOK_UPDATE     = 57362
	TOK_VAR        = 57403
	TOK_WHILE      = 57408
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -142
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57413: 0,   // TOK_RPAREN (138x)
		57405: 1,   // TOK_SEMICOL (138x)
		57423: 2,   // TOK_FI (127x)
		57344: 3,   // $end (122x)
		57424: 4,   // TOK_DONE (122x)
		57358: 5,   // TOK_OCDEL (116x)
		57409: 6,   // TOK_ELSE (113x)
		57347: 7,   // TOK_WORD (111x)
		57400: 8,   // TOK_DOT (67x)
		57346: 9,   // TOK_NUM (60x)
		57357: 10,  // TOK_PLUS (53x)
		57404: 11,  // TOK_DEREF (52x)
		57368: 12,  // TOK_SLASH (51x)
		57390: 13,  // TOK_ATTRSPEC (47x)
		57359: 14,  // TOK_BOOL (45x)
		57451: 15,  // P1 (44x)
		57417: 16,  // TOK_NOT (44x)
		57366: 17,  // TOK_EQUAL (42x)
		57450: 18,  // P (41x)
		57414: 19,  // TOK_OR (32x)
		57356: 20,  // TOK_ATTR (31x)
		57412: 21,  // TOK_LPAREN (28x)
		57411: 22,  // TOK_RBLOCK (26x)
		57449: 23,  // ORIENTN (25x)
		57415: 24,  // TOK_AND (25x)
		57454: 25,  // WORDORNUM (24x)
		57455: 26,  // factor (21x)
		57461: 27,  // unary (21x)
		57460: 28,  // term (17x)
		57456: 29,  // nex (15x)
		57395: 30,  // TOK_OCPSPEC (15x)
		57420: 31,  // TOK_GREATER (14x)
		57421: 32,  // TOK_LESS (14x)
		57418: 33,  // TOK_DIV (13x)
		57419: 34,  // TOK_MULT (13x)
		57453: 35,  // REL (11x)
		57371: 36,  // TOK_CD (11x)
		57360: 37,  // TOK_CREATE (11x)
		57363: 38,  // TOK_DELETE (11x)
		57361: 39,  // TOK_GET (11x)
		57375: 40,  // TOK_LS (11x)
		57377: 41,  // TOK_LSOG (11x)
		57376: 42,  // TOK_TREE (11x)
		57362: 43,  // TOK_UPDATE (11x)
		57426: 44,  // BASH (10x)
		57435: 45,  // K (10x)
		57436: 46,  // NT_CREATE (10x)
		57437: 47,  // NT_DEL (10x)
		57438: 48,  // NT_GET (10x)
		57439: 49,  // NT_UPDATE (10x)
		57440: 50,  // OCCHOOSE (10x)
		57442: 51,  // OCDEL (10x)
		57443: 52,  // OCDOT (10x)
		57444: 53,  // OCGET (10x)
		57445: 54,  // OCLISYNTX (10x)
		57446: 55,  // OCSEL (10x)
		57447: 56,  // OCUPDATE (10x)
		57452: 57,  // Q (10x)
		57459: 58,  // stmnt (10x)
		57373: 59,  // TOK_CLR (10x)
		57370: 60,  // TOK_DOC (10x)
		57369: 61,  // TOK_EXIT (10x)
		57374: 62,  // TOK_GREP (10x)
		57380: 63,  // TOK_LSBLDG (10x)
		57383: 64,  // TOK_LSDEV (10x)
		57382: 65,  // TOK_LSRACK (10x)
		57381: 66,  // TOK_LSROOM (10x)
		57379: 67,  // TOK_LSSITE (10x)
		57384: 68,  // TOK_LSSUBDEV (10x)
		57385: 69,  // TOK_LSSUBDEV1 (10x)
		57378: 70,  // TOK_LSTEN (10x)
		57372: 71,  // TOK_PWD (10x)
		57396: 72,  // TOK_SELECT (10x)
		57430: 73,  // EQAL (9x)
		57406: 74,  // TOK_IF (9x)
		57408: 75,  // TOK_WHILE (9x)
		57434: 76,  // JOIN (8x)
		57427: 77,  // CLSD_STMT (7x)
		57431: 78,  // EXPR (7x)
		57448: 79,  // OPEN_STMT (6x)
		57407: 80,  // TOK_FOR (6x)
		57432: 81,  // F (5x)
		57398: 82,  // TOK_RBRAC (4x)
		57428: 83,  // CTRL (3x)
		57457: 84,  // st2 (3x)
		57350: 85,  // TOK_BLDG (3x)
		57353: 86,  // TOK_DEVICE (3x)
		57352: 87,  // TOK_RACK (3x)
		57351: 88,  // TOK_ROOM (3x)
		57349: 89,  // TOK_SITE (3x)
		57348: 90,  // TOK_TENANT (3x)
		57429: 91,  // E (2x)
		57433: 92,  // GETOBJS (2x)
		57410: 93,  // TOK_LBLOCK (2x)
		57397: 94,  // TOK_LBRAC (2x)
		57354: 95,  // TOK_SUBDEVICE (2x)
		57355: 96,  // TOK_SUBDEVICE1 (2x)
		57422: 97,  // TOK_THEN (2x)
		57441: 98,  // OCCR (1x)
		57458: 99,  // start (1x)
		57401: 100, // TOK_CMDS (1x)
		57399: 101, // TOK_COMMA (1x)
		57416: 102, // TOK_IN (1x)
		57386: 103, // TOK_OCBLDG (1x)
		57387: 104, // TOK_OCDEV (1x)
		57388: 105, // TOK_OCRACK (1x)
		57389: 106, // TOK_OCROOM (1x)
		57391: 107, // TOK_OCSITE (1x)
		57392: 108, // TOK_OCTENANT (1x)
		57402: 109, // TOK_TEMPLATE (1x)
		57403: 110, // TOK_VAR (1x)
		57425: 111, // $default (0x)
		57345: 112, // error (0x)
		57365: 113, // TOK_BASHTYPE (0x)
		57367: 114, // TOK_CMDFLAG (0x)
		57393: 115, // TOK_OCSDEV (0x)
		57394: 116, // TOK_OCSDEV1 (0x)
		57364: 117, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_RPAREN",
		"TOK_SEMICOL",
		"TOK_FI",
		"$end",
		"TOK_DONE",
		"TOK_OCDEL",
		"TOK_ELSE",
		"TOK_WORD",
		"TOK_DOT",
		"TOK_NUM",
		"TOK_PLUS",
		"TOK_DEREF",
		"TOK_SLASH",
		"TOK_ATTRSPEC",
		"TOK_BOOL",
		"P1",
		"TOK_NOT",
		"TOK_EQUAL",
		"P",
		"TOK_OR",
		"TOK_ATTR",
		"TOK_LPAREN",
		"TOK_RBLOCK",
		"ORIENTN",
		"TOK_AND",
		"WORDORNUM",
		"factor",
		"unary",
		"term",
		"nex",
		"TOK_OCPSPEC",
		"TOK_GREATER",
		"TOK_LESS",
		"TOK_DIV",
		"TOK_MULT",
		"REL",
		"TOK_CD",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_GET",
		"TOK_LS",
		"TOK_LSOG",
		"TOK_TREE",
		"TOK_UPDATE",
		"BASH",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCDOT",
		"OCGET",
		"OCLISYNTX",
		"OCSEL",
		"OCUPDATE",
		"Q",
		"stmnt",
		"TOK_CLR",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GREP",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSSUBDEV",
		"TOK_LSSUBDEV1",
		"TOK_LSTEN",
		"TOK_PWD",
		"TOK_SELECT",
		"EQAL",
		"TOK_IF",
		"TOK_WHILE",
		"JOIN",
		"CLSD_STMT",
		"EXPR",
		"OPEN_STMT",
		"TOK_FOR",
		"F",
		"TOK_RBRAC",
		"CTRL",
		"st2",
		"TOK_BLDG",
		"TOK_DEVICE",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"E",
		"GETOBJS",
		"TOK_LBLOCK",
		"TOK_LBRAC",
		"TOK_SUBDEVICE",
		"TOK_SUBDEVICE1",
		"TOK_THEN",
		"OCCR",
		"start",
		"TOK_CMDS",
		"TOK_COMMA",
		"TOK_IN",
		"TOK_OCBLDG",
		"TOK_OCDEV",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_TEMPLATE",
		"TOK_VAR",
		"$default",
		"error",
		"TOK_BASHTYPE",
		"TOK_CMDFLAG",
		"TOK_OCSDEV",
		"TOK_OCSDEV1",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {99, 1},
		2:   {84, 1},
		3:   {84, 3},
		4:   {84, 1},
		5:   {58, 1},
		6:   {58, 1},
		7:   {58, 1},
		8:   {58, 0},
		9:   {83, 1},
		10:  {83, 1},
		11:  {79, 7},
		12:  {79, 7},
		13:  {79, 9},
		14:  {79, 6},
		15:  {79, 15},
		16:  {79, 12},
		17:  {77, 1},
		18:  {77, 9},
		19:  {77, 6},
		20:  {78, 3},
		21:  {78, 1},
		22:  {76, 3},
		23:  {76, 1},
		24:  {73, 4},
		25:  {73, 4},
		26:  {73, 1},
		27:  {35, 3},
		28:  {35, 4},
		29:  {35, 4},
		30:  {35, 3},
		31:  {35, 1},
		32:  {29, 3},
		33:  {29, 3},
		34:  {29, 1},
		35:  {28, 3},
		36:  {28, 3},
		37:  {28, 1},
		38:  {27, 2},
		39:  {27, 2},
		40:  {27, 1},
		41:  {26, 3},
		42:  {26, 1},
		43:  {26, 1},
		44:  {26, 1},
		45:  {45, 1},
		46:  {45, 1},
		47:  {45, 1},
		48:  {45, 1},
		49:  {46, 3},
		50:  {46, 4},
		51:  {48, 2},
		52:  {48, 3},
		53:  {49, 3},
		54:  {47, 2},
		55:  {91, 1},
		56:  {91, 1},
		57:  {91, 1},
		58:  {91, 1},
		59:  {91, 1},
		60:  {91, 1},
		61:  {91, 1},
		62:  {91, 1},
		63:  {23, 1},
		64:  {23, 1},
		65:  {23, 0},
		66:  {25, 1},
		67:  {25, 1},
		68:  {25, 4},
		69:  {25, 1},
		70:  {81, 4},
		71:  {81, 3},
		72:  {18, 1},
		73:  {18, 2},
		74:  {15, 3},
		75:  {15, 1},
		76:  {15, 4},
		77:  {15, 1},
		78:  {15, 2},
		79:  {15, 1},
		80:  {15, 2},
		81:  {15, 0},
		82:  {57, 2},
		83:  {57, 2},
		84:  {57, 2},
		85:  {57, 2},
		86:  {57, 2},
		87:  {57, 2},
		88:  {57, 2},
		89:  {57, 2},
		90:  {57, 2},
		91:  {57, 2},
		92:  {57, 2},
		93:  {57, 2},
		94:  {57, 3},
		95:  {57, 1},
		96:  {44, 1},
		97:  {44, 1},
		98:  {44, 1},
		99:  {44, 1},
		100: {44, 1},
		101: {44, 1},
		102: {44, 2},
		103: {44, 2},
		104: {44, 2},
		105: {44, 2},
		106: {44, 2},
		107: {44, 2},
		108: {44, 2},
		109: {44, 2},
		110: {44, 2},
		111: {54, 2},
		112: {54, 1},
		113: {54, 1},
		114: {54, 1},
		115: {54, 1},
		116: {54, 1},
		117: {54, 1},
		118: {98, 5},
		119: {98, 5},
		120: {98, 5},
		121: {98, 5},
		122: {98, 7},
		123: {98, 7},
		124: {98, 7},
		125: {98, 7},
		126: {98, 7},
		127: {98, 7},
		128: {98, 7},
		129: {98, 7},
		130: {51, 2},
		131: {56, 5},
		132: {53, 2},
		133: {92, 3},
		134: {92, 1},
		135: {50, 4},
		136: {52, 6},
		137: {52, 4},
		138: {52, 4},
		139: {52, 2},
		140: {55, 1},
		141: {55, 5},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [331][]uint16{
		// 0
		{1: 134, 3: 134, 5: 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 145, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196, 74: 152, 153, 77: 151, 79: 150, 154, 83: 146, 144, 99: 143},
		{3: 142},
		{3: 141},
		{1: 471, 140, 140, 6: 125},
		{2: 138, 138},
		// 5
		{137, 137, 137, 137, 137, 6: 137},
		{136, 136, 136, 136, 136, 6: 136},
		{135, 135, 135, 135, 135, 6: 135},
		{2: 133, 133},
		{2: 132, 132},
		// 10
		{21: 442, 93: 441},
		{21: 433},
		{7: 366, 21: 365},
		{97, 97, 97, 97, 97, 6: 97},
		{96, 96, 96, 96, 96, 6: 96},
		// 15
		{95, 95, 95, 95, 95, 6: 95},
		{94, 94, 94, 94, 94, 6: 94},
		{85: 354, 357, 356, 355, 353, 352, 361, 95: 358, 359},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 350, 85: 354, 357, 356, 355, 353, 352, 351, 95: 358, 359},
		{5: 202, 7: 165, 201, 11: 203, 164, 15: 163, 18: 344, 20: 61},
		// 20
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 343},
		{70, 70, 70, 70, 70, 6: 70, 8: 70, 70, 13: 70, 20: 70},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 61, 11: 203, 13: 61, 15: 342, 20: 61},
		{67, 67, 67, 67, 67, 6: 67, 8: 67, 67, 12: 340, 67, 20: 67},
		{8: 212, 100: 330, 109: 331, 329},
		// 25
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 328},
		{7: 327},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 326},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 325},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 324},
		// 30
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 323},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 322},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 321},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 320},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 319},
		// 35
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 318},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 317},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 314, 11: 203, 164, 15: 163, 18: 315},
		{47, 47, 47, 47, 47, 6: 47},
		{46, 46, 46, 46, 46, 6: 46},
		// 40
		{45, 45, 45, 45, 45, 6: 45},
		{44, 44, 44, 44, 44, 6: 44},
		{43, 43, 43, 43, 43, 6: 43},
		{42, 42, 42, 42, 42, 6: 42},
		{41, 41, 41, 41, 41, 6: 41, 311, 36: 306, 307, 310, 308, 305, 313, 312, 309},
		// 45
		{85: 234, 240, 238, 236, 232, 230, 98: 228, 103: 233, 239, 237, 235, 231, 229},
		{30, 30, 30, 30, 30, 6: 30},
		{29, 29, 29, 29, 29, 6: 29},
		{28, 28, 28, 28, 28, 6: 28},
		{27, 27, 27, 27, 27, 6: 27},
		// 50
		{26, 26, 26, 26, 26, 6: 26},
		{25, 25, 25, 25, 25, 6: 25},
		{8: 215},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 204, 94: 205},
		{2, 2, 2, 2, 2, 6: 2, 8: 197},
		// 55
		{20: 198},
		{17: 199},
		{7: 200},
		{1, 1, 1, 1, 1, 6: 1},
		{8: 212},
		// 60
		{63, 63, 63, 63, 63, 6: 63, 8: 63, 63, 13: 63, 20: 63},
		{7: 211},
		{10, 10, 10, 10, 10, 6: 10},
		{7: 206, 92: 207},
		{82: 8, 101: 209},
		// 65
		{82: 208},
		{7, 7, 7, 7, 7, 6: 7},
		{7: 206, 92: 210},
		{82: 9},
		{62, 62, 62, 62, 62, 6: 62, 8: 62, 62, 13: 62, 20: 62},
		// 70
		{64, 64, 64, 64, 64, 6: 64, 8: 64, 64, 12: 213, 64, 20: 64},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 61, 11: 203, 13: 61, 15: 214, 20: 61},
		{66, 66, 66, 66, 66, 6: 66, 8: 66, 66, 13: 66, 20: 66},
		{20: 216},
		{17: 217},
		// 75
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 224},
		{7: 79},
		{7: 78},
		{76, 76, 76, 76, 76, 6: 76, 13: 76, 20: 76},
		{75, 75, 75, 75, 75, 6: 75, 13: 75, 20: 75},
		// 80
		{7: 225},
		{73, 73, 73, 73, 73, 6: 73, 13: 73, 20: 73},
		{11, 11, 11, 11, 11, 6: 11},
		{5: 219, 7: 77, 10: 218, 23: 226},
		{7: 227},
		// 85
		{74, 74, 74, 74, 74, 6: 74, 13: 74, 20: 74},
		{31, 31, 31, 31, 31, 6: 31},
		{30: 301},
		{30: 297},
		{30: 293},
		// 90
		{30: 289},
		{30: 283},
		{30: 277},
		{30: 271},
		{30: 265},
		// 95
		{30: 259},
		{30: 253},
		{30: 247},
		{30: 241},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 242},
		// 100
		{13: 243},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 244},
		{13: 245},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 246},
		{13, 13, 13, 13, 13, 6: 13},
		// 105
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 248},
		{13: 249},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 250},
		{13: 251},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 252},
		// 110
		{14, 14, 14, 14, 14, 6: 14},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 254},
		{13: 255},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 256},
		{13: 257},
		// 115
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 258},
		{15, 15, 15, 15, 15, 6: 15},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 260},
		{13: 261},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 262},
		// 120
		{13: 263},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 264},
		{16, 16, 16, 16, 16, 6: 16},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 266},
		{13: 267},
		// 125
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 268},
		{13: 269},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 270},
		{17, 17, 17, 17, 17, 6: 17},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 272},
		// 130
		{13: 273},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 274},
		{13: 275},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 276},
		{18, 18, 18, 18, 18, 6: 18},
		// 135
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 278},
		{13: 279},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 280},
		{13: 281},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 282},
		// 140
		{19, 19, 19, 19, 19, 6: 19},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 284},
		{13: 285},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 286},
		{13: 287},
		// 145
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 288},
		{20, 20, 20, 20, 20, 6: 20},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 290},
		{13: 291},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 292},
		// 150
		{21, 21, 21, 21, 21, 6: 21},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 294},
		{13: 295},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 296},
		{22, 22, 22, 22, 22, 6: 22},
		// 155
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 298},
		{13: 299},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 300},
		{23, 23, 23, 23, 23, 6: 23},
		{5: 202, 7: 165, 201, 11: 203, 164, 61, 15: 163, 18: 302},
		// 160
		{13: 303},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 304},
		{24, 24, 24, 24, 24, 6: 24},
		{40, 40, 40, 40, 40, 6: 40},
		{39, 39, 39, 39, 39, 6: 39},
		// 165
		{38, 38, 38, 38, 38, 6: 38},
		{37, 37, 37, 37, 37, 6: 37},
		{36, 36, 36, 36, 36, 6: 36},
		{35, 35, 35, 35, 35, 6: 35},
		{34, 34, 34, 34, 34, 6: 34},
		// 170
		{33, 33, 33, 33, 33, 6: 33},
		{32, 32, 32, 32, 32, 6: 32},
		{50, 50, 50, 50, 50, 6: 50},
		{49, 49, 49, 49, 49, 6: 49, 9: 316},
		{48, 48, 48, 48, 48, 6: 48},
		// 175
		{51, 51, 51, 51, 51, 6: 51},
		{52, 52, 52, 52, 52, 6: 52},
		{53, 53, 53, 53, 53, 6: 53},
		{54, 54, 54, 54, 54, 6: 54},
		{55, 55, 55, 55, 55, 6: 55},
		// 180
		{56, 56, 56, 56, 56, 6: 56},
		{57, 57, 57, 57, 57, 6: 57},
		{58, 58, 58, 58, 58, 6: 58},
		{59, 59, 59, 59, 59, 6: 59},
		{60, 60, 60, 60, 60, 6: 60},
		// 185
		{3, 3, 3, 3, 3, 6: 3, 8: 62},
		{12, 12, 12, 12, 12, 6: 12},
		{30: 336},
		{30: 334},
		{30: 332},
		// 190
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 333},
		{4, 4, 4, 4, 4, 6: 4},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 11: 203, 164, 15: 163, 18: 335},
		{5, 5, 5, 5, 5, 6: 5},
		{7: 337},
		// 195
		{17: 338},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 339},
		{6, 6, 6, 6, 6, 6: 6},
		{61, 61, 61, 61, 61, 202, 61, 165, 201, 61, 11: 203, 13: 61, 15: 341, 20: 61},
		{68, 68, 68, 68, 68, 6: 68, 8: 68, 68, 13: 68, 20: 68},
		// 200
		{69, 69, 69, 69, 69, 6: 69, 8: 69, 69, 13: 69, 20: 69},
		{88, 88, 88, 88, 88, 6: 88},
		{20: 346, 81: 345},
		{89, 89, 89, 89, 89, 6: 89},
		{17: 347},
		// 205
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 348},
		{71, 71, 71, 71, 71, 6: 71, 20: 346, 81: 349},
		{72, 72, 72, 72, 72, 6: 72},
		{91, 91, 91, 91, 91, 6: 91},
		{20: 346, 81: 360},
		// 210
		{5: 87, 7: 87, 87, 11: 87, 87, 20: 87},
		{5: 86, 7: 86, 86, 11: 86, 86, 20: 86},
		{5: 85, 7: 85, 85, 11: 85, 85, 20: 85},
		{5: 84, 7: 84, 84, 11: 84, 84, 20: 84},
		{5: 83, 7: 83, 83, 11: 83, 83, 20: 83},
		// 215
		{5: 82, 7: 82, 82, 11: 82, 82, 20: 82},
		{5: 81, 7: 81, 81, 11: 81, 81, 20: 81},
		{5: 80, 7: 80, 80, 11: 80, 80, 20: 80},
		{90, 90, 90, 90, 90, 6: 90},
		{5: 202, 7: 165, 201, 11: 203, 164, 15: 163, 18: 363, 20: 346, 81: 362},
		// 220
		{93, 93, 93, 93, 93, 6: 93},
		{20: 346, 81: 364},
		{92, 92, 92, 92, 92, 6: 92},
		{21: 377},
		{102: 367},
		// 225
		{94: 368},
		{9: 369},
		{8: 370},
		{8: 371},
		{9: 372},
		// 230
		{82: 373},
		{1: 374},
		{4: 134, 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 375, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196},
		{4: 376},
		{2: 126, 126, 126},
		// 235
		{7: 378},
		{17: 379},
		{5: 219, 7: 220, 9: 221, 218, 14: 223, 23: 222, 25: 380},
		{1: 381},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 383, 78: 382},
		// 240
		{1: 426, 19: 397},
		{121, 121, 19: 121, 22: 121, 24: 400},
		{119, 119, 16: 403, 402, 19: 119, 22: 119, 24: 119},
		{116, 116, 16: 116, 116, 19: 116, 22: 116, 24: 116},
		{111, 111, 5: 417, 10: 416, 16: 111, 111, 19: 111, 22: 111, 24: 111, 31: 415, 414},
		// 245
		{108, 108, 5: 108, 10: 108, 16: 108, 108, 19: 108, 22: 108, 24: 108, 31: 108, 108, 411, 410},
		{105, 105, 5: 105, 10: 105, 16: 105, 105, 19: 105, 22: 105, 24: 105, 31: 105, 105, 105, 105},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 409},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 408},
		{102, 102, 5: 102, 10: 102, 16: 102, 102, 19: 102, 22: 102, 24: 102, 31: 102, 102, 102, 102},
		// 250
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 383, 78: 396},
		{100, 100, 5: 100, 10: 100, 16: 100, 100, 19: 100, 22: 100, 24: 100, 31: 100, 100, 100, 100},
		{99, 99, 5: 99, 10: 99, 16: 99, 99, 19: 99, 22: 99, 24: 99, 31: 99, 99, 99, 99},
		{98, 98, 5: 98, 10: 98, 16: 98, 98, 19: 98, 22: 98, 24: 98, 31: 98, 98, 98, 98},
		{398, 19: 397},
		// 255
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 399},
		{101, 101, 5: 101, 10: 101, 16: 101, 101, 19: 101, 22: 101, 24: 101, 31: 101, 101, 101, 101},
		{122, 122, 19: 122, 22: 122, 24: 400},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 401},
		{120, 120, 16: 403, 402, 19: 120, 22: 120, 24: 120},
		// 260
		{17: 406},
		{17: 404},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 405},
		{117, 117, 16: 117, 117, 19: 117, 22: 117, 24: 117},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 407},
		// 265
		{118, 118, 16: 118, 118, 19: 118, 22: 118, 24: 118},
		{103, 103, 5: 103, 10: 103, 16: 103, 103, 19: 103, 22: 103, 24: 103, 31: 103, 103, 103, 103},
		{104, 104, 5: 104, 10: 104, 16: 104, 104, 19: 104, 22: 104, 24: 104, 31: 104, 104, 104, 104},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 413},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 412},
		// 270
		{106, 106, 5: 106, 10: 106, 16: 106, 106, 19: 106, 22: 106, 24: 106, 31: 106, 106, 106, 106},
		{107, 107, 5: 107, 10: 107, 16: 107, 107, 19: 107, 22: 107, 24: 107, 31: 107, 107, 107, 107},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 424, 21: 392, 26: 391, 388, 387, 423},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 420, 21: 392, 26: 391, 388, 387, 421},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 419},
		// 275
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 418},
		{109, 109, 5: 109, 10: 109, 16: 109, 109, 19: 109, 22: 109, 24: 109, 31: 109, 109, 411, 410},
		{110, 110, 5: 110, 10: 110, 16: 110, 110, 19: 110, 22: 110, 24: 110, 31: 110, 110, 411, 410},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 422},
		{112, 112, 5: 417, 10: 416, 16: 112, 112, 19: 112, 22: 112, 24: 112},
		// 280
		{113, 113, 5: 417, 10: 416, 16: 113, 113, 19: 113, 22: 113, 24: 113},
		{115, 115, 5: 417, 10: 416, 16: 115, 115, 19: 115, 22: 115, 24: 115},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 425},
		{114, 114, 5: 417, 10: 416, 16: 114, 114, 19: 114, 22: 114, 24: 114},
		{134, 5: 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 427, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196},
		// 285
		{428},
		{429},
		{1: 430},
		{4: 134, 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 431, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196},
		{4: 432},
		// 290
		{2: 127, 127, 127},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 383, 78: 434},
		{435, 19: 397},
		{4: 134, 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 437, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196, 74: 152, 153, 77: 438, 79: 436, 154},
		{4: 440},
		// 295
		{2: 125, 4: 125, 6: 125},
		{4: 439},
		{2: 123, 123, 123, 6: 123},
		{2: 128, 128, 128},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 383, 78: 455},
		// 300
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 383, 78: 443},
		{444, 19: 397},
		{97: 445},
		{5: 167, 134, 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 437, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196, 74: 446, 448, 77: 447},
		{21: 442},
		// 305
		{6: 452},
		{21: 449},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 383, 78: 450},
		{451, 19: 397},
		{4: 134, 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 437, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196, 74: 446, 448, 77: 438},
		// 310
		{2: 134, 5: 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 437, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196, 74: 446, 448, 77: 453},
		{2: 454},
		{2: 124, 124, 124, 6: 124},
		{19: 397, 22: 456},
		{97: 457},
		// 315
		{1: 134, 134, 5: 167, 134, 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 145, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196, 74: 152, 153, 77: 459, 79: 458, 154, 83: 146, 460},
		{2: 470},
		{2: 132, 6: 462},
		{2: 461},
		{2: 131, 131, 131},
		// 320
		{74: 463, 465, 79: 464, 154},
		{93: 441},
		{2: 469},
		{21: 466},
		{5: 390, 7: 394, 9: 393, 14: 395, 16: 389, 21: 392, 26: 391, 388, 387, 386, 35: 385, 73: 384, 76: 383, 78: 467},
		// 325
		{468, 19: 397},
		{74: 463, 465, 79: 436, 154},
		{2: 129, 129, 129},
		{2: 130, 130, 130},
		{1: 134, 134, 134, 5: 167, 7: 165, 166, 10: 187, 168, 164, 15: 163, 17: 195, 194, 36: 169, 159, 162, 160, 170, 183, 179, 161, 180, 147, 155, 158, 156, 157, 191, 188, 192, 190, 149, 193, 189, 148, 145, 181, 186, 185, 182, 173, 176, 175, 174, 172, 177, 178, 171, 184, 196, 74: 152, 153, 77: 151, 79: 150, 154, 83: 146, 472},
		// 330
		{2: 139, 139},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 112

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{ /*$$=[]node{$1}*/
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = nil
		}
	case 9:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil}
		}
	case 13:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-6].node, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 15:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", n1, n2}
				incr = &arithNode{ARITHMETIC, "+", n1, &numNode{NUM, 1}}
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", n1, n2}
				incr = &arithNode{ARITHMETIC, "-", n1, &numNode{NUM, 1}}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incr, yyS[yypt-1].node}
		}
	case 17:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 18:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-6].node, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 19:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 23:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 24:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 27:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 32:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-1].s}
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-1].s}
		}
	case 34:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 35:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 38:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 39:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 40:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 41:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 42:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 43:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s}
		}
	case 44:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 45:
		{
			println("@State start")
		}
	case 49:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-1].s), yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 50:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s)}}
		}
	case 51:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 52:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 53:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 54:
		{
			println("@State NT_DEL")
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 63:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 64:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 65:
		{
			yyVAL.s = ""
		}
	case 66:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 67:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 68:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 69:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 70:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 71:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 73:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 74:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 75:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 76:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 77:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 78:
		{
			yyVAL.s = ".."
		}
	case 79:
		{
			yyVAL.s = "-"
		}
	case 80:
		{
			yyVAL.s = ""
		}
	case 81:
		{
			yyVAL.s = ""
		}
	case 82:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 83:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 84:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 85:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 86:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 87:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 88:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 89:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 90:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 91:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 92:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{"", yyS[yypt-0].n}}
		}
	case 93:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 94:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 95:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 96:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 97:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 98:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 99:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 100:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 101:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 111:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 112:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 113:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 114:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 115:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 116:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 117:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 131:
		{
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val)}}
			println("Attribute Acquired")
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 133:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 134:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 136:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, dCatchNodePtr}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 139:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 141:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{resMap(&x)}}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
