// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		if input[idx].(string) == "false" {
			x := map[int]interface{}{0: &boolNode{BOOL, false}}
			res = append(res, x)
		} else if input[idx].(string) == "true" {
			x := map[int]interface{}{0: &boolNode{BOOL, true}}
			res = append(res, x)
		} else if v, e := strconv.Atoi(input[idx].(string)); e == nil {
			x := map[int]interface{}{0: &numNode{NUM, v}}
			res = append(res, x)
		} else {
			x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
			res = append(res, x)
		}
	}
	return res
}

//This func helps to build the correct map[str]interface{}
//based on the input string x
func retMapInf(x string, y interface{}) map[string]interface{} {
	switch x {
	case "id", "name", "category", "parentID",
		"description", "domain", "parentid", "parentId":
		return map[string]interface{}{x: y}

	default:
		return map[string]interface{}{
			"attributes": map[string]interface{}{x: y}}
	}
}

func resMap(x *string, ent string, isUpdate bool) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if isUpdate == true {
			res[resarr[i]] = resarr[i+1]
		} else if i+1 < len(resarr) {
			switch ent {
			case "sensor", "group":
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "type",
					"parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "room_template":
				switch resarr[i] {
				case "id", "slug", "orientation", "separators",
					"tiles", "colors", "aisles", "sizeWDHm",
					"technicalArea", "reservedArea":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "obj_template":
				switch resarr[i] {
				case "id", "slug", "description", "category",
					"slots", "colors", "components", "sizeWDHmm",
					"fbxModel":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			default:
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			}
		}
		i += 2
	}
	res["attributes"] = attrs

	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

func auxGetNode(path string) string {
	stk := cmd.StrToStack(path)
	nd := cmd.FindNodeInTree(&cmd.State.TreeHierarchy, stk)
	if nd != nil {
		return cmd.EntityToString((*nd).Entity)
	} else {
		println("Error while finding object in path")
	}
	return ""
}

func genNodeFromCommonRes(x node) node {
	val := x.execute()
	switch val.(type) {
	case string:
		return &strNode{STR, val.(string)}

	case []map[string]interface{}:
		return &jsonObjArrNode{JSONND,
			len(val.([]map[string]interface{})), val.([]map[string]interface{})}
	}
	return nil
}

func resolveReference(ref string) string {
	/*Probably code to reference SymbolTable and return data*/
	idx := dynamicMap[ref]
	item := dynamicSymbolTable[idx]
	switch item.(type) {
	case bool:
		dCatchNodePtr = &boolNode{BOOL, item.(bool)}
		if item.(bool) == false {
			return "false"
		} else {
			return "true"
		}
	case string:
		dCatchNodePtr = &strNode{STR, item.(string)}
		return item.(string)
	case int:
		dCatchNodePtr = &numNode{NUM, item.(int)}
		return strconv.Itoa(item.(int))
	/*case map[string]interface{}:
	  //dCatchNodePtr=&symbolReferenceNode{REFERENCE, }
	  return item.(map[string]interface{})[subIdx].(string)*/
	case *commonNode:
		dCatchNodePtr = item
		args := ""
		for i := range item.(*commonNode).args {
			args += item.(*commonNode).args[i].(string)
		}
		return item.(*commonNode).val + " " + args
	default:
		println("Unable to deref your variable ")
		return ""
	}
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57447
	yyEofCode      = 57344
	TOK_AC         = 57357
	TOK_AISLE      = 57360
	TOK_AND        = 57427
	TOK_ATTRSPEC   = 57404
	TOK_BASHTYPE   = 57373
	TOK_BLDG       = 57350
	TOK_BOOL       = 57367
	TOK_CABINET    = 57358
	TOK_CD         = 57379
	TOK_CLR        = 57381
	TOK_CMDFLAG    = 57375
	TOK_CMDS       = 57413
	TOK_COL        = 57407
	TOK_COMMA      = 57411
	TOK_CORIDOR    = 57354
	TOK_CREATE     = 57368
	TOK_DELETE     = 57371
	TOK_DEREF      = 57416
	TOK_DEVICE     = 57353
	TOK_DIV        = 57432
	TOK_DO         = 57442
	TOK_DOC        = 57378
	TOK_DONE       = 57438
	TOK_DOT        = 57412
	TOK_ELIF       = 57441
	TOK_ELSE       = 57421
	TOK_EQUAL      = 57374
	TOK_EXIT       = 57377
	TOK_FI         = 57437
	TOK_FOR        = 57419
	TOK_GET        = 57369
	TOK_GREATER    = 57434
	TOK_GREP       = 57382
	TOK_GROUP      = 57355
	TOK_IF         = 57418
	TOK_IN         = 57428
	TOK_LBLOCK     = 57422
	TOK_LBRAC      = 57409
	TOK_LEN        = 57443
	TOK_LESS       = 57435
	TOK_LPAREN     = 57424
	TOK_LS         = 57383
	TOK_LSAC       = 57393
	TOK_LSAISLE    = 57389
	TOK_LSBLDG     = 57388
	TOK_LSCAB      = 57391
	TOK_LSCORRIDOR = 57396
	TOK_LSDEV      = 57399
	TOK_LSOG       = 57385
	TOK_LSPANEL    = 57394
	TOK_LSRACK     = 57398
	TOK_LSROOM     = 57397
	TOK_LSSENSOR   = 57392
	TOK_LSSITE     = 57387
	TOK_LSTEN      = 57386
	TOK_LSTILE     = 57390
	TOK_LSWALL     = 57395
	TOK_MOD        = 57439
	TOK_MULT       = 57433
	TOK_NOT        = 57431
	TOK_NUM        = 57346
	TOK_OBJ_TMPL   = 57364
	TOK_OCBLDG     = 57400
	TOK_OCCORIDOR  = 57446
	TOK_OCDEL      = 57366
	TOK_OCDEV      = 57401
	TOK_OCGROUP    = 57444
	TOK_OCRACK     = 57402
	TOK_OCROOM     = 57403
	TOK_OCSITE     = 57405
	TOK_OCTENANT   = 57406
	TOK_OCWALL     = 57445
	TOK_OR         = 57426
	TOK_PANEL      = 57359
	TOK_PLUS       = 57365
	TOK_PRNT       = 57429
	TOK_PWD        = 57380
	TOK_QUOT       = 57430
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57423
	TOK_RBRAC      = 57410
	TOK_ROOM       = 57351
	TOK_ROOM_TMPL  = 57363
	TOK_RPAREN     = 57425
	TOK_SEARCH     = 57372
	TOK_SELECT     = 57408
	TOK_SEMICOL    = 57417
	TOK_SENSOR     = 57362
	TOK_SITE       = 57349
	TOK_SLASH      = 57376
	TOK_TEMPLATE   = 57414
	TOK_TENANT     = 57348
	TOK_THEN       = 57436
	TOK_TILE       = 57361
	TOK_TREE       = 57384
	TOK_UNSET      = 57440
	TOK_UPDATE     = 57370
	TOK_VAR        = 57415
	TOK_WALL       = 57356
	TOK_WHILE      = 57420
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -228
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57425: 0,   // TOK_RPAREN (248x)
		57438: 1,   // TOK_DONE (245x)
		57421: 2,   // TOK_ELSE (239x)
		57410: 3,   // TOK_RBRAC (239x)
		57417: 4,   // TOK_SEMICOL (238x)
		57441: 5,   // TOK_ELIF (237x)
		57437: 6,   // TOK_FI (237x)
		57344: 7,   // $end (236x)
		57347: 8,   // TOK_WORD (217x)
		57366: 9,   // TOK_OCDEL (207x)
		57416: 10,  // TOK_DEREF (178x)
		57346: 11,  // TOK_NUM (118x)
		57365: 12,  // TOK_PLUS (114x)
		57367: 13,  // TOK_BOOL (102x)
		57412: 14,  // TOK_DOT (84x)
		57404: 15,  // TOK_ATTRSPEC (77x)
		57376: 16,  // TOK_SLASH (76x)
		57407: 17,  // TOK_COL (71x)
		57430: 18,  // TOK_QUOT (70x)
		57431: 19,  // TOK_NOT (64x)
		57476: 20,  // P1 (60x)
		57374: 21,  // TOK_EQUAL (59x)
		57475: 22,  // P (57x)
		57426: 23,  // TOK_OR (49x)
		57481: 24,  // WORDORNUM (48x)
		57424: 25,  // TOK_LPAREN (39x)
		57423: 26,  // TOK_RBLOCK (36x)
		57427: 27,  // TOK_AND (35x)
		57482: 28,  // factor (32x)
		57443: 29,  // TOK_LEN (32x)
		57488: 30,  // unary (31x)
		57487: 31,  // term (25x)
		57434: 32,  // TOK_GREATER (24x)
		57435: 33,  // TOK_LESS (24x)
		57483: 34,  // nex (23x)
		57432: 35,  // TOK_DIV (23x)
		57439: 36,  // TOK_MOD (23x)
		57433: 37,  // TOK_MULT (23x)
		57478: 38,  // REL (19x)
		57453: 39,  // EQAL (17x)
		57379: 40,  // TOK_CD (17x)
		57383: 41,  // TOK_LS (17x)
		57388: 42,  // TOK_LSBLDG (17x)
		57399: 43,  // TOK_LSDEV (17x)
		57385: 44,  // TOK_LSOG (17x)
		57398: 45,  // TOK_LSRACK (17x)
		57397: 46,  // TOK_LSROOM (17x)
		57387: 47,  // TOK_LSSITE (17x)
		57386: 48,  // TOK_LSTEN (17x)
		57429: 49,  // TOK_PRNT (17x)
		57380: 50,  // TOK_PWD (17x)
		57384: 51,  // TOK_TREE (17x)
		57440: 52,  // TOK_UNSET (17x)
		57448: 53,  // BASH (16x)
		57458: 54,  // JOIN (16x)
		57477: 55,  // Q (16x)
		57381: 56,  // TOK_CLR (16x)
		57368: 57,  // TOK_CREATE (16x)
		57371: 58,  // TOK_DELETE (16x)
		57378: 59,  // TOK_DOC (16x)
		57377: 60,  // TOK_EXIT (16x)
		57369: 61,  // TOK_GET (16x)
		57382: 62,  // TOK_GREP (16x)
		57393: 63,  // TOK_LSAC (16x)
		57389: 64,  // TOK_LSAISLE (16x)
		57391: 65,  // TOK_LSCAB (16x)
		57396: 66,  // TOK_LSCORRIDOR (16x)
		57394: 67,  // TOK_LSPANEL (16x)
		57392: 68,  // TOK_LSSENSOR (16x)
		57390: 69,  // TOK_LSTILE (16x)
		57395: 70,  // TOK_LSWALL (16x)
		57370: 71,  // TOK_UPDATE (16x)
		57454: 72,  // EXPR (15x)
		57459: 73,  // K (15x)
		57462: 74,  // NT_CREATE (15x)
		57463: 75,  // NT_DEL (15x)
		57464: 76,  // NT_GET (15x)
		57465: 77,  // NT_UPDATE (15x)
		57408: 78,  // TOK_SELECT (15x)
		57466: 79,  // OCCHOOSE (14x)
		57468: 80,  // OCDEL (14x)
		57470: 81,  // OCGET (14x)
		57472: 82,  // OCSEL (14x)
		57473: 83,  // OCUPDATE (14x)
		57456: 84,  // FUNC (13x)
		57469: 85,  // OCDOT (13x)
		57471: 86,  // OCLISYNTX (13x)
		57486: 87,  // stmnt (13x)
		57419: 88,  // TOK_FOR (13x)
		57418: 89,  // TOK_IF (13x)
		57420: 90,  // TOK_WHILE (13x)
		57450: 91,  // CTRL (12x)
		57474: 92,  // OPEN_STMT (12x)
		57484: 93,  // st2 (12x)
		57422: 94,  // TOK_LBLOCK (7x)
		57455: 95,  // F (6x)
		57479: 96,  // STRARG (5x)
		57350: 97,  // TOK_BLDG (5x)
		57354: 98,  // TOK_CORIDOR (5x)
		57353: 99,  // TOK_DEVICE (5x)
		57355: 100, // TOK_GROUP (5x)
		57352: 101, // TOK_RACK (5x)
		57351: 102, // TOK_ROOM (5x)
		57349: 103, // TOK_SITE (5x)
		57348: 104, // TOK_TENANT (5x)
		57449: 105, // CDORFG (3x)
		57451: 106, // E (3x)
		57357: 107, // TOK_AC (3x)
		57360: 108, // TOK_AISLE (3x)
		57358: 109, // TOK_CABINET (3x)
		57413: 110, // TOK_CMDS (3x)
		57409: 111, // TOK_LBRAC (3x)
		57364: 112, // TOK_OBJ_TMPL (3x)
		57359: 113, // TOK_PANEL (3x)
		57363: 114, // TOK_ROOM_TMPL (3x)
		57362: 115, // TOK_SENSOR (3x)
		57361: 116, // TOK_TILE (3x)
		57480: 117, // WNARG (3x)
		57452: 118, // EIF (2x)
		57457: 119, // GETOBJS (2x)
		57460: 120, // NODEACC (2x)
		57461: 121, // NODEGETTER (2x)
		57467: 122, // OCCR (2x)
		57442: 123, // TOK_DO (2x)
		57400: 124, // TOK_OCBLDG (2x)
		57446: 125, // TOK_OCCORIDOR (2x)
		57401: 126, // TOK_OCDEV (2x)
		57444: 127, // TOK_OCGROUP (2x)
		57402: 128, // TOK_OCRACK (2x)
		57403: 129, // TOK_OCROOM (2x)
		57405: 130, // TOK_OCSITE (2x)
		57406: 131, // TOK_OCTENANT (2x)
		57445: 132, // TOK_OCWALL (2x)
		57414: 133, // TOK_TEMPLATE (2x)
		57436: 134, // TOK_THEN (2x)
		57415: 135, // TOK_VAR (2x)
		57356: 136, // TOK_WALL (2x)
		57485: 137, // start (1x)
		57411: 138, // TOK_COMMA (1x)
		57428: 139, // TOK_IN (1x)
		57447: 140, // $default (0x)
		57345: 141, // error (0x)
		57373: 142, // TOK_BASHTYPE (0x)
		57375: 143, // TOK_CMDFLAG (0x)
		57372: 144, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_RPAREN",
		"TOK_DONE",
		"TOK_ELSE",
		"TOK_RBRAC",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"$end",
		"TOK_WORD",
		"TOK_OCDEL",
		"TOK_DEREF",
		"TOK_NUM",
		"TOK_PLUS",
		"TOK_BOOL",
		"TOK_DOT",
		"TOK_ATTRSPEC",
		"TOK_SLASH",
		"TOK_COL",
		"TOK_QUOT",
		"TOK_NOT",
		"P1",
		"TOK_EQUAL",
		"P",
		"TOK_OR",
		"WORDORNUM",
		"TOK_LPAREN",
		"TOK_RBLOCK",
		"TOK_AND",
		"factor",
		"TOK_LEN",
		"unary",
		"term",
		"TOK_GREATER",
		"TOK_LESS",
		"nex",
		"TOK_DIV",
		"TOK_MOD",
		"TOK_MULT",
		"REL",
		"EQAL",
		"TOK_CD",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_TREE",
		"TOK_UNSET",
		"BASH",
		"JOIN",
		"Q",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_LSAC",
		"TOK_LSAISLE",
		"TOK_LSCAB",
		"TOK_LSCORRIDOR",
		"TOK_LSPANEL",
		"TOK_LSSENSOR",
		"TOK_LSTILE",
		"TOK_LSWALL",
		"TOK_UPDATE",
		"EXPR",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"TOK_SELECT",
		"OCCHOOSE",
		"OCDEL",
		"OCGET",
		"OCSEL",
		"OCUPDATE",
		"FUNC",
		"OCDOT",
		"OCLISYNTX",
		"stmnt",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"TOK_LBLOCK",
		"F",
		"STRARG",
		"TOK_BLDG",
		"TOK_CORIDOR",
		"TOK_DEVICE",
		"TOK_GROUP",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"CDORFG",
		"E",
		"TOK_AC",
		"TOK_AISLE",
		"TOK_CABINET",
		"TOK_CMDS",
		"TOK_LBRAC",
		"TOK_OBJ_TMPL",
		"TOK_PANEL",
		"TOK_ROOM_TMPL",
		"TOK_SENSOR",
		"TOK_TILE",
		"WNARG",
		"EIF",
		"GETOBJS",
		"NODEACC",
		"NODEGETTER",
		"OCCR",
		"TOK_DO",
		"TOK_OCBLDG",
		"TOK_OCCORIDOR",
		"TOK_OCDEV",
		"TOK_OCGROUP",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_OCWALL",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"TOK_WALL",
		"start",
		"TOK_COMMA",
		"TOK_IN",
		"$default",
		"error",
		"TOK_BASHTYPE",
		"TOK_CMDFLAG",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {137, 1},
		2:   {93, 1},
		3:   {93, 3},
		4:   {93, 1},
		5:   {87, 1},
		6:   {87, 1},
		7:   {87, 1},
		8:   {87, 1},
		9:   {87, 0},
		10:  {91, 1},
		11:  {92, 7},
		12:  {92, 10},
		13:  {92, 6},
		14:  {92, 15},
		15:  {92, 7},
		16:  {92, 12},
		17:  {92, 10},
		18:  {92, 10},
		19:  {118, 7},
		20:  {118, 0},
		21:  {72, 3},
		22:  {72, 1},
		23:  {54, 3},
		24:  {54, 1},
		25:  {39, 4},
		26:  {39, 4},
		27:  {39, 1},
		28:  {38, 3},
		29:  {38, 4},
		30:  {38, 4},
		31:  {38, 3},
		32:  {38, 1},
		33:  {34, 3},
		34:  {34, 3},
		35:  {34, 1},
		36:  {31, 3},
		37:  {31, 3},
		38:  {31, 3},
		39:  {31, 1},
		40:  {30, 2},
		41:  {30, 2},
		42:  {30, 1},
		43:  {28, 3},
		44:  {28, 1},
		45:  {28, 2},
		46:  {28, 5},
		47:  {28, 4},
		48:  {28, 1},
		49:  {28, 3},
		50:  {28, 1},
		51:  {73, 1},
		52:  {73, 1},
		53:  {73, 1},
		54:  {73, 1},
		55:  {74, 5},
		56:  {76, 2},
		57:  {76, 3},
		58:  {77, 4},
		59:  {75, 2},
		60:  {106, 1},
		61:  {106, 1},
		62:  {106, 1},
		63:  {106, 1},
		64:  {106, 1},
		65:  {106, 1},
		66:  {106, 1},
		67:  {106, 1},
		68:  {106, 1},
		69:  {106, 1},
		70:  {106, 1},
		71:  {106, 1},
		72:  {106, 1},
		73:  {106, 1},
		74:  {106, 1},
		75:  {106, 1},
		76:  {24, 1},
		77:  {24, 1},
		78:  {24, 4},
		79:  {24, 4},
		80:  {24, 4},
		81:  {24, 4},
		82:  {24, 1},
		83:  {24, 2},
		84:  {95, 4},
		85:  {95, 3},
		86:  {95, 6},
		87:  {95, 5},
		88:  {95, 3},
		89:  {95, 4},
		90:  {22, 1},
		91:  {22, 2},
		92:  {20, 3},
		93:  {20, 1},
		94:  {20, 4},
		95:  {20, 3},
		96:  {20, 2},
		97:  {20, 1},
		98:  {20, 2},
		99:  {20, 0},
		100: {55, 2},
		101: {55, 2},
		102: {55, 2},
		103: {55, 2},
		104: {55, 2},
		105: {55, 2},
		106: {55, 2},
		107: {55, 2},
		108: {55, 2},
		109: {55, 2},
		110: {55, 2},
		111: {55, 2},
		112: {55, 2},
		113: {55, 2},
		114: {55, 2},
		115: {55, 2},
		116: {55, 2},
		117: {55, 3},
		118: {55, 4},
		119: {55, 1},
		120: {53, 1},
		121: {53, 1},
		122: {53, 4},
		123: {53, 1},
		124: {53, 1},
		125: {53, 1},
		126: {53, 1},
		127: {53, 2},
		128: {53, 2},
		129: {53, 2},
		130: {53, 2},
		131: {53, 2},
		132: {53, 2},
		133: {53, 2},
		134: {53, 2},
		135: {53, 2},
		136: {53, 2},
		137: {53, 2},
		138: {53, 2},
		139: {53, 2},
		140: {53, 2},
		141: {53, 2},
		142: {53, 2},
		143: {53, 2},
		144: {53, 2},
		145: {53, 2},
		146: {53, 2},
		147: {53, 2},
		148: {53, 2},
		149: {53, 2},
		150: {53, 2},
		151: {53, 3},
		152: {53, 3},
		153: {53, 3},
		154: {53, 2},
		155: {53, 2},
		156: {86, 2},
		157: {86, 1},
		158: {86, 1},
		159: {86, 1},
		160: {86, 1},
		161: {86, 1},
		162: {86, 1},
		163: {122, 5},
		164: {122, 5},
		165: {122, 5},
		166: {122, 5},
		167: {122, 7},
		168: {122, 7},
		169: {122, 7},
		170: {122, 7},
		171: {122, 7},
		172: {122, 7},
		173: {122, 7},
		174: {122, 7},
		175: {122, 11},
		176: {122, 11},
		177: {122, 6},
		178: {122, 6},
		179: {122, 9},
		180: {122, 9},
		181: {80, 2},
		182: {83, 5},
		183: {81, 2},
		184: {119, 3},
		185: {119, 1},
		186: {79, 4},
		187: {85, 8},
		188: {85, 9},
		189: {85, 9},
		190: {85, 10},
		191: {85, 9},
		192: {85, 9},
		193: {85, 9},
		194: {85, 9},
		195: {85, 9},
		196: {85, 6},
		197: {85, 4},
		198: {85, 4},
		199: {85, 6},
		200: {85, 6},
		201: {85, 2},
		202: {85, 5},
		203: {85, 7},
		204: {85, 8},
		205: {85, 4},
		206: {82, 1},
		207: {82, 5},
		208: {96, 2},
		209: {96, 0},
		210: {117, 2},
		211: {117, 4},
		212: {117, 0},
		213: {84, 6},
		214: {84, 1},
		215: {121, 2},
		216: {121, 0},
		217: {120, 1},
		218: {120, 1},
		219: {120, 4},
		220: {120, 4},
		221: {120, 4},
		222: {120, 4},
		223: {120, 1},
		224: {120, 2},
		225: {120, 5},
		226: {105, 3},
		227: {105, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [544][]uint16{
		// 0
		{4: 219, 7: 219, 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 230, 137: 229},
		{7: 228},
		{7: 227},
		{1: 226, 226, 226, 770, 226, 226, 226},
		{1: 224, 224, 224, 5: 224, 224, 224},
		// 5
		{223, 223, 223, 223, 223, 223, 223, 223},
		{222, 222, 222, 222, 222, 222, 222, 222},
		{221, 221, 221, 221, 221, 221, 221, 221},
		{220, 220, 220, 220, 220, 220, 220, 220},
		{1: 218, 218, 218, 5: 218, 218, 218},
		// 10
		{94: 753},
		{25: 748},
		{8: 708, 25: 707},
		{177, 177, 177, 177, 177, 177, 177, 177},
		{176, 176, 176, 176, 176, 176, 176, 176},
		// 15
		{175, 175, 175, 175, 175, 175, 175, 175},
		{174, 174, 174, 174, 174, 174, 174, 174},
		{97: 678, 688, 681, 689, 680, 679, 677, 676, 106: 703, 682, 685, 684, 112: 690, 683, 691, 687, 686},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 700, 97: 678, 688, 681, 689, 680, 679, 677, 676, 106: 701, 682, 685, 684, 112: 690, 683, 691, 687, 686},
		{8: 295, 297, 298, 14: 296, 16: 250, 129, 20: 249, 22: 671},
		// 20
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 670},
		{138, 138, 138, 138, 138, 138, 138, 138, 11: 138, 15: 138, 17: 138},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 129, 14: 296, 129, 17: 129, 20: 669},
		{14, 14, 14, 14, 14, 14, 14, 14, 14: 311, 16: 310, 135, 25: 664},
		{14: 307, 110: 615, 133: 616, 135: 614},
		// 25
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 131, 20: 249, 22: 613},
		{8: 602},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 601},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 600},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 599},
		// 30
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 598},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 597},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 596},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 595},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 594},
		// 35
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 593},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 592},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 591},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 590},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 589},
		// 40
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 588},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 587},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 586},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 129, 14: 296, 16: 250, 20: 249, 22: 584},
		{9: 581},
		// 45
		{109, 109, 109, 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108},
		{107, 107, 107, 107, 107, 107, 107, 107},
		{18: 556},
		{105, 105, 105, 105, 105, 105, 105, 105},
		// 50
		{104, 104, 104, 104, 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 534, 549, 12: 551, 14: 550, 21: 552, 40: 529, 526, 545, 548, 542, 547, 546, 544, 543, 528, 527, 535, 539, 57: 530, 533, 61: 531, 71: 532, 78: 540, 88: 538, 536, 537, 110: 541},
		{97: 400, 408, 406, 410, 404, 402, 398, 396, 122: 394, 124: 399, 407, 405, 409, 403, 401, 397, 395, 411, 136: 412},
		{71, 71, 71, 71, 71, 71, 71, 71},
		// 55
		{70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68},
		{67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66},
		// 60
		{17: 314},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 299, 111: 300},
		{22, 22, 22, 22, 22, 22, 22, 22, 14: 291},
		{8: 292},
		{21: 293},
		// 65
		{8: 294},
		{21, 21, 21, 21, 21, 21, 21, 21},
		{135, 135, 135, 135, 135, 135, 135, 135, 11: 135, 14: 311, 135, 310, 135},
		{14: 307},
		{131, 131, 131, 131, 131, 131, 131, 131, 11: 131, 15: 131, 17: 131},
		// 70
		{8: 306},
		{45, 45, 45, 45, 45, 45, 45, 45},
		{8: 301, 119: 302},
		{3: 43, 138: 304},
		{3: 303},
		// 75
		{42, 42, 42, 42, 42, 42, 42, 42},
		{8: 301, 119: 305},
		{3: 44},
		{130, 130, 130, 130, 130, 130, 130, 130, 11: 130, 15: 130, 17: 130},
		{132, 132, 132, 132, 132, 132, 132, 132, 11: 132, 15: 132, 308, 132},
		// 80
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 129, 14: 296, 129, 17: 129, 20: 309},
		{134, 134, 134, 134, 134, 134, 134, 134, 11: 134, 15: 134, 17: 134},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 129, 14: 296, 129, 17: 129, 20: 313},
		{8: 312},
		{133, 133, 133, 133, 133, 133, 133, 133, 11: 133, 15: 133, 17: 133},
		// 85
		{136, 136, 136, 136, 136, 136, 136, 136, 11: 136, 15: 136, 17: 136},
		{8: 315},
		{21: 316},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 317},
		{46, 46, 46, 46, 46, 46, 46, 46, 23: 361},
		// 90
		{206, 206, 206, 206, 206, 206, 206, 206, 23: 206, 26: 206, 364},
		{204, 204, 204, 204, 204, 204, 204, 204, 19: 367, 21: 366, 23: 204, 26: 204, 204},
		{201, 201, 201, 201, 201, 201, 201, 201, 19: 201, 21: 201, 23: 201, 26: 201, 201},
		{196, 196, 196, 196, 196, 196, 196, 196, 9: 385, 12: 384, 19: 196, 21: 196, 23: 196, 26: 196, 196, 32: 383, 382},
		{193, 193, 193, 193, 193, 193, 193, 193, 9: 193, 12: 193, 19: 193, 21: 193, 23: 193, 26: 193, 193, 32: 193, 193, 35: 377, 378, 376},
		// 95
		{189, 189, 189, 189, 189, 189, 189, 189, 9: 189, 12: 189, 19: 189, 21: 189, 23: 189, 26: 189, 189, 32: 189, 189, 35: 189, 189, 189},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 375},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 374},
		{186, 186, 186, 186, 186, 186, 186, 186, 9: 186, 12: 186, 19: 186, 21: 186, 23: 186, 26: 186, 186, 32: 186, 186, 35: 186, 186, 186},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 372},
		// 100
		{184, 184, 184, 184, 184, 184, 184, 184, 9: 184, 12: 184, 19: 184, 21: 184, 23: 184, 26: 184, 184, 32: 184, 184, 35: 184, 184, 184},
		{8: 358},
		{25: 355},
		{180, 180, 180, 180, 180, 180, 180, 180, 9: 180, 12: 180, 19: 180, 21: 180, 23: 180, 26: 180, 180, 32: 180, 180, 35: 180, 180, 180},
		{8: 335, 338, 340, 336, 337, 339, 18: 19, 24: 341, 96: 334},
		// 105
		{178, 178, 178, 178, 178, 178, 178, 178, 9: 178, 12: 178, 19: 178, 21: 178, 23: 178, 26: 178, 178, 32: 178, 178, 35: 178, 178, 178},
		{18: 354},
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 15: 152, 18: 152},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 15: 151, 18: 151},
		{8: 349},
		// 110
		{8: 344},
		{146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 15: 146, 18: 146},
		{8: 343},
		{8: 335, 338, 340, 336, 337, 339, 18: 19, 24: 341, 96: 342},
		{18: 20},
		// 115
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 15: 145, 18: 145},
		{9: 345, 12: 346},
		{8: 348},
		{8: 347},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 15: 147, 18: 147},
		// 120
		{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 15: 148, 18: 148},
		{9: 351, 12: 350},
		{8: 353},
		{8: 352},
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 15: 149, 18: 149},
		// 125
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 15: 150, 18: 150},
		{179, 179, 179, 179, 179, 179, 179, 179, 9: 179, 12: 179, 19: 179, 21: 179, 23: 179, 26: 179, 179, 32: 179, 179, 35: 179, 179, 179},
		{8: 356},
		{357},
		{181, 181, 181, 181, 181, 181, 181, 181, 9: 181, 12: 181, 19: 181, 21: 181, 23: 181, 26: 181, 181, 32: 181, 181, 35: 181, 181, 181},
		// 130
		{183, 183, 183, 183, 183, 183, 183, 183, 9: 183, 12: 183, 19: 183, 21: 183, 23: 183, 26: 183, 183, 32: 183, 183, 35: 183, 183, 183, 94: 359},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 360},
		{23: 361, 26: 362},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 363},
		{182, 182, 182, 182, 182, 182, 182, 182, 9: 182, 12: 182, 19: 182, 21: 182, 23: 182, 26: 182, 182, 32: 182, 182, 35: 182, 182, 182},
		// 135
		{207, 207, 207, 207, 207, 207, 207, 207, 23: 207, 26: 207, 364},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 365},
		{205, 205, 205, 205, 205, 205, 205, 205, 19: 367, 21: 366, 23: 205, 26: 205, 205},
		{21: 370},
		{21: 368},
		// 140
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 369},
		{202, 202, 202, 202, 202, 202, 202, 202, 19: 202, 21: 202, 23: 202, 26: 202, 202},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 371},
		{203, 203, 203, 203, 203, 203, 203, 203, 19: 203, 21: 203, 23: 203, 26: 203, 203},
		{373, 23: 361},
		// 145
		{185, 185, 185, 185, 185, 185, 185, 185, 9: 185, 12: 185, 19: 185, 21: 185, 23: 185, 26: 185, 185, 32: 185, 185, 35: 185, 185, 185},
		{187, 187, 187, 187, 187, 187, 187, 187, 9: 187, 12: 187, 19: 187, 21: 187, 23: 187, 26: 187, 187, 32: 187, 187, 35: 187, 187, 187},
		{188, 188, 188, 188, 188, 188, 188, 188, 9: 188, 12: 188, 19: 188, 21: 188, 23: 188, 26: 188, 188, 32: 188, 188, 35: 188, 188, 188},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 381},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 380},
		// 150
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 379},
		{190, 190, 190, 190, 190, 190, 190, 190, 9: 190, 12: 190, 19: 190, 21: 190, 23: 190, 26: 190, 190, 32: 190, 190, 35: 190, 190, 190},
		{191, 191, 191, 191, 191, 191, 191, 191, 9: 191, 12: 191, 19: 191, 21: 191, 23: 191, 26: 191, 191, 32: 191, 191, 35: 191, 191, 191},
		{192, 192, 192, 192, 192, 192, 192, 192, 9: 192, 12: 192, 19: 192, 21: 192, 23: 192, 26: 192, 192, 32: 192, 192, 35: 192, 192, 192},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 21: 392, 25: 327, 28: 326, 330, 323, 322, 34: 391},
		// 155
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 21: 388, 25: 327, 28: 326, 330, 323, 322, 34: 389},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 387},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 386},
		{194, 194, 194, 194, 194, 194, 194, 194, 9: 194, 12: 194, 19: 194, 21: 194, 23: 194, 26: 194, 194, 32: 194, 194, 35: 377, 378, 376},
		{195, 195, 195, 195, 195, 195, 195, 195, 9: 195, 12: 195, 19: 195, 21: 195, 23: 195, 26: 195, 195, 32: 195, 195, 35: 377, 378, 376},
		// 160
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 390},
		{197, 197, 197, 197, 197, 197, 197, 197, 9: 385, 12: 384, 19: 197, 21: 197, 23: 197, 26: 197, 197},
		{198, 198, 198, 198, 198, 198, 198, 198, 9: 385, 12: 384, 19: 198, 21: 198, 23: 198, 26: 198, 198},
		{200, 200, 200, 200, 200, 200, 200, 200, 9: 385, 12: 384, 19: 200, 21: 200, 23: 200, 26: 200, 200},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 393},
		// 165
		{199, 199, 199, 199, 199, 199, 199, 199, 9: 385, 12: 384, 19: 199, 21: 199, 23: 199, 26: 199, 199},
		{72, 72, 72, 72, 72, 72, 72, 72},
		{17: 522},
		{17: 518},
		{17: 514},
		// 170
		{17: 510},
		{17: 504},
		{17: 498},
		{17: 492},
		{17: 486},
		// 175
		{17: 480},
		{17: 474},
		{17: 468},
		{17: 462},
		{17: 452},
		// 180
		{17: 442},
		{17: 437},
		{17: 429},
		{17: 421},
		{17: 413},
		// 185
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 414},
		{15: 415},
		{8: 335, 338, 340, 336, 337, 339, 24: 416},
		{15: 417},
		{8: 335, 338, 340, 336, 337, 339, 24: 418},
		// 190
		{15: 419},
		{8: 335, 338, 340, 336, 337, 339, 24: 420},
		{48, 48, 48, 48, 48, 48, 48, 48},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 422},
		{15: 423},
		// 195
		{8: 335, 338, 340, 336, 337, 339, 24: 424},
		{15: 425},
		{8: 335, 338, 340, 336, 337, 339, 24: 426},
		{15: 427},
		{8: 335, 338, 340, 336, 337, 339, 24: 428},
		// 200
		{49, 49, 49, 49, 49, 49, 49, 49},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 430},
		{15: 431},
		{8: 335, 338, 340, 336, 337, 339, 24: 432},
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 434, 105: 433},
		// 205
		{50, 50, 50, 50, 50, 50, 50, 50},
		{8: 335, 338, 340, 336, 337, 339, 24: 435},
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 434, 105: 436},
		{2, 2, 2, 2, 2, 2, 2, 2},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 438},
		// 210
		{15: 439},
		{8: 335, 338, 340, 336, 337, 339, 24: 440},
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 434, 105: 441},
		{51, 51, 51, 51, 51, 51, 51, 51},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 443},
		// 215
		{15: 444},
		{8: 335, 338, 340, 336, 337, 339, 24: 445},
		{15: 446},
		{8: 335, 338, 340, 336, 337, 339, 24: 447},
		{15: 448},
		// 220
		{8: 335, 338, 340, 336, 337, 339, 24: 449},
		{15: 450},
		{8: 335, 338, 340, 336, 337, 339, 24: 451},
		{52, 52, 52, 52, 52, 52, 52, 52},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 453},
		// 225
		{15: 454},
		{8: 335, 338, 340, 336, 337, 339, 24: 455},
		{15: 456},
		{8: 335, 338, 340, 336, 337, 339, 24: 457},
		{15: 458},
		// 230
		{8: 335, 338, 340, 336, 337, 339, 24: 459},
		{15: 460},
		{8: 335, 338, 340, 336, 337, 339, 24: 461},
		{53, 53, 53, 53, 53, 53, 53, 53},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 463},
		// 235
		{15: 464},
		{8: 335, 338, 340, 336, 337, 339, 24: 465},
		{15: 466},
		{8: 335, 338, 340, 336, 337, 339, 24: 467},
		{54, 54, 54, 54, 54, 54, 54, 54},
		// 240
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 469},
		{15: 470},
		{8: 335, 338, 340, 336, 337, 339, 24: 471},
		{15: 472},
		{8: 335, 338, 340, 336, 337, 339, 24: 473},
		// 245
		{55, 55, 55, 55, 55, 55, 55, 55},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 475},
		{15: 476},
		{8: 335, 338, 340, 336, 337, 339, 24: 477},
		{15: 478},
		// 250
		{8: 335, 338, 340, 336, 337, 339, 24: 479},
		{56, 56, 56, 56, 56, 56, 56, 56},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 481},
		{15: 482},
		{8: 335, 338, 340, 336, 337, 339, 24: 483},
		// 255
		{15: 484},
		{8: 335, 338, 340, 336, 337, 339, 24: 485},
		{57, 57, 57, 57, 57, 57, 57, 57},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 487},
		{15: 488},
		// 260
		{8: 335, 338, 340, 336, 337, 339, 24: 489},
		{15: 490},
		{8: 335, 338, 340, 336, 337, 339, 24: 491},
		{58, 58, 58, 58, 58, 58, 58, 58},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 493},
		// 265
		{15: 494},
		{8: 335, 338, 340, 336, 337, 339, 24: 495},
		{15: 496},
		{8: 335, 338, 340, 336, 337, 339, 24: 497},
		{59, 59, 59, 59, 59, 59, 59, 59},
		// 270
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 499},
		{15: 500},
		{8: 335, 338, 340, 336, 337, 339, 24: 501},
		{15: 502},
		{8: 335, 338, 340, 336, 337, 339, 24: 503},
		// 275
		{60, 60, 60, 60, 60, 60, 60, 60},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 505},
		{15: 506},
		{8: 335, 338, 340, 336, 337, 339, 24: 507},
		{15: 508},
		// 280
		{8: 335, 338, 340, 336, 337, 339, 24: 509},
		{61, 61, 61, 61, 61, 61, 61, 61},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 511},
		{15: 512},
		{8: 335, 338, 340, 336, 337, 339, 24: 513},
		// 285
		{62, 62, 62, 62, 62, 62, 62, 62},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 515},
		{15: 516},
		{8: 335, 338, 340, 336, 337, 339, 24: 517},
		{63, 63, 63, 63, 63, 63, 63, 63},
		// 290
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 519},
		{15: 520},
		{8: 335, 338, 340, 336, 337, 339, 24: 521},
		{64, 64, 64, 64, 64, 64, 64, 64},
		{8: 295, 297, 298, 14: 296, 129, 250, 20: 249, 22: 523},
		// 295
		{15: 524},
		{8: 335, 338, 340, 336, 337, 339, 24: 525},
		{65, 65, 65, 65, 65, 65, 65, 65},
		{101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100},
		// 300
		{99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95},
		// 305
		{94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91},
		{90, 90, 90, 90, 90, 90, 90, 90},
		// 310
		{89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 85, 85, 85},
		// 315
		{84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 80, 80, 80, 80, 80},
		// 320
		{79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 78, 78, 78, 78, 78, 78},
		{110: 554, 133: 553, 135: 555},
		{74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 73, 73, 73, 73, 73},
		// 325
		{77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 75, 75, 75, 75, 75},
		{8: 559, 562, 564, 560, 561, 563, 18: 12, 120: 558, 557},
		{18: 580},
		// 330
		{8: 559, 562, 564, 560, 561, 563, 18: 12, 120: 558, 579},
		{8: 11, 11, 11, 11, 11, 11, 18: 11},
		{8: 10, 10, 10, 10, 10, 10, 18: 10},
		{8: 574},
		{8: 569},
		// 335
		{8: 5, 5, 5, 5, 5, 5, 18: 5},
		{8: 565},
		{8: 4, 4, 4, 4, 4, 4, 18: 4, 94: 566},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 567},
		{23: 361, 26: 568},
		// 340
		{8: 3, 3, 3, 3, 3, 3, 18: 3},
		{9: 570, 12: 571},
		{8: 573},
		{8: 572},
		{8: 6, 6, 6, 6, 6, 6, 18: 6},
		// 345
		{8: 7, 7, 7, 7, 7, 7, 18: 7},
		{9: 576, 12: 575},
		{8: 578},
		{8: 577},
		{8: 8, 8, 8, 8, 8, 8, 18: 8},
		// 350
		{8: 9, 9, 9, 9, 9, 9, 18: 9},
		{18: 13},
		{106, 106, 106, 106, 106, 106, 106, 106},
		{8: 582},
		{8: 583},
		// 355
		{110, 110, 110, 110, 110, 110, 110, 110},
		{112, 112, 112, 112, 112, 112, 112, 112, 11: 585},
		{111, 111, 111, 111, 111, 111, 111, 111},
		{113, 113, 113, 113, 113, 113, 113, 113},
		{114, 114, 114, 114, 114, 114, 114, 114},
		// 360
		{115, 115, 115, 115, 115, 115, 115, 115},
		{116, 116, 116, 116, 116, 116, 116, 116},
		{117, 117, 117, 117, 117, 117, 117, 117},
		{118, 118, 118, 118, 118, 118, 118, 118},
		{119, 119, 119, 119, 119, 119, 119, 119},
		// 365
		{120, 120, 120, 120, 120, 120, 120, 120},
		{121, 121, 121, 121, 121, 121, 121, 121},
		{122, 122, 122, 122, 122, 122, 122, 122},
		{123, 123, 123, 123, 123, 123, 123, 123},
		{124, 124, 124, 124, 124, 124, 124, 124},
		// 370
		{125, 125, 125, 125, 125, 125, 125, 125},
		{126, 126, 126, 126, 126, 126, 126, 126},
		{127, 127, 127, 127, 127, 127, 127, 127},
		{128, 128, 128, 128, 128, 128, 128, 128},
		{27, 27, 27, 27, 27, 27, 27, 27, 17: 130, 21: 604, 94: 603},
		// 375
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 606},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 605},
		{23, 23, 23, 23, 23, 23, 23, 23, 23: 361},
		{23: 361, 26: 607},
		{26, 26, 26, 26, 26, 26, 26, 26, 21: 608, 94: 609},
		// 380
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 612},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 610},
		{23: 361, 26: 611},
		{24, 24, 24, 24, 24, 24, 24, 24},
		{25, 25, 25, 25, 25, 25, 25, 25, 23: 361},
		// 385
		{47, 47, 47, 47, 47, 47, 47, 47},
		{17: 621},
		{17: 619},
		{17: 617},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 618},
		// 390
		{30, 30, 30, 30, 30, 30, 30, 30},
		{129, 129, 129, 129, 129, 129, 129, 129, 295, 297, 298, 14: 296, 16: 250, 20: 249, 22: 620},
		{31, 31, 31, 31, 31, 31, 31, 31},
		{8: 622},
		{21: 623},
		// 395
		{8: 331, 325, 626, 328, 13: 333, 18: 332, 324, 25: 625, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 318, 627, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 624, 628, 241, 244, 242, 243},
		{32, 32, 32, 32, 32, 32, 32, 32, 23: 361},
		{16, 8: 650, 647, 649, 648, 337, 652, 18: 651, 324, 24: 654, 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 372, 117: 653},
		{8: 358, 25: 629},
		{29, 29, 29, 29, 29, 29, 29, 29},
		// 400
		{28, 28, 28, 28, 28, 28, 28, 28},
		{8: 295, 253, 298, 12: 632, 14: 296, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 631, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 630, 241, 244, 242, 243, 290, 636, 633, 635, 637, 634},
		{646},
		{645},
		{97: 400, 408, 406, 410, 404, 402, 398, 396, 122: 643, 124: 399, 407, 405, 409, 403, 401, 397, 395, 411, 136: 412},
		// 405
		{642},
		{641},
		{640},
		{639},
		{638},
		// 410
		{33, 33, 33, 33, 33, 33, 33, 33},
		{34, 34, 34, 34, 34, 34, 34, 34},
		{35, 35, 35, 35, 35, 35, 35, 35},
		{36, 36, 36, 36, 36, 36, 36, 36},
		{37, 37, 37, 37, 37, 37, 37, 37},
		// 415
		{644},
		{38, 38, 38, 38, 38, 38, 38, 38},
		{39, 39, 39, 39, 39, 39, 39, 39},
		{40, 40, 40, 40, 40, 40, 40, 40},
		{8: 663, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 374},
		// 420
		{184, 8: 151, 184, 151, 151, 184, 151, 18: 151, 184, 21: 184, 23: 184, 27: 184, 32: 184, 184, 35: 184, 184, 184},
		{8: 662},
		{180, 8: 152, 180, 152, 152, 180, 152, 18: 152, 180, 21: 180, 23: 180, 27: 180, 32: 180, 180, 35: 180, 180, 180},
		{8: 335, 338, 340, 336, 337, 339, 18: 19, 24: 661, 96: 334},
		{178, 8: 146, 178, 146, 146, 178, 146, 18: 146, 178, 21: 178, 23: 178, 27: 178, 32: 178, 178, 35: 178, 178, 178},
		// 425
		{660},
		{16, 8: 335, 338, 340, 336, 337, 339, 18: 656, 24: 654, 117: 655},
		{18},
		{8: 335, 338, 340, 336, 337, 339, 24: 657},
		{18: 658},
		// 430
		{16, 8: 335, 338, 340, 336, 337, 339, 18: 656, 24: 654, 117: 659},
		{17},
		{41, 41, 41, 41, 41, 41, 41, 41},
		{8: 335, 338, 340, 336, 337, 339, 18: 658, 24: 341, 96: 342},
		{183, 8: 145, 183, 145, 145, 183, 145, 18: 145, 183, 21: 183, 23: 183, 27: 183, 32: 183, 183, 35: 183, 183, 183, 94: 359},
		// 435
		{180, 9: 345, 12: 346, 19: 180, 21: 180, 23: 180, 27: 180, 32: 180, 180, 35: 180, 180, 180},
		{665},
		{111: 666},
		{3: 219, 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 667},
		{3: 668},
		// 440
		{15, 15, 15, 15, 15, 15, 15, 15},
		{137, 137, 137, 137, 137, 137, 137, 137, 11: 137, 15: 137, 17: 137},
		{169, 169, 169, 169, 169, 169, 169, 169},
		{17: 672},
		{8: 674, 95: 673},
		// 445
		{170, 170, 170, 170, 170, 170, 170, 170},
		{21: 675},
		{8: 335, 338, 340, 336, 337, 339, 18: 693, 24: 692, 97: 678, 688, 681, 689, 680, 679, 677, 676, 106: 694, 682, 685, 684, 112: 690, 683, 691, 687, 686},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 14: 168, 16: 168, 168},
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 14: 167, 16: 167, 167},
		// 450
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 14: 166, 16: 166, 166},
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 14: 165, 16: 165, 165},
		{164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 14: 164, 16: 164, 164},
		{163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 14: 163, 16: 163, 163},
		{162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 14: 162, 16: 162, 162},
		// 455
		{161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 14: 161, 16: 161, 161},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 14: 160, 16: 160, 160},
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 14: 159, 16: 159, 159},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 14: 158, 16: 158, 158},
		{157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 14: 157, 16: 157, 157},
		// 460
		{156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 14: 156, 16: 156, 156},
		{155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 14: 155, 16: 155, 155},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 14: 154, 16: 154, 154},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 14: 153, 16: 153, 153},
		{143, 143, 143, 143, 143, 143, 143, 143, 674, 95: 699},
		// 465
		{8: 335, 338, 340, 336, 337, 339, 18: 19, 24: 341, 96: 696},
		{140, 140, 140, 140, 140, 140, 140, 140, 674, 95: 695},
		{139, 139, 139, 139, 139, 139, 139, 139},
		{18: 697},
		{141, 141, 141, 141, 141, 141, 141, 141, 674, 95: 698},
		// 470
		{142, 142, 142, 142, 142, 142, 142, 142},
		{144, 144, 144, 144, 144, 144, 144, 144},
		{172, 172, 172, 172, 172, 172, 172, 172},
		{8: 674, 95: 702},
		{171, 171, 171, 171, 171, 171, 171, 171},
		// 475
		{8: 295, 297, 298, 14: 296, 16: 250, 129, 20: 249, 22: 704},
		{17: 705},
		{8: 674, 95: 706},
		{173, 173, 173, 173, 173, 173, 173, 173},
		{25: 735},
		// 480
		{139: 709},
		{8: 331, 325, 712, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 710, 111: 711},
		{4: 732, 23: 361},
		{11: 724},
		{8: 358, 25: 713},
		// 485
		{8: 331, 10: 329, 328, 13: 333, 18: 332, 25: 327, 28: 715, 330, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 714, 274, 59: 280, 279, 62: 275, 265, 263, 268, 269, 266, 270, 264, 267},
		{720},
		{716},
		{123: 717},
		{1: 219, 4: 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 718},
		// 490
		{1: 719},
		{1: 210, 210, 210, 5: 210, 210, 210},
		{123: 721},
		{1: 219, 4: 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 722},
		{1: 723},
		// 495
		{1: 211, 211, 211, 5: 211, 211, 211},
		{14: 725},
		{14: 726},
		{11: 727},
		{3: 728},
		// 500
		{4: 729},
		{1: 219, 4: 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 730},
		{1: 731},
		{1: 212, 212, 212, 5: 212, 212, 212},
		{1: 219, 4: 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 733},
		// 505
		{1: 734},
		{1: 213, 213, 213, 5: 213, 213, 213},
		{8: 736},
		{21: 737},
		{8: 335, 338, 340, 336, 337, 339, 24: 738},
		// 510
		{4: 739},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 740},
		{4: 741, 23: 361},
		{219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 742},
		{743},
		// 515
		{744},
		{4: 745},
		{1: 219, 4: 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 746},
		{1: 747},
		{1: 214, 214, 214, 5: 214, 214, 214},
		// 520
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 749},
		{750, 23: 361},
		{1: 219, 4: 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 751},
		{1: 752},
		{1: 215, 215, 215, 5: 215, 215, 215},
		// 525
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 754},
		{23: 361, 26: 755},
		{134: 756},
		{2: 219, 4: 219, 219, 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 757},
		{2: 208, 5: 760, 758, 118: 759},
		// 530
		{1: 217, 217, 217, 5: 217, 217, 217},
		{2: 767},
		{94: 761},
		{8: 331, 325, 329, 328, 13: 333, 18: 332, 324, 25: 327, 28: 326, 330, 323, 322, 34: 321, 38: 320, 319, 54: 318, 72: 762},
		{23: 361, 26: 763},
		// 535
		{134: 764},
		{2: 219, 4: 219, 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 765},
		{2: 208, 5: 760, 118: 766},
		{2: 209},
		{4: 219, 6: 219, 8: 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 768},
		// 540
		{6: 769},
		{1: 216, 216, 216, 5: 216, 216, 216},
		{1: 219, 219, 219, 219, 219, 219, 219, 251, 253, 254, 12: 281, 14: 252, 16: 250, 129, 20: 249, 289, 288, 40: 255, 256, 259, 262, 277, 261, 260, 258, 257, 276, 278, 271, 272, 273, 55: 234, 274, 245, 248, 280, 279, 246, 275, 265, 263, 268, 269, 266, 270, 264, 267, 247, 73: 233, 241, 244, 242, 243, 290, 285, 282, 284, 287, 283, 236, 286, 235, 231, 240, 238, 239, 232, 237, 771},
		{1: 225, 225, 225, 5: 225, 225, 225},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 141

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}, nil}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}, nil}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			arrNd := yyS[yypt-4].node
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 18:
		{
			arrNd := yyS[yypt-4].node
			//This NonTerminal is broken, it is kept
			//here to show that eventuall the feature
			//must be added
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 19:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 20:
		{
			yyVAL.elifArr = nil
		}
	case 24:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 38:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "%", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 39:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 40:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 41:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 42:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 43:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 44:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 45:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 46:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 47:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-1].s, &numNode{NUM, -1}, nil}
			yyVAL.node = &numNode{NUM, x.execute().(int)}
		}
	case 48:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 49:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-1].s}
		}
	case 50:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 51:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State start")
			}
		}
	case 55:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false)}}
		}
	case 56:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 57:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s, yyS[yypt-1].s, false)}}
		}
	case 58:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-2].s, resMap(&yyS[yypt-0].s, auxGetNode(yyS[yypt-2].s), true)}}
		}
	case 59:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State NT_DEL")
			}
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 76:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 77:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 78:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 79:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 80:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 81:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 82:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 83:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
			/*Probably code to reference SymbolTable and return data*/
			/*idx := dynamicMap[$2];
			  item := dynamicSymbolTable[idx];
			  switch item.(type) {
			         case bool:
			            dCatchNodePtr=&boolNode{BOOL, item.(bool)}
			            if item.(bool) == false {$$ = "false"} else { $$ = "true"}
			         case string:
			            dCatchNodePtr=&strNode{STR, item.(string)}
			            $$ = item.(string)
			         case int:
			            dCatchNodePtr=&numNode{NUM, item.(int)}
			            $$ = strconv.Itoa(item.(int))
			         case *commonNode:
			            dCatchNodePtr=item
			            args := ""
			            for i := range item.(*commonNode).args {
			                   args += item.(*commonNode).args[i].(string)
			            }
			            $$ = item.(*commonNode).val +" "+ args
			          default:
			            println("Unable to deref your variable ")
			            $$ = ""
			  }*/
		}
	case 84:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 85:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 86:
		{
			yyVAL.s = yyS[yypt-5].s + "=" + yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 87:
		{
			yyVAL.s = yyS[yypt-4].s + "=" + yyS[yypt-1].s
		}
	case 88:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 89:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 91:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 92:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 93:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 94:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 95:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 96:
		{
			yyVAL.s = ".."
		}
	case 97:
		{
			yyVAL.s = "-"
		}
	case 98:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
		}
	case 99:
		{
			yyVAL.s = ""
		}
	case 100:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 101:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 10}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 11}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 8}}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 9}}
		}
	case 114:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 12}}
		}
	case 115:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 13}}
		}
	case 116:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 117:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}}
		}
	case 119:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", yyS[yypt-1].arr}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"pwd"}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"print"}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 134:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"if"}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"while"}}
		}
	case 139:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"for"}}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"unset"}}
		}
	case 141:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"select"}}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cmds"}}
		}
	case 143:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 144:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsten"}}
		}
	case 145:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssite"}}
		}
	case 146:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsbldg"}}
		}
	case 147:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsroom"}}
		}
	case 148:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsrack"}}
		}
	case 149:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsdev"}}
		}
	case 150:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"-"}}
		}
	case 151:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".template"}}
		}
	case 152:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".cmds"}}
		}
	case 153:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".var"}}
		}
	case 154:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"+"}}
		}
	case 155:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"="}}
		}
	case 156:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 157:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 158:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 159:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 160:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 161:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 162:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 163:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 164:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 165:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 166:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 167:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 168:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 169:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 170:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 171:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 172:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 173:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 174:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 175:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 176:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 177:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 178:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 179:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 180:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 181:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 182:
		{
			val := map[string]interface{}{yyS[yypt-2].s: (yyS[yypt-0].node).(node).execute()}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), val}}
			if cmd.State.DebugLvl >= 3 {
				println("Attribute Acquired")
			}
		}
	case 183:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 184:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 185:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 186:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 187:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 188:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 189:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 190:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-6].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 191:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 192:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 193:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 194:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 195:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 196:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, (yyS[yypt-0].node).(node).execute()}
		}
	case 197:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 198:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 199:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 200:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 201:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 202:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 203:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, yyS[yypt-3].node, nil}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 204:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-6].s /*&numNode{NUM,$4}*/, yyS[yypt-4].node /*&strNode{STR, $7}*/, yyS[yypt-1].node}
		}
	case 205:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}, nil}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 206:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 207:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{resMap(&x, "other", true)}}
		}
	case 208:
		{
			if yyS[yypt-0].s != "" {
				yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
			} else {
				yyVAL.s = yyS[yypt-1].s
			}
		}
	case 209:
		{
			yyVAL.s = ""
		}
	case 210:
		{
			x := []interface{}{yyS[yypt-1].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 211:
		{
			x := []interface{}{yyS[yypt-2].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 212:
		{
			yyVAL.arr = nil
		}
	case 213:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 214:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}
	case 215:
		{
			if len(yyS[yypt-0].arr) != 0 {
				yyVAL.arr = append(yyS[yypt-1].arr, yyS[yypt-0].arr...)
			} else {
				yyVAL.arr = yyS[yypt-1].arr
			}
		}
	case 216:
		{
			yyVAL.arr = nil
		}
	case 217:
		{
			yyVAL.arr = []interface{}{&strNode{STR, yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 218:
		{
			yyVAL.arr = []interface{}{&numNode{NUM, yyS[yypt-0].n}}
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 219:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 220:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 221:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 222:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 223:
		{
			var x bool
			if yyS[yypt-0].s == "true" {
				x = true
			} else {
				x = false
			}
			yyVAL.arr = []interface{}{&boolNode{BOOL, x}}
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 224:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 225:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 226:
		{
			x := yyS[yypt-1].s
			yyVAL.s = x + "," + yyS[yypt-0].s
		}
	case 227:
		{
			yyVAL.s = ""
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
