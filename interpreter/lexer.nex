/[ \t]/  { /* Skip blanks and tabs. */ }
/create/ {println("We got TOKEN_CREATE"); return TOKEN_CREATE}
/gt/ {println("We got TOKEN_GET"); return TOKEN_GET}
/update/ {println("We got TOKEN_UPDATE"); return TOKEN_UPDATE}
/delete/ {println("We got TOKEN_DELETE"); return TOKEN_DELETE}
/search/ {println("We got TOKEN_SEARCH"); return TOKEN_SEARCH}
/\+/ {println("We got TOKEN_PLUS");lval.s = yylex.Text(); return TOKEN_PLUS}
/-/ {println("We got TOKEN_OCDEL");lval.s = yylex.Text(); return TOKEN_OCDEL}
/:/ {println("We got TOKEN_OCPSPEC"); return TOKEN_OCPSPEC}
/@/ {println("We got TOKEN_ATTRSPEC"); return TOKEN_ATTRSPEC}
/\$/ {println("We got TOKEN_DEREF"); return TOKEN_DEREF}

/tn/ {println("We got TOKEN_OCTENANT");return TOKEN_OCTENANT}
/si/ {println("We got TOKEN_OCSITE");return TOKEN_OCSITE}
/bd/ {println("We got TOKEN_OCBLDG");return TOKEN_OCBLDG}
/ro/ {println("We got TOKEN_OCROOM");return TOKEN_OCROOM}
/rk/ {println("We got TOKEN_OCRACK");return TOKEN_OCRACK}
/dv/ {println("We got TOKEN_OCDEV");return TOKEN_OCDEV}
/sd/ {println("We got TOKEN_OCSDEV");return TOKEN_OCSDEV}
/sd1/ {println("We got TOKEN_OCSDEV1");return TOKEN_OCSDEV1}
/selection/ {println("We got TOKEN_SELECT"); return TOKEN_SELECT}
/cmds/ {println("We got TOKEN_CMDS"); return TOKEN_CMDS}
/template/ {println("We got TOKEN_TEMPLATE"); return TOKEN_TEMPLATE}
/var/ {println("We got TOKEN_VAR");return TOKEN_VAR}
/{/ {println("We got TOKEN_LBRAC");return TOKEN_LBRAC}
/}/ {println("We got TOKEN_RBRAC");return TOKEN_RBRAC}
/,/ {println("We got TOKEN_COMMA"); return TOKEN_COMMA}
/\./ {println("We got TOKEN_DOT"); return TOKEN_DOT}

/tenant/ {println("We got TOKEN_TENANT");lval.s = yylex.Text();return TOKEN_TENANT}
/site/ {println("We got TOKEN_SITE");lval.s = yylex.Text();return TOKEN_SITE}
/bldg|building/ {println("We got TOKEN_BLDG");lval.s = yylex.Text();return TOKEN_BLDG}
/room/ {println("We got TOKEN_ROOM");lval.s = yylex.Text();return TOKEN_ROOM}
/rack/ {println("We got TOKEN_RACK");lval.s = yylex.Text();return TOKEN_RACK}
/device/ {println("We got TOKEN_DEVICE");lval.s = yylex.Text();return TOKEN_DEVICE}
/subdevice/ {println("We got TOKEN_SUBDEVICE");lval.s = yylex.Text();return TOKEN_SUBDEVICE}
/subdevice1/{println("We got TOKEN_SUBDEVICE1");lval.s = yylex.Text();return TOKEN_SUBDEVICE1}
/address|category|city|color|country|description|domain|gps|height|heightUnit|id|mainContact|mainEmail|mainPhone|model|name|nbFloors|orientation|parentId|posU|posXY|posXYUnit|posZ|posZUnit|reserved|reservedColor|serial|size|sizeU|sizeUnit|slot|technical|technicalColor|template|token|type|usableColor|vendor|zipcode/ 
{println("We got TOKEN_ATTR");lval.s = yylex.Text();return TOKEN_ATTR}

/[0-9]+/ {println("We got TOKEN_NUM");lval.n = atoi(yylex.Text()); return TOKEN_NUM}
/lsten/ {println("We got TOKEN_LSTEN"); return TOKEN_LSTEN}
/lssite/ {println("We got TOKEN_LSSITE"); return TOKEN_LSSITE}
/lsbldg/ {println("We got TOKEN_LSBLDG"); return TOKEN_LSBLDG}
/lsroom/ {println("We got TOKEN_LSROOM"); return TOKEN_LSROOM}
/lsrack/ {println("We got TOKEN_LSRACK"); return TOKEN_LSRACK}
/lsdev/ {println("We got TOKEN_LSDEV"); return TOKEN_LSDEV}
/lssubdev/ {println("We got TOKEN_LSSUBDEV"); return TOKEN_LSSUBDEV}
/lssubdev1/ {println("We got TOKEN_LSSUBDEV1"); return TOKEN_LSSUBDEV1}
/tree/ {println("We got TOKEN_TREE"); return TOKEN_TREE}
/lsog/ {println("We got TOKEN_LSOG"); return TOKEN_LSOG}
/cd/ {println("We got TOKEN_CD");return TOKEN_CD}
/pwd/ {println("We got TOKEN_PWD");return TOKEN_PWD}
/clear/ {println("We got TOKEN_CLR");return TOKEN_CLR}
/grep/ {println("We got TOKEN_GREP");return TOKEN_GREP}
/ls/ {println("We got TOKEN_LS");return TOKEN_LS}
/exit/ {println("We got TOKEN_EXIT"); return TOKEN_EXIT}
/-l/ {println("We got TOKEN_CMDFLAG");return TOKEN_CMDFLAG}
/[=]/ {println("We got TOKEN_EQUAL");return TOKEN_EQUAL}
/\// {println("We got TOKEN_SLASH"); return TOKEN_SLASH}
/man/ {println("We got TOKEN_DOC"); return TOKEN_DOC}
/[A-Za-z0-9_]+/ {println("We got TOKEN_WORD"); lval.s = yylex.Text(); println("LVAL: ", lval.s); return TOKEN_WORD}
//
package main
import (
	"os"
	"strconv"
)
type TokenType int

func atoi(x string) int {
	v, e := strconv.Atoi(x)
	if e != nil {
		println("STRCONV ERROR!")
		return 0
	}
	return v
}

func lexBegin() {
  //NN_FUN(NewLexer(os.Stdin))
  //yyParse(NewLexer(os.Stdin))

  	lex := NewLexer(strings.NewReader(os.Args[1]))
	e := yyParse(lex)
	println("Return Code: ", e)
}