// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		if input[idx].(string) == "false" {
			x := map[int]interface{}{0: &boolNode{BOOL, false}}
			res = append(res, x)
		} else if input[idx].(string) == "true" {
			x := map[int]interface{}{0: &boolNode{BOOL, true}}
			res = append(res, x)
		} else if v, e := strconv.Atoi(input[idx].(string)); e == nil {
			x := map[int]interface{}{0: &numNode{NUM, v}}
			res = append(res, x)
		} else {
			x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
			res = append(res, x)
		}
	}
	return res
}

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57429
	yyEofCode      = 57344
	TOK_AND        = 57415
	TOK_ATTR       = 57356
	TOK_ATTRSPEC   = 57390
	TOK_BASHTYPE   = 57365
	TOK_BLDG       = 57350
	TOK_BOOL       = 57359
	TOK_CD         = 57371
	TOK_CLR        = 57373
	TOK_CMDFLAG    = 57367
	TOK_CMDS       = 57401
	TOK_COL        = 57395
	TOK_COMMA      = 57399
	TOK_CREATE     = 57360
	TOK_DELETE     = 57363
	TOK_DEREF      = 57404
	TOK_DEVICE     = 57353
	TOK_DIV        = 57420
	TOK_DOC        = 57370
	TOK_DONE       = 57426
	TOK_DOT        = 57400
	TOK_ELIF       = 57428
	TOK_ELSE       = 57409
	TOK_EQUAL      = 57366
	TOK_EXIT       = 57369
	TOK_FI         = 57425
	TOK_FOR        = 57407
	TOK_GET        = 57361
	TOK_GREATER    = 57422
	TOK_GREP       = 57374
	TOK_IF         = 57406
	TOK_IN         = 57416
	TOK_LBLOCK     = 57410
	TOK_LBRAC      = 57397
	TOK_LESS       = 57423
	TOK_LPAREN     = 57412
	TOK_LS         = 57375
	TOK_LSBLDG     = 57380
	TOK_LSDEV      = 57383
	TOK_LSOG       = 57377
	TOK_LSRACK     = 57382
	TOK_LSROOM     = 57381
	TOK_LSSITE     = 57379
	TOK_LSSUBDEV   = 57384
	TOK_LSSUBDEV1  = 57385
	TOK_LSTEN      = 57378
	TOK_MULT       = 57421
	TOK_NOT        = 57419
	TOK_NUM        = 57346
	TOK_OCBLDG     = 57386
	TOK_OCDEL      = 57358
	TOK_OCDEV      = 57387
	TOK_OCRACK     = 57388
	TOK_OCROOM     = 57389
	TOK_OCSDEV     = 57393
	TOK_OCSDEV1    = 57394
	TOK_OCSITE     = 57391
	TOK_OCTENANT   = 57392
	TOK_OR         = 57414
	TOK_PLUS       = 57357
	TOK_PRNT       = 57417
	TOK_PWD        = 57372
	TOK_QUOT       = 57418
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57411
	TOK_RBRAC      = 57398
	TOK_ROOM       = 57351
	TOK_RPAREN     = 57413
	TOK_SEARCH     = 57364
	TOK_SELECT     = 57396
	TOK_SEMICOL    = 57405
	TOK_SITE       = 57349
	TOK_SLASH      = 57368
	TOK_SUBDEVICE  = 57354
	TOK_SUBDEVICE1 = 57355
	TOK_TEMPLATE   = 57402
	TOK_TENANT     = 57348
	TOK_THEN       = 57424
	TOK_TREE       = 57376
	TOK_UNSET      = 57427
	TOK_UPDATE     = 57362
	TOK_VAR        = 57403
	TOK_WHILE      = 57408
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -155
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57426: 0,   // TOK_DONE (163x)
		57409: 1,   // TOK_ELSE (161x)
		57398: 2,   // TOK_RBRAC (161x)
		57405: 3,   // TOK_SEMICOL (160x)
		57428: 4,   // TOK_ELIF (159x)
		57425: 5,   // TOK_FI (159x)
		57344: 6,   // $end (158x)
		57413: 7,   // TOK_RPAREN (156x)
		57358: 8,   // TOK_OCDEL (136x)
		57347: 9,   // TOK_WORD (132x)
		57346: 10,  // TOK_NUM (78x)
		57404: 11,  // TOK_DEREF (74x)
		57357: 12,  // TOK_PLUS (72x)
		57400: 13,  // TOK_DOT (70x)
		57359: 14,  // TOK_BOOL (60x)
		57368: 15,  // TOK_SLASH (53x)
		57390: 16,  // TOK_ATTRSPEC (51x)
		57366: 17,  // TOK_EQUAL (46x)
		57419: 18,  // TOK_NOT (46x)
		57455: 19,  // P1 (45x)
		57454: 20,  // P (42x)
		57356: 21,  // TOK_ATTR (35x)
		57414: 22,  // TOK_OR (34x)
		57460: 23,  // WORDORNUM (32x)
		57411: 24,  // TOK_RBLOCK (31x)
		57415: 25,  // TOK_AND (27x)
		57412: 26,  // TOK_LPAREN (26x)
		57418: 27,  // TOK_QUOT (22x)
		57461: 28,  // factor (21x)
		57467: 29,  // unary (21x)
		57466: 30,  // term (17x)
		57422: 31,  // TOK_GREATER (16x)
		57423: 32,  // TOK_LESS (16x)
		57462: 33,  // nex (15x)
		57395: 34,  // TOK_COL (15x)
		57420: 35,  // TOK_DIV (15x)
		57421: 36,  // TOK_MULT (15x)
		57371: 37,  // TOK_CD (12x)
		57360: 38,  // TOK_CREATE (12x)
		57363: 39,  // TOK_DELETE (12x)
		57361: 40,  // TOK_GET (12x)
		57375: 41,  // TOK_LS (12x)
		57377: 42,  // TOK_LSOG (12x)
		57376: 43,  // TOK_TREE (12x)
		57362: 44,  // TOK_UPDATE (12x)
		57430: 45,  // BASH (11x)
		57437: 46,  // FUNC (11x)
		57440: 47,  // K (11x)
		57441: 48,  // NT_CREATE (11x)
		57442: 49,  // NT_DEL (11x)
		57443: 50,  // NT_GET (11x)
		57444: 51,  // NT_UPDATE (11x)
		57445: 52,  // OCCHOOSE (11x)
		57447: 53,  // OCDEL (11x)
		57448: 54,  // OCDOT (11x)
		57449: 55,  // OCGET (11x)
		57450: 56,  // OCLISYNTX (11x)
		57451: 57,  // OCSEL (11x)
		57452: 58,  // OCUPDATE (11x)
		57456: 59,  // Q (11x)
		57457: 60,  // REL (11x)
		57465: 61,  // stmnt (11x)
		57373: 62,  // TOK_CLR (11x)
		57370: 63,  // TOK_DOC (11x)
		57369: 64,  // TOK_EXIT (11x)
		57374: 65,  // TOK_GREP (11x)
		57380: 66,  // TOK_LSBLDG (11x)
		57383: 67,  // TOK_LSDEV (11x)
		57382: 68,  // TOK_LSRACK (11x)
		57381: 69,  // TOK_LSROOM (11x)
		57379: 70,  // TOK_LSSITE (11x)
		57384: 71,  // TOK_LSSUBDEV (11x)
		57385: 72,  // TOK_LSSUBDEV1 (11x)
		57378: 73,  // TOK_LSTEN (11x)
		57417: 74,  // TOK_PRNT (11x)
		57372: 75,  // TOK_PWD (11x)
		57396: 76,  // TOK_SELECT (11x)
		57427: 77,  // TOK_UNSET (11x)
		57431: 78,  // CTRL (10x)
		57453: 79,  // OPEN_STMT (10x)
		57463: 80,  // st2 (10x)
		57407: 81,  // TOK_FOR (10x)
		57406: 82,  // TOK_IF (10x)
		57408: 83,  // TOK_WHILE (10x)
		57434: 84,  // EQAL (9x)
		57439: 85,  // JOIN (8x)
		57435: 86,  // EXPR (7x)
		57436: 87,  // F (4x)
		57458: 88,  // STRARG (4x)
		57410: 89,  // TOK_LBLOCK (4x)
		57350: 90,  // TOK_BLDG (3x)
		57353: 91,  // TOK_DEVICE (3x)
		57397: 92,  // TOK_LBRAC (3x)
		57352: 93,  // TOK_RACK (3x)
		57351: 94,  // TOK_ROOM (3x)
		57349: 95,  // TOK_SITE (3x)
		57348: 96,  // TOK_TENANT (3x)
		57459: 97,  // WNARG (3x)
		57432: 98,  // E (2x)
		57433: 99,  // EIF (2x)
		57438: 100, // GETOBJS (2x)
		57354: 101, // TOK_SUBDEVICE (2x)
		57355: 102, // TOK_SUBDEVICE1 (2x)
		57424: 103, // TOK_THEN (2x)
		57446: 104, // OCCR (1x)
		57464: 105, // start (1x)
		57401: 106, // TOK_CMDS (1x)
		57399: 107, // TOK_COMMA (1x)
		57416: 108, // TOK_IN (1x)
		57386: 109, // TOK_OCBLDG (1x)
		57387: 110, // TOK_OCDEV (1x)
		57388: 111, // TOK_OCRACK (1x)
		57389: 112, // TOK_OCROOM (1x)
		57391: 113, // TOK_OCSITE (1x)
		57392: 114, // TOK_OCTENANT (1x)
		57402: 115, // TOK_TEMPLATE (1x)
		57403: 116, // TOK_VAR (1x)
		57429: 117, // $default (0x)
		57345: 118, // error (0x)
		57365: 119, // TOK_BASHTYPE (0x)
		57367: 120, // TOK_CMDFLAG (0x)
		57393: 121, // TOK_OCSDEV (0x)
		57394: 122, // TOK_OCSDEV1 (0x)
		57364: 123, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_ELSE",
		"TOK_RBRAC",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"$end",
		"TOK_RPAREN",
		"TOK_OCDEL",
		"TOK_WORD",
		"TOK_NUM",
		"TOK_DEREF",
		"TOK_PLUS",
		"TOK_DOT",
		"TOK_BOOL",
		"TOK_SLASH",
		"TOK_ATTRSPEC",
		"TOK_EQUAL",
		"TOK_NOT",
		"P1",
		"P",
		"TOK_ATTR",
		"TOK_OR",
		"WORDORNUM",
		"TOK_RBLOCK",
		"TOK_AND",
		"TOK_LPAREN",
		"TOK_QUOT",
		"factor",
		"unary",
		"term",
		"TOK_GREATER",
		"TOK_LESS",
		"nex",
		"TOK_COL",
		"TOK_DIV",
		"TOK_MULT",
		"TOK_CD",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_GET",
		"TOK_LS",
		"TOK_LSOG",
		"TOK_TREE",
		"TOK_UPDATE",
		"BASH",
		"FUNC",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCDOT",
		"OCGET",
		"OCLISYNTX",
		"OCSEL",
		"OCUPDATE",
		"Q",
		"REL",
		"stmnt",
		"TOK_CLR",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GREP",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSSUBDEV",
		"TOK_LSSUBDEV1",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_SELECT",
		"TOK_UNSET",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"EQAL",
		"JOIN",
		"EXPR",
		"F",
		"STRARG",
		"TOK_LBLOCK",
		"TOK_BLDG",
		"TOK_DEVICE",
		"TOK_LBRAC",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"WNARG",
		"E",
		"EIF",
		"GETOBJS",
		"TOK_SUBDEVICE",
		"TOK_SUBDEVICE1",
		"TOK_THEN",
		"OCCR",
		"start",
		"TOK_CMDS",
		"TOK_COMMA",
		"TOK_IN",
		"TOK_OCBLDG",
		"TOK_OCDEV",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_TEMPLATE",
		"TOK_VAR",
		"$default",
		"error",
		"TOK_BASHTYPE",
		"TOK_CMDFLAG",
		"TOK_OCSDEV",
		"TOK_OCSDEV1",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {105, 1},
		2:   {80, 1},
		3:   {80, 3},
		4:   {80, 1},
		5:   {61, 1},
		6:   {61, 1},
		7:   {61, 1},
		8:   {61, 1},
		9:   {61, 0},
		10:  {78, 1},
		11:  {79, 7},
		12:  {79, 10},
		13:  {79, 6},
		14:  {79, 15},
		15:  {79, 7},
		16:  {79, 12},
		17:  {99, 7},
		18:  {99, 0},
		19:  {86, 3},
		20:  {86, 1},
		21:  {85, 3},
		22:  {85, 1},
		23:  {84, 4},
		24:  {84, 4},
		25:  {84, 1},
		26:  {60, 3},
		27:  {60, 4},
		28:  {60, 4},
		29:  {60, 3},
		30:  {60, 1},
		31:  {33, 3},
		32:  {33, 3},
		33:  {33, 1},
		34:  {30, 3},
		35:  {30, 3},
		36:  {30, 1},
		37:  {29, 2},
		38:  {29, 2},
		39:  {29, 1},
		40:  {28, 3},
		41:  {28, 1},
		42:  {28, 2},
		43:  {28, 5},
		44:  {28, 1},
		45:  {28, 1},
		46:  {47, 1},
		47:  {47, 1},
		48:  {47, 1},
		49:  {47, 1},
		50:  {48, 4},
		51:  {50, 2},
		52:  {50, 3},
		53:  {51, 3},
		54:  {49, 2},
		55:  {98, 1},
		56:  {98, 1},
		57:  {98, 1},
		58:  {98, 1},
		59:  {98, 1},
		60:  {98, 1},
		61:  {98, 1},
		62:  {98, 1},
		63:  {23, 1},
		64:  {23, 1},
		65:  {23, 4},
		66:  {23, 4},
		67:  {23, 4},
		68:  {23, 4},
		69:  {23, 1},
		70:  {87, 4},
		71:  {87, 3},
		72:  {20, 1},
		73:  {20, 2},
		74:  {19, 3},
		75:  {19, 1},
		76:  {19, 4},
		77:  {19, 3},
		78:  {19, 2},
		79:  {19, 1},
		80:  {19, 2},
		81:  {19, 0},
		82:  {59, 2},
		83:  {59, 2},
		84:  {59, 2},
		85:  {59, 2},
		86:  {59, 2},
		87:  {59, 2},
		88:  {59, 2},
		89:  {59, 2},
		90:  {59, 2},
		91:  {59, 2},
		92:  {59, 2},
		93:  {59, 3},
		94:  {59, 4},
		95:  {59, 1},
		96:  {45, 1},
		97:  {45, 1},
		98:  {45, 4},
		99:  {45, 1},
		100: {45, 1},
		101: {45, 1},
		102: {45, 1},
		103: {45, 2},
		104: {45, 2},
		105: {45, 2},
		106: {45, 2},
		107: {45, 2},
		108: {45, 2},
		109: {45, 2},
		110: {45, 2},
		111: {45, 2},
		112: {56, 2},
		113: {56, 1},
		114: {56, 1},
		115: {56, 1},
		116: {56, 1},
		117: {56, 1},
		118: {56, 1},
		119: {104, 5},
		120: {104, 5},
		121: {104, 5},
		122: {104, 5},
		123: {104, 7},
		124: {104, 7},
		125: {104, 7},
		126: {104, 7},
		127: {104, 7},
		128: {104, 7},
		129: {104, 7},
		130: {104, 7},
		131: {53, 2},
		132: {58, 5},
		133: {55, 2},
		134: {100, 3},
		135: {100, 1},
		136: {52, 4},
		137: {54, 6},
		138: {54, 8},
		139: {54, 8},
		140: {54, 4},
		141: {54, 4},
		142: {54, 2},
		143: {54, 6},
		144: {54, 5},
		145: {54, 4},
		146: {57, 1},
		147: {57, 5},
		148: {88, 2},
		149: {88, 0},
		150: {97, 2},
		151: {97, 4},
		152: {97, 0},
		153: {46, 6},
		154: {46, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [366][]uint16{
		// 0
		{3: 146, 6: 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 157, 167, 165, 166, 105: 156},
		{6: 155},
		{6: 154},
		{153, 153, 153, 519, 153, 153, 153},
		{151, 151, 151, 4: 151, 151, 151},
		// 5
		{150, 150, 150, 150, 150, 150, 150, 150},
		{149, 149, 149, 149, 149, 149, 149, 149},
		{148, 148, 148, 148, 148, 148, 148, 148},
		{147, 147, 147, 147, 147, 147, 147, 147},
		{145, 145, 145, 4: 145, 145, 145},
		// 10
		{89: 502},
		{26: 497},
		{9: 469, 26: 468},
		{109, 109, 109, 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108},
		// 15
		{107, 107, 107, 107, 107, 107, 107, 107},
		{106, 106, 106, 106, 106, 106, 106, 106},
		{90: 458, 461, 93: 460, 459, 457, 456, 98: 465, 101: 462, 463},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 454, 90: 458, 461, 93: 460, 459, 457, 456, 98: 455, 101: 462, 463},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 448, 74},
		// 20
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 447},
		{83, 83, 83, 83, 83, 83, 83, 83, 10: 83, 13: 83, 16: 83, 21: 83},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 74, 219, 13: 217, 16: 74, 19: 446, 21: 74},
		{1, 1, 1, 1, 1, 1, 1, 1, 13: 232, 15: 231, 26: 441},
		{13: 228, 106: 419, 115: 420, 418},
		// 25
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 417},
		{9: 360},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 359},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 358},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 357},
		// 30
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 356},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 355},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 354},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 353},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 352},
		// 35
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 351},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 350},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 74, 219, 13: 217, 15: 177, 19: 176, 348},
		{8: 345},
		{60, 60, 60, 60, 60, 60, 60, 60},
		// 40
		{59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58},
		{27: 340},
		{56, 56, 56, 56, 56, 56, 56, 56},
		{55, 55, 55, 55, 55, 55, 55, 55},
		// 45
		{54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 9: 337, 37: 332, 333, 336, 334, 331, 339, 338, 335},
		{90: 260, 266, 93: 264, 262, 258, 256, 104: 254, 109: 259, 265, 263, 261, 257, 255},
		{42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41},
		// 50
		{40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37},
		{13: 235},
		// 55
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 220, 92: 221},
		{9, 9, 9, 9, 9, 9, 9, 9, 13: 212},
		{21: 213},
		{17: 214},
		{9: 215},
		// 60
		{8, 8, 8, 8, 8, 8, 8, 8},
		{80, 80, 80, 80, 80, 80, 80, 80, 10: 80, 13: 232, 15: 231, 80, 21: 80},
		{13: 228},
		{76, 76, 76, 76, 76, 76, 76, 76, 10: 76, 13: 76, 16: 76, 21: 76},
		{9: 227},
		// 65
		{22, 22, 22, 22, 22, 22, 22, 22},
		{9: 222, 100: 223},
		{2: 20, 107: 225},
		{2: 224},
		{19, 19, 19, 19, 19, 19, 19, 19},
		// 70
		{9: 222, 100: 226},
		{2: 21},
		{75, 75, 75, 75, 75, 75, 75, 75, 10: 75, 13: 75, 16: 75, 21: 75},
		{77, 77, 77, 77, 77, 77, 77, 77, 10: 77, 13: 77, 15: 229, 77, 21: 77},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 74, 219, 13: 217, 16: 74, 19: 230, 21: 74},
		// 75
		{79, 79, 79, 79, 79, 79, 79, 79, 10: 79, 13: 79, 16: 79, 21: 79},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 74, 219, 13: 217, 16: 74, 19: 234, 21: 74},
		{9: 233},
		{78, 78, 78, 78, 78, 78, 78, 78, 10: 78, 13: 78, 16: 78, 21: 78},
		{81, 81, 81, 81, 81, 81, 81, 81, 10: 81, 13: 81, 16: 81, 21: 81},
		// 80
		{21: 236},
		{17: 237},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 243},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 12: 92, 14: 92, 16: 92, 21: 92, 27: 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 12: 91, 14: 91, 16: 91, 21: 91, 27: 91},
		// 85
		{9: 249},
		{9: 244},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 12: 86, 14: 86, 16: 86, 21: 86, 27: 86},
		{23, 23, 23, 23, 23, 23, 23, 23},
		{8: 245, 12: 246},
		// 90
		{9: 248},
		{9: 247},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 12: 87, 14: 87, 16: 87, 21: 87, 27: 87},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 12: 88, 14: 88, 16: 88, 21: 88, 27: 88},
		{8: 251, 12: 250},
		// 95
		{9: 253},
		{9: 252},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 12: 89, 14: 89, 16: 89, 21: 89, 27: 89},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 12: 90, 14: 90, 16: 90, 21: 90, 27: 90},
		{43, 43, 43, 43, 43, 43, 43, 43},
		// 100
		{34: 327},
		{34: 323},
		{34: 319},
		{34: 315},
		{34: 309},
		// 105
		{34: 303},
		{34: 297},
		{34: 291},
		{34: 285},
		{34: 279},
		// 110
		{34: 273},
		{34: 267},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 268},
		{16: 269},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 270},
		// 115
		{16: 271},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 272},
		{25, 25, 25, 25, 25, 25, 25, 25},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 274},
		{16: 275},
		// 120
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 276},
		{16: 277},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 278},
		{26, 26, 26, 26, 26, 26, 26, 26},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 280},
		// 125
		{16: 281},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 282},
		{16: 283},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 284},
		{27, 27, 27, 27, 27, 27, 27, 27},
		// 130
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 286},
		{16: 287},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 288},
		{16: 289},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 290},
		// 135
		{28, 28, 28, 28, 28, 28, 28, 28},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 292},
		{16: 293},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 294},
		{16: 295},
		// 140
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 296},
		{29, 29, 29, 29, 29, 29, 29, 29},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 298},
		{16: 299},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 300},
		// 145
		{16: 301},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 302},
		{30, 30, 30, 30, 30, 30, 30, 30},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 304},
		{16: 305},
		// 150
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 306},
		{16: 307},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 308},
		{31, 31, 31, 31, 31, 31, 31, 31},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 310},
		// 155
		{16: 311},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 312},
		{16: 313},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 314},
		{32, 32, 32, 32, 32, 32, 32, 32},
		// 160
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 316},
		{16: 317},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 318},
		{33, 33, 33, 33, 33, 33, 33, 33},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 320},
		// 165
		{16: 321},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 322},
		{34, 34, 34, 34, 34, 34, 34, 34},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 324},
		{16: 325},
		// 170
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 326},
		{35, 35, 35, 35, 35, 35, 35, 35},
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 74, 19: 176, 328},
		{16: 329},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 330},
		// 175
		{36, 36, 36, 36, 36, 36, 36, 36},
		{52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49},
		// 180
		{48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44},
		// 185
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 342, 27: 6, 88: 341},
		{27: 344},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 342, 27: 6, 88: 343},
		{27: 7},
		{57, 57, 57, 57, 57, 57, 57, 57},
		// 190
		{9: 346},
		{9: 347},
		{61, 61, 61, 61, 61, 61, 61, 61},
		{63, 63, 63, 63, 63, 63, 63, 63, 10: 349},
		{62, 62, 62, 62, 62, 62, 62, 62},
		// 195
		{64, 64, 64, 64, 64, 64, 64, 64},
		{65, 65, 65, 65, 65, 65, 65, 65},
		{66, 66, 66, 66, 66, 66, 66, 66},
		{67, 67, 67, 67, 67, 67, 67, 67},
		{68, 68, 68, 68, 68, 68, 68, 68},
		// 200
		{69, 69, 69, 69, 69, 69, 69, 69},
		{70, 70, 70, 70, 70, 70, 70, 70},
		{71, 71, 71, 71, 71, 71, 71, 71},
		{72, 72, 72, 72, 72, 72, 72, 72},
		{73, 73, 73, 73, 73, 73, 73, 73},
		// 205
		{13, 13, 13, 13, 13, 13, 13, 13, 13: 75, 17: 361, 89: 362},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 380, 374, 371, 370, 33: 369, 60: 368, 84: 367, 366, 365},
		{10: 363},
		{24: 364},
		{11, 11, 11, 11, 11, 11, 11, 11},
		// 210
		{10, 10, 10, 10, 10, 10, 10, 10, 22: 388},
		{135, 135, 135, 135, 135, 135, 135, 135, 22: 135, 24: 135, 391},
		{133, 133, 133, 133, 133, 133, 133, 133, 17: 393, 394, 22: 133, 24: 133, 133},
		{130, 130, 130, 130, 130, 130, 130, 130, 17: 130, 130, 22: 130, 24: 130, 130},
		{125, 125, 125, 125, 125, 125, 125, 125, 408, 12: 407, 17: 125, 125, 22: 125, 24: 125, 125, 31: 406, 405},
		// 215
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 12: 122, 17: 122, 122, 22: 122, 24: 122, 122, 31: 122, 122, 35: 402, 401},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 17: 119, 119, 22: 119, 24: 119, 119, 31: 119, 119, 35: 119, 119},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 400},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 399},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 17: 116, 116, 22: 116, 24: 116, 116, 31: 116, 116, 35: 116, 116},
		// 220
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 367, 366, 387},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 17: 114, 114, 22: 114, 24: 114, 114, 31: 114, 114, 35: 114, 114},
		{9: 383},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 17: 111, 111, 22: 111, 24: 111, 111, 31: 111, 111, 35: 111, 111},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 17: 110, 110, 22: 110, 24: 110, 110, 31: 110, 110, 35: 110, 110},
		// 225
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 342, 27: 6, 88: 381},
		{27: 382},
		{12, 12, 12, 12, 12, 12, 12, 12},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 17: 113, 113, 22: 113, 24: 113, 113, 31: 113, 113, 35: 113, 113, 89: 384},
		{10: 385},
		// 230
		{24: 386},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 17: 112, 112, 22: 112, 24: 112, 112, 31: 112, 112, 35: 112, 112},
		{7: 389, 22: 388},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 367, 390},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 17: 115, 115, 22: 115, 24: 115, 115, 31: 115, 115, 35: 115, 115},
		// 235
		{136, 136, 136, 136, 136, 136, 136, 136, 22: 136, 24: 136, 391},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 392},
		{134, 134, 134, 134, 134, 134, 134, 134, 17: 393, 394, 22: 134, 24: 134, 134},
		{17: 397},
		{17: 395},
		// 240
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 396},
		{131, 131, 131, 131, 131, 131, 131, 131, 17: 131, 131, 22: 131, 24: 131, 131},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 398},
		{132, 132, 132, 132, 132, 132, 132, 132, 17: 132, 132, 22: 132, 24: 132, 132},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 17: 117, 117, 22: 117, 24: 117, 117, 31: 117, 117, 35: 117, 117},
		// 245
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 17: 118, 118, 22: 118, 24: 118, 118, 31: 118, 118, 35: 118, 118},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 404},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 403},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 17: 120, 120, 22: 120, 24: 120, 120, 31: 120, 120, 35: 120, 120},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 17: 121, 121, 22: 121, 24: 121, 121, 31: 121, 121, 35: 121, 121},
		// 250
		{8: 373, 378, 376, 377, 14: 379, 17: 415, 372, 26: 375, 28: 374, 371, 370, 33: 414},
		{8: 373, 378, 376, 377, 14: 379, 17: 411, 372, 26: 375, 28: 374, 371, 370, 33: 412},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 410},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 409},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 12: 123, 17: 123, 123, 22: 123, 24: 123, 123, 31: 123, 123, 35: 402, 401},
		// 255
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 17: 124, 124, 22: 124, 24: 124, 124, 31: 124, 124, 35: 402, 401},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 413},
		{126, 126, 126, 126, 126, 126, 126, 126, 408, 12: 407, 17: 126, 126, 22: 126, 24: 126, 126},
		{127, 127, 127, 127, 127, 127, 127, 127, 408, 12: 407, 17: 127, 127, 22: 127, 24: 127, 127},
		{129, 129, 129, 129, 129, 129, 129, 129, 408, 12: 407, 17: 129, 129, 22: 129, 24: 129, 129},
		// 260
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 416},
		{128, 128, 128, 128, 128, 128, 128, 128, 408, 12: 407, 17: 128, 128, 22: 128, 24: 128, 128},
		{24, 24, 24, 24, 24, 24, 24, 24},
		{34: 425},
		{34: 423},
		// 265
		{34: 421},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 422},
		{14, 14, 14, 14, 14, 14, 14, 14},
		{74, 74, 74, 74, 74, 74, 74, 74, 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 424},
		{15, 15, 15, 15, 15, 15, 15, 15},
		// 270
		{9: 426},
		{17: 427},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 428, 26: 430, 429},
		{18, 18, 18, 18, 18, 18, 18, 18},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 342, 27: 6, 88: 439},
		// 275
		{7: 3, 241, 238, 239, 12: 240, 14: 242, 23: 432, 27: 433, 97: 431},
		{7: 438},
		{7: 3, 241, 238, 239, 12: 240, 14: 242, 23: 432, 27: 433, 97: 437},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 434},
		{27: 435},
		// 280
		{7: 3, 241, 238, 239, 12: 240, 14: 242, 23: 432, 27: 433, 97: 436},
		{7: 4},
		{7: 5},
		{16, 16, 16, 16, 16, 16, 16, 16},
		{27: 440},
		// 285
		{17, 17, 17, 17, 17, 17, 17, 17},
		{7: 442},
		{92: 443},
		{2: 146, 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 444, 167, 165, 166},
		{2: 445},
		// 290
		{2, 2, 2, 2, 2, 2, 2, 2},
		{82, 82, 82, 82, 82, 82, 82, 82, 10: 82, 13: 82, 16: 82, 21: 82},
		{101, 101, 101, 101, 101, 101, 101, 101},
		{21: 450, 87: 449},
		{102, 102, 102, 102, 102, 102, 102, 102},
		// 295
		{17: 451},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 452},
		{84, 84, 84, 84, 84, 84, 84, 84, 21: 450, 87: 453},
		{85, 85, 85, 85, 85, 85, 85, 85},
		{104, 104, 104, 104, 104, 104, 104, 104},
		// 300
		{21: 450, 87: 464},
		{8: 100, 100, 11: 100, 13: 100, 15: 100, 21: 100},
		{8: 99, 99, 11: 99, 13: 99, 15: 99, 21: 99},
		{8: 98, 98, 11: 98, 13: 98, 15: 98, 21: 98},
		{8: 97, 97, 11: 97, 13: 97, 15: 97, 21: 97},
		// 305
		{8: 96, 96, 11: 96, 13: 96, 15: 96, 21: 96},
		{8: 95, 95, 11: 95, 13: 95, 15: 95, 21: 95},
		{8: 94, 94, 11: 94, 13: 94, 15: 94, 21: 94},
		{8: 93, 93, 11: 93, 13: 93, 15: 93, 21: 93},
		{103, 103, 103, 103, 103, 103, 103, 103},
		// 310
		{8: 218, 216, 11: 219, 13: 217, 15: 177, 19: 176, 466, 74},
		{21: 450, 87: 467},
		{105, 105, 105, 105, 105, 105, 105, 105},
		{26: 484},
		{108: 470},
		// 315
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 367, 366, 471, 92: 472},
		{3: 481, 22: 388},
		{10: 473},
		{13: 474},
		{13: 475},
		// 320
		{10: 476},
		{2: 477},
		{3: 478},
		{146, 3: 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 479, 167, 165, 166},
		{480},
		// 325
		{139, 139, 139, 4: 139, 139, 139},
		{146, 3: 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 482, 167, 165, 166},
		{483},
		{140, 140, 140, 4: 140, 140, 140},
		{9: 485},
		// 330
		{17: 486},
		{8: 241, 238, 239, 12: 240, 14: 242, 23: 487},
		{3: 488},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 367, 366, 489},
		{3: 490, 22: 388},
		// 335
		{7: 146, 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 491, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193},
		{7: 492},
		{7: 493},
		{3: 494},
		{146, 3: 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 495, 167, 165, 166},
		// 340
		{496},
		{141, 141, 141, 4: 141, 141, 141},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 367, 366, 498},
		{7: 499, 22: 388},
		{146, 3: 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 500, 167, 165, 166},
		// 345
		{501},
		{142, 142, 142, 4: 142, 142, 142},
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 367, 366, 503},
		{22: 388, 24: 504},
		{103: 505},
		// 350
		{1: 146, 3: 146, 146, 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 506, 167, 165, 166},
		{1: 137, 4: 509, 507, 99: 508},
		{144, 144, 144, 4: 144, 144, 144},
		{1: 516},
		{89: 510},
		// 355
		{8: 373, 378, 376, 377, 14: 379, 18: 372, 26: 375, 28: 374, 371, 370, 33: 369, 60: 368, 84: 367, 366, 511},
		{22: 388, 24: 512},
		{103: 513},
		{1: 146, 3: 146, 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 514, 167, 165, 166},
		{1: 137, 4: 509, 99: 515},
		// 360
		{1: 138},
		{3: 146, 5: 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 517, 167, 165, 166},
		{5: 518},
		{143, 143, 143, 4: 143, 143, 143},
		{146, 146, 146, 146, 146, 146, 146, 8: 180, 178, 11: 181, 202, 179, 15: 177, 17: 210, 19: 176, 209, 37: 182, 172, 175, 173, 183, 198, 192, 174, 194, 163, 160, 168, 171, 169, 170, 206, 203, 207, 205, 162, 208, 204, 161, 61: 158, 195, 201, 200, 196, 186, 189, 188, 187, 185, 190, 191, 184, 197, 199, 211, 193, 159, 164, 520, 167, 165, 166},
		// 365
		{152, 152, 152, 4: 152, 152, 152},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 118

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, 0}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, 0}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 18:
		{
			yyVAL.elifArr = nil
		}
	case 22:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 23:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 24:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 25:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 31:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 33:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 36:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 37:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 38:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 39:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 40:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 41:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 42:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, 0}
		}
	case 43:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].n}
		}
	case 44:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, 0}
		}
	case 45:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 46:
		{
			println("@State start")
		}
	case 50:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s)}}
		}
	case 51:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 52:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 53:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 54:
		{
			println("@State NT_DEL")
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 63:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 64:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 65:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 66:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 67:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 68:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 69:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 70:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 71:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 73:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 74:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 75:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 76:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 77:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 78:
		{
			yyVAL.s = ".."
		}
	case 79:
		{
			yyVAL.s = "-"
		}
	case 80:
		{
			yyVAL.s = ""
		}
	case 81:
		{
			yyVAL.s = ""
		}
	case 82:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 83:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 84:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 85:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 86:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 87:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 88:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 89:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 90:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 91:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 92:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 93:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 94:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}}
		}
	case 95:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 96:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 97:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 98:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", []interface{}{yyS[yypt-1].s}}
		}
	case 99:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 100:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 101:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 112:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 113:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 114:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 115:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 116:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 117:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 118:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 132:
		{
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val)}}
			println("Attribute Acquired")
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 134:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 135:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 137:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, dCatchNodePtr}
		}
	case 138:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &strNode{STR, yyS[yypt-1].s}}
		}
	case 139:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 141:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 142:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, 0}
		}
	case 143:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-4].s, 0}
			yyVAL.node = &assignNode{ASSIGN, x, &strNode{STR, yyS[yypt-1].s}}
		}
	case 144:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].n}
		}
	case 145:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, 0}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 146:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 147:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{resMap(&x)}}
		}
	case 148:
		{
			yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
		}
	case 149:
		{
			yyVAL.s = ""
		}
	case 150:
		{
			x := []interface{}{yyS[yypt-1].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 151:
		{
			x := []interface{}{yyS[yypt-2].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 152:
		{
			yyVAL.arr = nil
		}
	case 153:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 154:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
