// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		if input[idx].(string) == "false" {
			x := map[int]interface{}{0: &boolNode{BOOL, false}}
			res = append(res, x)
		} else if input[idx].(string) == "true" {
			x := map[int]interface{}{0: &boolNode{BOOL, true}}
			res = append(res, x)
		} else if v, e := strconv.Atoi(input[idx].(string)); e == nil {
			x := map[int]interface{}{0: &numNode{NUM, v}}
			res = append(res, x)
		} else {
			x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
			res = append(res, x)
		}
	}
	return res
}

func resMap(x *string, ent string, isUpdate bool) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if isUpdate == true {
			res[resarr[i]] = resarr[i+1]
		} else if i+1 < len(resarr) {
			switch ent {
			case "sensor", "group":
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "type",
					"parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "room_template":
				switch resarr[i] {
				case "id", "slug", "orientation", "separators",
					"tiles", "colors", "aisles", "sizeWDHm",
					"technicalArea", "reservedArea":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "obj_template":
				switch resarr[i] {
				case "id", "slug", "description", "category",
					"slots", "colors", "components", "sizeWDHmm",
					"fbxModel":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			default:
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			}
		}
		i += 2
	}
	if len(attrs) > 0 {
		res["attributes"] = attrs
	}

	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

func auxGetNode(path string) string {
	stk := cmd.StrToStack(path)
	nd := cmd.FindNodeInTree(&cmd.State.TreeHierarchy, stk)
	if nd != nil {
		return cmd.EntityToString((*nd).Entity)
	} else {
		println("Error while finding object in path")
	}
	return ""
}

func resolveReference(ref string) string {
	/*Probably code to reference SymbolTable and return data*/
	idx := dynamicMap[ref]
	item := dynamicSymbolTable[idx]
	switch item.(type) {
	case bool:
		dCatchNodePtr = &boolNode{BOOL, item.(bool)}
		if item.(bool) == false {
			return "false"
		} else {
			return "true"
		}
	case string:
		dCatchNodePtr = &strNode{STR, item.(string)}
		return item.(string)
	case int:
		dCatchNodePtr = &numNode{NUM, item.(int)}
		return strconv.Itoa(item.(int))
	/*case map[string]interface{}:
	  //dCatchNodePtr=&symbolReferenceNode{REFERENCE, }
	  return item.(map[string]interface{})[subIdx].(string)*/
	case *commonNode:
		dCatchNodePtr = item
		args := ""
		for i := range item.(*commonNode).args {
			args += item.(*commonNode).args[i].(string)
		}
		return item.(*commonNode).val + " " + args
	default:
		println("Unable to deref your variable ")
		return ""
	}
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57447
	yyEofCode      = 57344
	TOK_AC         = 57357
	TOK_AISLE      = 57360
	TOK_AND        = 57426
	TOK_APOST      = 57446
	TOK_ATTRSPEC   = 57403
	TOK_BLDG       = 57350
	TOK_BOOL       = 57367
	TOK_CABINET    = 57358
	TOK_CD         = 57378
	TOK_CLR        = 57380
	TOK_CMDFLAG    = 57374
	TOK_CMDS       = 57412
	TOK_COL        = 57406
	TOK_COMMA      = 57410
	TOK_CORIDOR    = 57354
	TOK_CREATE     = 57368
	TOK_DELETE     = 57371
	TOK_DEREF      = 57415
	TOK_DEVICE     = 57353
	TOK_DIV        = 57431
	TOK_DO         = 57441
	TOK_DOC        = 57377
	TOK_DONE       = 57437
	TOK_DOT        = 57411
	TOK_ELIF       = 57440
	TOK_ELSE       = 57420
	TOK_EQUAL      = 57373
	TOK_EXIT       = 57376
	TOK_FI         = 57436
	TOK_FOR        = 57418
	TOK_GET        = 57369
	TOK_GREATER    = 57433
	TOK_GREP       = 57381
	TOK_GROUP      = 57355
	TOK_IF         = 57417
	TOK_IN         = 57427
	TOK_LBLOCK     = 57421
	TOK_LBRAC      = 57408
	TOK_LEN        = 57442
	TOK_LESS       = 57434
	TOK_LPAREN     = 57423
	TOK_LS         = 57382
	TOK_LSAC       = 57392
	TOK_LSAISLE    = 57388
	TOK_LSBLDG     = 57387
	TOK_LSCAB      = 57390
	TOK_LSCORRIDOR = 57395
	TOK_LSDEV      = 57398
	TOK_LSOG       = 57384
	TOK_LSPANEL    = 57393
	TOK_LSRACK     = 57397
	TOK_LSROOM     = 57396
	TOK_LSSENSOR   = 57391
	TOK_LSSITE     = 57386
	TOK_LSTEN      = 57385
	TOK_LSTILE     = 57389
	TOK_LSWALL     = 57394
	TOK_MOD        = 57438
	TOK_MULT       = 57432
	TOK_NOT        = 57430
	TOK_NUM        = 57346
	TOK_OBJ_TMPL   = 57364
	TOK_OCBLDG     = 57399
	TOK_OCCORIDOR  = 57445
	TOK_OCDEL      = 57366
	TOK_OCDEV      = 57400
	TOK_OCGROUP    = 57443
	TOK_OCRACK     = 57401
	TOK_OCROOM     = 57402
	TOK_OCSITE     = 57404
	TOK_OCTENANT   = 57405
	TOK_OCWALL     = 57444
	TOK_OR         = 57425
	TOK_PANEL      = 57359
	TOK_PLUS       = 57365
	TOK_PRNT       = 57428
	TOK_PWD        = 57379
	TOK_QUOT       = 57429
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57422
	TOK_RBRAC      = 57409
	TOK_ROOM       = 57351
	TOK_ROOM_TMPL  = 57363
	TOK_RPAREN     = 57424
	TOK_SEARCH     = 57372
	TOK_SELECT     = 57407
	TOK_SEMICOL    = 57416
	TOK_SENSOR     = 57362
	TOK_SITE       = 57349
	TOK_SLASH      = 57375
	TOK_TEMPLATE   = 57413
	TOK_TENANT     = 57348
	TOK_THEN       = 57435
	TOK_TILE       = 57361
	TOK_TREE       = 57383
	TOK_UNSET      = 57439
	TOK_UPDATE     = 57370
	TOK_VAR        = 57414
	TOK_WALL       = 57356
	TOK_WHILE      = 57419
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -324
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57424: 0,   // TOK_RPAREN (349x)
		57437: 1,   // TOK_DONE (346x)
		57409: 2,   // TOK_RBRAC (342x)
		57420: 3,   // TOK_ELSE (340x)
		57416: 4,   // TOK_SEMICOL (339x)
		57440: 5,   // TOK_ELIF (338x)
		57436: 6,   // TOK_FI (338x)
		57347: 7,   // TOK_WORD (313x)
		57366: 8,   // TOK_OCDEL (306x)
		57415: 9,   // TOK_DEREF (277x)
		57344: 10,  // $end (236x)
		57346: 11,  // TOK_NUM (215x)
		57365: 12,  // TOK_PLUS (210x)
		57367: 13,  // TOK_BOOL (199x)
		57411: 14,  // TOK_DOT (195x)
		57375: 15,  // TOK_SLASH (187x)
		57406: 16,  // TOK_COL (180x)
		57403: 17,  // TOK_ATTRSPEC (178x)
		57430: 18,  // TOK_NOT (174x)
		57373: 19,  // TOK_EQUAL (168x)
		57429: 20,  // TOK_QUOT (168x)
		57425: 21,  // TOK_OR (159x)
		57423: 22,  // TOK_LPAREN (149x)
		57422: 23,  // TOK_RBLOCK (145x)
		57426: 24,  // TOK_AND (144x)
		57442: 25,  // TOK_LEN (142x)
		57433: 26,  // TOK_GREATER (133x)
		57434: 27,  // TOK_LESS (133x)
		57438: 28,  // TOK_MOD (132x)
		57432: 29,  // TOK_MULT (132x)
		57378: 30,  // TOK_CD (126x)
		57382: 31,  // TOK_LS (126x)
		57387: 32,  // TOK_LSBLDG (126x)
		57398: 33,  // TOK_LSDEV (126x)
		57384: 34,  // TOK_LSOG (126x)
		57397: 35,  // TOK_LSRACK (126x)
		57396: 36,  // TOK_LSROOM (126x)
		57386: 37,  // TOK_LSSITE (126x)
		57385: 38,  // TOK_LSTEN (126x)
		57428: 39,  // TOK_PRNT (126x)
		57379: 40,  // TOK_PWD (126x)
		57383: 41,  // TOK_TREE (126x)
		57439: 42,  // TOK_UNSET (126x)
		57380: 43,  // TOK_CLR (125x)
		57368: 44,  // TOK_CREATE (125x)
		57371: 45,  // TOK_DELETE (125x)
		57377: 46,  // TOK_DOC (125x)
		57376: 47,  // TOK_EXIT (125x)
		57369: 48,  // TOK_GET (125x)
		57381: 49,  // TOK_GREP (125x)
		57392: 50,  // TOK_LSAC (125x)
		57388: 51,  // TOK_LSAISLE (125x)
		57390: 52,  // TOK_LSCAB (125x)
		57395: 53,  // TOK_LSCORRIDOR (125x)
		57393: 54,  // TOK_LSPANEL (125x)
		57391: 55,  // TOK_LSSENSOR (125x)
		57389: 56,  // TOK_LSTILE (125x)
		57394: 57,  // TOK_LSWALL (125x)
		57370: 58,  // TOK_UPDATE (125x)
		57410: 59,  // TOK_COMMA (124x)
		57407: 60,  // TOK_SELECT (124x)
		57418: 61,  // TOK_FOR (122x)
		57417: 62,  // TOK_IF (122x)
		57419: 63,  // TOK_WHILE (122x)
		57421: 64,  // TOK_LBLOCK (116x)
		57350: 65,  // TOK_BLDG (114x)
		57354: 66,  // TOK_CORIDOR (114x)
		57353: 67,  // TOK_DEVICE (114x)
		57355: 68,  // TOK_GROUP (114x)
		57352: 69,  // TOK_RACK (114x)
		57351: 70,  // TOK_ROOM (114x)
		57349: 71,  // TOK_SITE (114x)
		57348: 72,  // TOK_TENANT (114x)
		57357: 73,  // TOK_AC (112x)
		57360: 74,  // TOK_AISLE (112x)
		57358: 75,  // TOK_CABINET (112x)
		57412: 76,  // TOK_CMDS (112x)
		57408: 77,  // TOK_LBRAC (112x)
		57364: 78,  // TOK_OBJ_TMPL (112x)
		57359: 79,  // TOK_PANEL (112x)
		57363: 80,  // TOK_ROOM_TMPL (112x)
		57362: 81,  // TOK_SENSOR (112x)
		57361: 82,  // TOK_TILE (112x)
		57441: 83,  // TOK_DO (111x)
		57399: 84,  // TOK_OCBLDG (111x)
		57445: 85,  // TOK_OCCORIDOR (111x)
		57400: 86,  // TOK_OCDEV (111x)
		57443: 87,  // TOK_OCGROUP (111x)
		57401: 88,  // TOK_OCRACK (111x)
		57402: 89,  // TOK_OCROOM (111x)
		57404: 90,  // TOK_OCSITE (111x)
		57405: 91,  // TOK_OCTENANT (111x)
		57444: 92,  // TOK_OCWALL (111x)
		57413: 93,  // TOK_TEMPLATE (111x)
		57435: 94,  // TOK_THEN (111x)
		57414: 95,  // TOK_VAR (111x)
		57356: 96,  // TOK_WALL (111x)
		57427: 97,  // TOK_IN (110x)
		57446: 98,  // TOK_APOST (109x)
		57374: 99,  // TOK_CMDFLAG (109x)
		57372: 100, // TOK_SEARCH (109x)
		57477: 101, // P1 (62x)
		57476: 102, // P (59x)
		57482: 103, // WORDORNUM (49x)
		57483: 104, // factor (33x)
		57489: 105, // unary (32x)
		57488: 106, // term (26x)
		57484: 107, // nex (24x)
		57431: 108, // TOK_DIV (23x)
		57479: 109, // REL (20x)
		57454: 110, // EQAL (18x)
		57459: 111, // JOIN (17x)
		57449: 112, // BASH (16x)
		57455: 113, // EXPR (16x)
		57478: 114, // Q (16x)
		57460: 115, // K (15x)
		57463: 116, // NT_CREATE (15x)
		57464: 117, // NT_DEL (15x)
		57465: 118, // NT_GET (15x)
		57466: 119, // NT_UPDATE (15x)
		57467: 120, // OCCHOOSE (14x)
		57469: 121, // OCDEL (14x)
		57471: 122, // OCGET (14x)
		57473: 123, // OCSEL (14x)
		57474: 124, // OCUPDATE (14x)
		57457: 125, // FUNC (13x)
		57470: 126, // OCDOT (13x)
		57472: 127, // OCLISYNTX (13x)
		57487: 128, // stmnt (13x)
		57451: 129, // CTRL (12x)
		57475: 130, // OPEN_STMT (12x)
		57485: 131, // st2 (12x)
		57448: 132, // ANYTOKEN (6x)
		57456: 133, // F (6x)
		57480: 134, // STRARG (6x)
		57450: 135, // CDORFG (3x)
		57452: 136, // E (3x)
		57481: 137, // WNARG (3x)
		57453: 138, // EIF (2x)
		57458: 139, // GETOBJS (2x)
		57461: 140, // NODEACC (2x)
		57462: 141, // NODEGETTER (2x)
		57468: 142, // OCCR (2x)
		57486: 143, // start (1x)
		57447: 144, // $default (0x)
		57345: 145, // error (0x)
	}

	yySymNames = []string{
		"TOK_RPAREN",
		"TOK_DONE",
		"TOK_RBRAC",
		"TOK_ELSE",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"TOK_WORD",
		"TOK_OCDEL",
		"TOK_DEREF",
		"$end",
		"TOK_NUM",
		"TOK_PLUS",
		"TOK_BOOL",
		"TOK_DOT",
		"TOK_SLASH",
		"TOK_COL",
		"TOK_ATTRSPEC",
		"TOK_NOT",
		"TOK_EQUAL",
		"TOK_QUOT",
		"TOK_OR",
		"TOK_LPAREN",
		"TOK_RBLOCK",
		"TOK_AND",
		"TOK_LEN",
		"TOK_GREATER",
		"TOK_LESS",
		"TOK_MOD",
		"TOK_MULT",
		"TOK_CD",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_TREE",
		"TOK_UNSET",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_LSAC",
		"TOK_LSAISLE",
		"TOK_LSCAB",
		"TOK_LSCORRIDOR",
		"TOK_LSPANEL",
		"TOK_LSSENSOR",
		"TOK_LSTILE",
		"TOK_LSWALL",
		"TOK_UPDATE",
		"TOK_COMMA",
		"TOK_SELECT",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"TOK_LBLOCK",
		"TOK_BLDG",
		"TOK_CORIDOR",
		"TOK_DEVICE",
		"TOK_GROUP",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"TOK_AC",
		"TOK_AISLE",
		"TOK_CABINET",
		"TOK_CMDS",
		"TOK_LBRAC",
		"TOK_OBJ_TMPL",
		"TOK_PANEL",
		"TOK_ROOM_TMPL",
		"TOK_SENSOR",
		"TOK_TILE",
		"TOK_DO",
		"TOK_OCBLDG",
		"TOK_OCCORIDOR",
		"TOK_OCDEV",
		"TOK_OCGROUP",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_OCWALL",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"TOK_WALL",
		"TOK_IN",
		"TOK_APOST",
		"TOK_CMDFLAG",
		"TOK_SEARCH",
		"P1",
		"P",
		"WORDORNUM",
		"factor",
		"unary",
		"term",
		"nex",
		"TOK_DIV",
		"REL",
		"EQAL",
		"JOIN",
		"BASH",
		"EXPR",
		"Q",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCGET",
		"OCSEL",
		"OCUPDATE",
		"FUNC",
		"OCDOT",
		"OCLISYNTX",
		"stmnt",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"ANYTOKEN",
		"F",
		"STRARG",
		"CDORFG",
		"E",
		"WNARG",
		"EIF",
		"GETOBJS",
		"NODEACC",
		"NODEGETTER",
		"OCCR",
		"start",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {143, 1},
		2:   {131, 1},
		3:   {131, 3},
		4:   {131, 1},
		5:   {128, 1},
		6:   {128, 1},
		7:   {128, 1},
		8:   {128, 1},
		9:   {128, 0},
		10:  {129, 1},
		11:  {130, 7},
		12:  {130, 10},
		13:  {130, 6},
		14:  {130, 15},
		15:  {130, 7},
		16:  {130, 12},
		17:  {130, 10},
		18:  {130, 10},
		19:  {138, 7},
		20:  {138, 0},
		21:  {113, 3},
		22:  {113, 1},
		23:  {111, 3},
		24:  {111, 1},
		25:  {110, 4},
		26:  {110, 4},
		27:  {110, 1},
		28:  {109, 3},
		29:  {109, 4},
		30:  {109, 4},
		31:  {109, 3},
		32:  {109, 1},
		33:  {107, 3},
		34:  {107, 3},
		35:  {107, 1},
		36:  {106, 3},
		37:  {106, 3},
		38:  {106, 3},
		39:  {106, 1},
		40:  {105, 2},
		41:  {105, 2},
		42:  {105, 1},
		43:  {104, 3},
		44:  {104, 1},
		45:  {104, 2},
		46:  {104, 5},
		47:  {104, 4},
		48:  {104, 1},
		49:  {104, 3},
		50:  {104, 1},
		51:  {115, 1},
		52:  {115, 1},
		53:  {115, 1},
		54:  {115, 1},
		55:  {116, 5},
		56:  {118, 2},
		57:  {118, 3},
		58:  {119, 4},
		59:  {117, 2},
		60:  {136, 1},
		61:  {136, 1},
		62:  {136, 1},
		63:  {136, 1},
		64:  {136, 1},
		65:  {136, 1},
		66:  {136, 1},
		67:  {136, 1},
		68:  {136, 1},
		69:  {136, 1},
		70:  {136, 1},
		71:  {136, 1},
		72:  {136, 1},
		73:  {136, 1},
		74:  {136, 1},
		75:  {136, 1},
		76:  {103, 1},
		77:  {103, 1},
		78:  {103, 4},
		79:  {103, 4},
		80:  {103, 4},
		81:  {103, 4},
		82:  {103, 1},
		83:  {103, 2},
		84:  {133, 4},
		85:  {133, 3},
		86:  {133, 6},
		87:  {133, 5},
		88:  {133, 3},
		89:  {133, 4},
		90:  {102, 1},
		91:  {102, 2},
		92:  {101, 3},
		93:  {101, 1},
		94:  {101, 4},
		95:  {101, 3},
		96:  {101, 2},
		97:  {101, 1},
		98:  {101, 2},
		99:  {101, 0},
		100: {114, 2},
		101: {114, 2},
		102: {114, 2},
		103: {114, 2},
		104: {114, 2},
		105: {114, 2},
		106: {114, 2},
		107: {114, 2},
		108: {114, 2},
		109: {114, 2},
		110: {114, 2},
		111: {114, 2},
		112: {114, 2},
		113: {114, 2},
		114: {114, 2},
		115: {114, 2},
		116: {114, 2},
		117: {114, 3},
		118: {114, 4},
		119: {114, 1},
		120: {112, 1},
		121: {112, 1},
		122: {112, 4},
		123: {112, 1},
		124: {112, 1},
		125: {112, 1},
		126: {112, 1},
		127: {112, 2},
		128: {112, 2},
		129: {112, 2},
		130: {112, 2},
		131: {112, 2},
		132: {112, 2},
		133: {112, 2},
		134: {112, 2},
		135: {112, 2},
		136: {112, 2},
		137: {112, 2},
		138: {112, 2},
		139: {112, 2},
		140: {112, 2},
		141: {112, 2},
		142: {112, 2},
		143: {112, 2},
		144: {112, 2},
		145: {112, 2},
		146: {112, 2},
		147: {112, 2},
		148: {112, 2},
		149: {112, 2},
		150: {112, 2},
		151: {112, 3},
		152: {112, 3},
		153: {112, 3},
		154: {112, 2},
		155: {112, 2},
		156: {127, 2},
		157: {127, 1},
		158: {127, 1},
		159: {127, 1},
		160: {127, 1},
		161: {127, 1},
		162: {127, 1},
		163: {142, 5},
		164: {142, 5},
		165: {142, 5},
		166: {142, 5},
		167: {142, 7},
		168: {142, 7},
		169: {142, 7},
		170: {142, 7},
		171: {142, 7},
		172: {142, 7},
		173: {142, 7},
		174: {142, 7},
		175: {142, 11},
		176: {142, 11},
		177: {142, 6},
		178: {142, 6},
		179: {142, 9},
		180: {142, 9},
		181: {121, 2},
		182: {124, 5},
		183: {122, 2},
		184: {139, 3},
		185: {139, 1},
		186: {120, 4},
		187: {126, 8},
		188: {126, 9},
		189: {126, 9},
		190: {126, 10},
		191: {126, 9},
		192: {126, 9},
		193: {126, 9},
		194: {126, 9},
		195: {126, 9},
		196: {126, 6},
		197: {126, 4},
		198: {126, 4},
		199: {126, 6},
		200: {126, 6},
		201: {126, 2},
		202: {126, 5},
		203: {126, 7},
		204: {126, 8},
		205: {126, 4},
		206: {123, 1},
		207: {123, 5},
		208: {134, 2},
		209: {134, 2},
		210: {134, 0},
		211: {137, 2},
		212: {137, 4},
		213: {137, 0},
		214: {125, 6},
		215: {125, 1},
		216: {141, 2},
		217: {141, 0},
		218: {140, 1},
		219: {140, 1},
		220: {140, 4},
		221: {140, 4},
		222: {140, 4},
		223: {140, 4},
		224: {140, 1},
		225: {140, 2},
		226: {140, 5},
		227: {135, 3},
		228: {135, 0},
		229: {132, 1},
		230: {132, 1},
		231: {132, 1},
		232: {132, 1},
		233: {132, 1},
		234: {132, 1},
		235: {132, 1},
		236: {132, 1},
		237: {132, 1},
		238: {132, 1},
		239: {132, 1},
		240: {132, 1},
		241: {132, 1},
		242: {132, 1},
		243: {132, 1},
		244: {132, 1},
		245: {132, 1},
		246: {132, 1},
		247: {132, 1},
		248: {132, 1},
		249: {132, 1},
		250: {132, 1},
		251: {132, 1},
		252: {132, 1},
		253: {132, 1},
		254: {132, 1},
		255: {132, 1},
		256: {132, 1},
		257: {132, 1},
		258: {132, 1},
		259: {132, 1},
		260: {132, 1},
		261: {132, 1},
		262: {132, 1},
		263: {132, 1},
		264: {132, 1},
		265: {132, 1},
		266: {132, 1},
		267: {132, 1},
		268: {132, 1},
		269: {132, 1},
		270: {132, 1},
		271: {132, 1},
		272: {132, 1},
		273: {132, 1},
		274: {132, 1},
		275: {132, 1},
		276: {132, 1},
		277: {132, 1},
		278: {132, 1},
		279: {132, 1},
		280: {132, 1},
		281: {132, 1},
		282: {132, 1},
		283: {132, 1},
		284: {132, 1},
		285: {132, 1},
		286: {132, 1},
		287: {132, 1},
		288: {132, 1},
		289: {132, 1},
		290: {132, 1},
		291: {132, 1},
		292: {132, 1},
		293: {132, 1},
		294: {132, 1},
		295: {132, 1},
		296: {132, 1},
		297: {132, 1},
		298: {132, 1},
		299: {132, 1},
		300: {132, 1},
		301: {132, 1},
		302: {132, 1},
		303: {132, 1},
		304: {132, 1},
		305: {132, 1},
		306: {132, 1},
		307: {132, 1},
		308: {132, 1},
		309: {132, 1},
		310: {132, 1},
		311: {132, 1},
		312: {132, 1},
		313: {132, 1},
		314: {132, 1},
		315: {132, 1},
		316: {132, 1},
		317: {132, 1},
		318: {132, 1},
		319: {132, 1},
		320: {132, 1},
		321: {132, 1},
		322: {132, 1},
		323: {132, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [641][]uint16{
		// 0
		{4: 315, 7: 347, 349, 350, 315, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 326, 143: 325},
		{10: 324},
		{10: 323},
		{1: 322, 322, 322, 963, 322, 322, 10: 322},
		{1: 320, 320, 320, 5: 320, 320, 10: 320},
		// 5
		{319, 319, 319, 319, 319, 319, 319, 10: 319},
		{318, 318, 318, 318, 318, 318, 318, 10: 318},
		{317, 317, 317, 317, 317, 317, 317, 10: 317},
		{316, 316, 316, 316, 316, 316, 316, 10: 316},
		{1: 314, 314, 314, 5: 314, 314, 10: 314},
		// 10
		{64: 946},
		{22: 941},
		{7: 901, 22: 900},
		{273, 273, 273, 273, 273, 273, 273, 10: 273},
		{272, 272, 272, 272, 272, 272, 272, 10: 272},
		// 15
		{271, 271, 271, 271, 271, 271, 271, 10: 271},
		{270, 270, 270, 270, 270, 270, 270, 10: 270},
		{65: 871, 881, 874, 882, 873, 872, 870, 869, 875, 878, 877, 78: 883, 876, 884, 880, 879, 136: 896},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 65: 871, 881, 874, 882, 873, 872, 870, 869, 875, 878, 877, 78: 883, 876, 884, 880, 879, 101: 345, 893, 136: 894},
		{7: 562, 564, 565, 14: 563, 346, 225, 101: 345, 864},
		// 20
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 863},
		{234, 234, 234, 234, 234, 234, 234, 10: 234, 234, 16: 234, 234, 59: 234},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 225, 14: 563, 16: 225, 225, 59: 225, 101: 862},
		{109, 109, 109, 109, 109, 109, 109, 10: 109, 14: 578, 577, 231, 22: 857},
		{14: 574, 76: 808, 93: 809, 95: 807},
		// 25
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 227, 101: 345, 806},
		{7: 795},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 794},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 793},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 792},
		// 30
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 791},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 790},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 789},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 788},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 787},
		// 35
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 786},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 785},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 784},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 783},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 782},
		// 40
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 781},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 780},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 779},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 225, 14: 563, 346, 101: 345, 777},
		{8: 774},
		// 45
		{205, 205, 205, 205, 205, 205, 205, 10: 205},
		{204, 204, 204, 204, 204, 204, 204, 10: 204},
		{203, 203, 203, 203, 203, 203, 203, 10: 203},
		{20: 749},
		{201, 201, 201, 201, 201, 201, 201, 10: 201},
		// 50
		{200, 200, 200, 200, 200, 200, 200, 10: 200},
		{199, 199, 199, 199, 199, 199, 199, 10: 199},
		{198, 198, 198, 198, 198, 198, 198, 727, 742, 10: 198, 12: 744, 14: 743, 19: 745, 30: 722, 719, 738, 741, 735, 740, 739, 737, 736, 721, 720, 728, 732, 44: 723, 726, 48: 724, 58: 725, 60: 733, 731, 729, 730, 76: 734},
		{65: 591, 599, 597, 601, 595, 593, 589, 587, 84: 590, 598, 596, 600, 594, 592, 588, 586, 602, 96: 603, 142: 585},
		{167, 167, 167, 167, 167, 167, 167, 10: 167},
		// 55
		{166, 166, 166, 166, 166, 166, 166, 10: 166},
		{165, 165, 165, 165, 165, 165, 165, 10: 165},
		{164, 164, 164, 164, 164, 164, 164, 10: 164},
		{163, 163, 163, 163, 163, 163, 163, 10: 163},
		{162, 162, 162, 162, 162, 162, 162, 10: 162},
		// 60
		{16: 581},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 77: 567, 101: 345, 566},
		{118, 118, 118, 118, 118, 118, 118, 10: 118, 14: 387},
		{7: 388},
		{19: 389},
		// 65
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 390},
		{117, 117, 117, 117, 117, 117, 117, 10: 117, 21: 529},
		{302, 302, 302, 302, 302, 302, 302, 10: 302, 21: 302, 23: 302, 532},
		{300, 300, 300, 300, 300, 300, 300, 10: 300, 18: 535, 534, 21: 300, 23: 300, 300},
		{297, 297, 297, 297, 297, 297, 297, 10: 297, 18: 297, 297, 21: 297, 23: 297, 297},
		// 70
		{292, 292, 292, 292, 292, 292, 292, 8: 553, 10: 292, 12: 552, 18: 292, 292, 21: 292, 23: 292, 292, 26: 551, 550},
		{289, 289, 289, 289, 289, 289, 289, 8: 289, 10: 289, 12: 289, 18: 289, 289, 21: 289, 23: 289, 289, 26: 289, 289, 546, 544, 108: 545},
		{285, 285, 285, 285, 285, 285, 285, 8: 285, 10: 285, 12: 285, 18: 285, 285, 21: 285, 23: 285, 285, 26: 285, 285, 285, 285, 108: 285},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 543},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 542},
		// 75
		{282, 282, 282, 282, 282, 282, 282, 8: 282, 10: 282, 12: 282, 18: 282, 282, 21: 282, 23: 282, 282, 26: 282, 282, 282, 282, 108: 282},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 540},
		{280, 280, 280, 280, 280, 280, 280, 8: 280, 10: 280, 12: 280, 18: 280, 280, 21: 280, 23: 280, 280, 26: 280, 280, 280, 280, 108: 280},
		{7: 526},
		{22: 523},
		// 80
		{276, 276, 276, 276, 276, 276, 276, 8: 276, 10: 276, 12: 276, 18: 276, 276, 21: 276, 23: 276, 276, 26: 276, 276, 276, 276, 108: 276},
		{489, 500, 474, 485, 481, 503, 499, 408, 411, 413, 11: 409, 410, 412, 476, 440, 471, 468, 494, 438, 114, 490, 488, 487, 491, 505, 496, 497, 501, 495, 443, 447, 452, 463, 449, 462, 460, 451, 450, 493, 444, 448, 502, 445, 433, 436, 442, 441, 434, 446, 456, 457, 454, 461, 458, 455, 453, 459, 435, 475, 472, 483, 482, 484, 486, 418, 422, 421, 423, 420, 419, 417, 416, 425, 428, 426, 477, 473, 432, 427, 431, 430, 429, 504, 464, 508, 465, 506, 466, 467, 469, 470, 507, 478, 498, 479, 424, 492, 480, 439, 437, 103: 414, 132: 415, 134: 407},
		{274, 274, 274, 274, 274, 274, 274, 8: 274, 10: 274, 12: 274, 18: 274, 274, 21: 274, 23: 274, 274, 26: 274, 274, 274, 274, 108: 274},
		{20: 522},
		{},
		// 85
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{78, 78, 78, 78, 78, 78, 78, 517, 78, 78, 11: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 77, 77, 77, 77, 512, 77, 77, 11: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{},
		{7: 511},
		// 90
		{489, 500, 474, 485, 481, 503, 499, 408, 411, 413, 11: 409, 410, 412, 476, 440, 471, 468, 494, 438, 114, 490, 488, 487, 491, 505, 496, 497, 501, 495, 443, 447, 452, 463, 449, 462, 460, 451, 450, 493, 444, 448, 502, 445, 433, 436, 442, 441, 434, 446, 456, 457, 454, 461, 458, 455, 453, 459, 435, 475, 472, 483, 482, 484, 486, 418, 422, 421, 423, 420, 419, 417, 416, 425, 428, 426, 477, 473, 432, 427, 431, 430, 429, 504, 464, 508, 465, 506, 466, 467, 469, 470, 507, 478, 498, 479, 424, 492, 480, 439, 437, 103: 414, 132: 415, 134: 510},
		{489, 500, 474, 485, 481, 503, 499, 408, 411, 413, 11: 409, 410, 412, 476, 440, 471, 468, 494, 438, 114, 490, 488, 487, 491, 505, 496, 497, 501, 495, 443, 447, 452, 463, 449, 462, 460, 451, 450, 493, 444, 448, 502, 445, 433, 436, 442, 441, 434, 446, 456, 457, 454, 461, 458, 455, 453, 459, 435, 475, 472, 483, 482, 484, 486, 418, 422, 421, 423, 420, 419, 417, 416, 425, 428, 426, 477, 473, 432, 427, 431, 430, 429, 504, 464, 508, 465, 506, 466, 467, 469, 470, 507, 478, 498, 479, 424, 492, 480, 439, 437, 103: 414, 132: 415, 134: 509},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 11: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 11: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 11: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		// 95
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 11: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 11: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 11: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 11: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 11: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		// 100
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 11: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 11: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 11: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 11: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 11: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		// 105
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 11: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 11: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 11: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 11: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 11: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		// 110
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 11: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 11: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 11: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 11: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 11: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		// 115
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 11: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 11: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 11: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 11: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 11: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		// 120
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 11: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 11: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 11: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 11: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		// 125
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 11: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 11: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 11: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 130
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 11: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 11: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 11: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 11: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 11: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		// 135
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 11: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 11: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 11: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 11: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 11: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		// 140
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 11: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 11: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 11: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 11: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 11: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 145
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 11: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 11: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 11: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 11: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 11: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 150
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 11: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 11: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 11: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 11: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		// 155
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 11: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 11: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 11: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 11: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 11: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 160
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 11: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 11: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 11: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 11: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		// 165
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 11: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 11: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 11: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 11: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		// 170
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 11: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 175
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 11: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 180
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 11: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		// 185
		{20: 115},
		{20: 116},
		{},
		{8: 513, 12: 514},
		{7: 516},
		// 190
		{7: 515},
		{},
		{},
		{8: 519, 12: 518},
		{7: 521},
		// 195
		{7: 520},
		{},
		{},
		{275, 275, 275, 275, 275, 275, 275, 8: 275, 10: 275, 12: 275, 18: 275, 275, 21: 275, 23: 275, 275, 26: 275, 275, 275, 275, 108: 275},
		{7: 524},
		// 200
		{525},
		{277, 277, 277, 277, 277, 277, 277, 8: 277, 10: 277, 12: 277, 18: 277, 277, 21: 277, 23: 277, 277, 26: 277, 277, 277, 277, 108: 277},
		{279, 279, 279, 279, 279, 279, 279, 8: 279, 10: 279, 12: 279, 18: 279, 279, 21: 279, 23: 279, 279, 26: 279, 279, 279, 279, 64: 527, 108: 279},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 528},
		{21: 529, 23: 530},
		// 205
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 531},
		{278, 278, 278, 278, 278, 278, 278, 8: 278, 10: 278, 12: 278, 18: 278, 278, 21: 278, 23: 278, 278, 26: 278, 278, 278, 278, 108: 278},
		{303, 303, 303, 303, 303, 303, 303, 10: 303, 21: 303, 23: 303, 532},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 533},
		{301, 301, 301, 301, 301, 301, 301, 10: 301, 18: 535, 534, 21: 301, 23: 301, 301},
		// 210
		{19: 538},
		{19: 536},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 537},
		{298, 298, 298, 298, 298, 298, 298, 10: 298, 18: 298, 298, 21: 298, 23: 298, 298},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 539},
		// 215
		{299, 299, 299, 299, 299, 299, 299, 10: 299, 18: 299, 299, 21: 299, 23: 299, 299},
		{541, 21: 529},
		{281, 281, 281, 281, 281, 281, 281, 8: 281, 10: 281, 12: 281, 18: 281, 281, 21: 281, 23: 281, 281, 26: 281, 281, 281, 281, 108: 281},
		{283, 283, 283, 283, 283, 283, 283, 8: 283, 10: 283, 12: 283, 18: 283, 283, 21: 283, 23: 283, 283, 26: 283, 283, 283, 283, 108: 283},
		{284, 284, 284, 284, 284, 284, 284, 8: 284, 10: 284, 12: 284, 18: 284, 284, 21: 284, 23: 284, 284, 26: 284, 284, 284, 284, 108: 284},
		// 220
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 549},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 548},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 547},
		{286, 286, 286, 286, 286, 286, 286, 8: 286, 10: 286, 12: 286, 18: 286, 286, 21: 286, 23: 286, 286, 26: 286, 286, 286, 286, 108: 286},
		{287, 287, 287, 287, 287, 287, 287, 8: 287, 10: 287, 12: 287, 18: 287, 287, 21: 287, 23: 287, 287, 26: 287, 287, 287, 287, 108: 287},
		// 225
		{288, 288, 288, 288, 288, 288, 288, 8: 288, 10: 288, 12: 288, 18: 288, 288, 21: 288, 23: 288, 288, 26: 288, 288, 288, 288, 108: 288},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 560, 405, 22: 400, 25: 403, 104: 399, 396, 395, 559},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 556, 405, 22: 400, 25: 403, 104: 399, 396, 395, 557},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 555},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 554},
		// 230
		{290, 290, 290, 290, 290, 290, 290, 8: 290, 10: 290, 12: 290, 18: 290, 290, 21: 290, 23: 290, 290, 26: 290, 290, 546, 544, 108: 545},
		{291, 291, 291, 291, 291, 291, 291, 8: 291, 10: 291, 12: 291, 18: 291, 291, 21: 291, 23: 291, 291, 26: 291, 291, 546, 544, 108: 545},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 558},
		{293, 293, 293, 293, 293, 293, 293, 8: 553, 10: 293, 12: 552, 18: 293, 293, 21: 293, 23: 293, 293},
		{294, 294, 294, 294, 294, 294, 294, 8: 553, 10: 294, 12: 552, 18: 294, 294, 21: 294, 23: 294, 294},
		// 235
		{296, 296, 296, 296, 296, 296, 296, 8: 553, 10: 296, 12: 552, 18: 296, 296, 21: 296, 23: 296, 296},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 561},
		{295, 295, 295, 295, 295, 295, 295, 8: 553, 10: 295, 12: 552, 18: 295, 295, 21: 295, 23: 295, 295},
		{231, 231, 231, 231, 231, 231, 231, 10: 231, 231, 14: 578, 577, 231, 231, 59: 231},
		{14: 574},
		// 240
		{227, 227, 227, 227, 227, 227, 227, 10: 227, 227, 16: 227, 227, 59: 227},
		{7: 573},
		{141, 141, 141, 141, 141, 141, 141, 10: 141},
		{2: 225, 7: 562, 564, 565, 14: 563, 346, 59: 225, 101: 345, 568, 139: 569},
		{2: 139, 59: 571},
		// 245
		{2: 570},
		{138, 138, 138, 138, 138, 138, 138, 10: 138},
		{2: 225, 7: 562, 564, 565, 14: 563, 346, 59: 225, 101: 345, 568, 139: 572},
		{2: 140},
		{226, 226, 226, 226, 226, 226, 226, 10: 226, 226, 16: 226, 226, 59: 226},
		// 250
		{228, 228, 228, 228, 228, 228, 228, 10: 228, 228, 15: 575, 228, 228, 59: 228},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 225, 14: 563, 16: 225, 225, 59: 225, 101: 576},
		{230, 230, 230, 230, 230, 230, 230, 10: 230, 230, 16: 230, 230, 59: 230},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 225, 14: 563, 16: 225, 225, 59: 225, 101: 580},
		{7: 579},
		// 255
		{229, 229, 229, 229, 229, 229, 229, 10: 229, 229, 16: 229, 229, 59: 229},
		{232, 232, 232, 232, 232, 232, 232, 10: 232, 232, 16: 232, 232, 59: 232},
		{7: 582},
		{19: 583},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 584},
		// 260
		{142, 142, 142, 142, 142, 142, 142, 10: 142, 21: 529},
		{168, 168, 168, 168, 168, 168, 168, 10: 168},
		{16: 715},
		{16: 711},
		{16: 707},
		// 265
		{16: 703},
		{16: 697},
		{16: 691},
		{16: 685},
		{16: 679},
		// 270
		{16: 673},
		{16: 667},
		{16: 661},
		{16: 655},
		{16: 645},
		// 275
		{16: 635},
		{16: 630},
		{16: 622},
		{16: 614},
		{16: 604},
		// 280
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 605},
		{17: 606},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 609},
		{7: 517},
		{7: 512},
		// 285
		{17: 610},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 611},
		{17: 612},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 613},
		{144, 144, 144, 144, 144, 144, 144, 10: 144},
		// 290
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 615},
		{17: 616},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 617},
		{17: 618},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 619},
		// 295
		{17: 620},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 621},
		{145, 145, 145, 145, 145, 145, 145, 10: 145},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 623},
		{17: 624},
		// 300
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 625},
		{96, 96, 96, 96, 96, 96, 96, 10: 96, 17: 627, 135: 626},
		{146, 146, 146, 146, 146, 146, 146, 10: 146},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 628},
		{96, 96, 96, 96, 96, 96, 96, 10: 96, 17: 627, 135: 629},
		// 305
		{97, 97, 97, 97, 97, 97, 97, 10: 97},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 631},
		{17: 632},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 633},
		{96, 96, 96, 96, 96, 96, 96, 10: 96, 17: 627, 135: 634},
		// 310
		{147, 147, 147, 147, 147, 147, 147, 10: 147},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 636},
		{17: 637},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 638},
		{17: 639},
		// 315
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 640},
		{17: 641},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 642},
		{17: 643},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 644},
		// 320
		{148, 148, 148, 148, 148, 148, 148, 10: 148},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 646},
		{17: 647},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 648},
		{17: 649},
		// 325
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 650},
		{17: 651},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 652},
		{17: 653},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 654},
		// 330
		{149, 149, 149, 149, 149, 149, 149, 10: 149},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 656},
		{17: 657},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 658},
		{17: 659},
		// 335
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 660},
		{150, 150, 150, 150, 150, 150, 150, 10: 150},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 662},
		{17: 663},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 664},
		// 340
		{17: 665},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 666},
		{151, 151, 151, 151, 151, 151, 151, 10: 151},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 668},
		{17: 669},
		// 345
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 670},
		{17: 671},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 672},
		{152, 152, 152, 152, 152, 152, 152, 10: 152},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 674},
		// 350
		{17: 675},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 676},
		{17: 677},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 678},
		{153, 153, 153, 153, 153, 153, 153, 10: 153},
		// 355
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 680},
		{17: 681},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 682},
		{17: 683},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 684},
		// 360
		{154, 154, 154, 154, 154, 154, 154, 10: 154},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 686},
		{17: 687},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 688},
		{17: 689},
		// 365
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 690},
		{155, 155, 155, 155, 155, 155, 155, 10: 155},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 692},
		{17: 693},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 694},
		// 370
		{17: 695},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 696},
		{156, 156, 156, 156, 156, 156, 156, 10: 156},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 698},
		{17: 699},
		// 375
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 700},
		{17: 701},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 702},
		{157, 157, 157, 157, 157, 157, 157, 10: 157},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 704},
		// 380
		{17: 705},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 706},
		{158, 158, 158, 158, 158, 158, 158, 10: 158},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 708},
		{17: 709},
		// 385
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 710},
		{159, 159, 159, 159, 159, 159, 159, 10: 159},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 712},
		{17: 713},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 714},
		// 390
		{160, 160, 160, 160, 160, 160, 160, 10: 160},
		{7: 562, 564, 565, 14: 563, 346, 17: 225, 101: 345, 716},
		{17: 717},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 718},
		{161, 161, 161, 161, 161, 161, 161, 10: 161},
		// 395
		{197, 197, 197, 197, 197, 197, 197, 10: 197},
		{196, 196, 196, 196, 196, 196, 196, 10: 196},
		{195, 195, 195, 195, 195, 195, 195, 10: 195},
		{194, 194, 194, 194, 194, 194, 194, 10: 194},
		{193, 193, 193, 193, 193, 193, 193, 10: 193},
		// 400
		{192, 192, 192, 192, 192, 192, 192, 10: 192},
		{191, 191, 191, 191, 191, 191, 191, 10: 191},
		{190, 190, 190, 190, 190, 190, 190, 10: 190},
		{189, 189, 189, 189, 189, 189, 189, 10: 189},
		{188, 188, 188, 188, 188, 188, 188, 10: 188},
		// 405
		{187, 187, 187, 187, 187, 187, 187, 10: 187},
		{186, 186, 186, 186, 186, 186, 186, 10: 186},
		{185, 185, 185, 185, 185, 185, 185, 10: 185},
		{184, 184, 184, 184, 184, 184, 184, 10: 184},
		{183, 183, 183, 183, 183, 183, 183, 10: 183},
		// 410
		{182, 182, 182, 182, 182, 182, 182, 10: 182},
		{181, 181, 181, 181, 181, 181, 181, 10: 181},
		{180, 180, 180, 180, 180, 180, 180, 10: 180},
		{179, 179, 179, 179, 179, 179, 179, 10: 179},
		{178, 178, 178, 178, 178, 178, 178, 10: 178},
		// 415
		{177, 177, 177, 177, 177, 177, 177, 10: 177},
		{176, 176, 176, 176, 176, 176, 176, 10: 176},
		{175, 175, 175, 175, 175, 175, 175, 10: 175},
		{174, 174, 174, 174, 174, 174, 174, 10: 174},
		{76: 747, 93: 746, 95: 748},
		// 420
		{170, 170, 170, 170, 170, 170, 170, 10: 170},
		{169, 169, 169, 169, 169, 169, 169, 10: 169},
		{173, 173, 173, 173, 173, 173, 173, 10: 173},
		{172, 172, 172, 172, 172, 172, 172, 10: 172},
		{171, 171, 171, 171, 171, 171, 171, 10: 171},
		// 425
		{7: 752, 755, 757, 11: 753, 754, 756, 20: 107, 140: 751, 750},
		{20: 773},
		{7: 752, 755, 757, 11: 753, 754, 756, 20: 107, 140: 751, 772},
		{7: 106, 106, 106, 11: 106, 106, 106, 20: 106},
		{7: 105, 105, 105, 11: 105, 105, 105, 20: 105},
		// 430
		{7: 767},
		{7: 762},
		{7: 100, 100, 100, 11: 100, 100, 100, 20: 100},
		{7: 758},
		{7: 99, 99, 99, 11: 99, 99, 99, 20: 99, 64: 759},
		// 435
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 760},
		{21: 529, 23: 761},
		{7: 98, 98, 98, 11: 98, 98, 98, 20: 98},
		{8: 763, 12: 764},
		{7: 766},
		// 440
		{7: 765},
		{7: 101, 101, 101, 11: 101, 101, 101, 20: 101},
		{7: 102, 102, 102, 11: 102, 102, 102, 20: 102},
		{8: 769, 12: 768},
		{7: 771},
		// 445
		{7: 770},
		{7: 103, 103, 103, 11: 103, 103, 103, 20: 103},
		{7: 104, 104, 104, 11: 104, 104, 104, 20: 104},
		{20: 108},
		{202, 202, 202, 202, 202, 202, 202, 10: 202},
		// 450
		{7: 775},
		{7: 776},
		{206, 206, 206, 206, 206, 206, 206, 10: 206},
		{208, 208, 208, 208, 208, 208, 208, 10: 208, 778},
		{207, 207, 207, 207, 207, 207, 207, 10: 207},
		// 455
		{209, 209, 209, 209, 209, 209, 209, 10: 209},
		{210, 210, 210, 210, 210, 210, 210, 10: 210},
		{211, 211, 211, 211, 211, 211, 211, 10: 211},
		{212, 212, 212, 212, 212, 212, 212, 10: 212},
		{213, 213, 213, 213, 213, 213, 213, 10: 213},
		// 460
		{214, 214, 214, 214, 214, 214, 214, 10: 214},
		{215, 215, 215, 215, 215, 215, 215, 10: 215},
		{216, 216, 216, 216, 216, 216, 216, 10: 216},
		{217, 217, 217, 217, 217, 217, 217, 10: 217},
		{218, 218, 218, 218, 218, 218, 218, 10: 218},
		// 465
		{219, 219, 219, 219, 219, 219, 219, 10: 219},
		{220, 220, 220, 220, 220, 220, 220, 10: 220},
		{221, 221, 221, 221, 221, 221, 221, 10: 221},
		{222, 222, 222, 222, 222, 222, 222, 10: 222},
		{223, 223, 223, 223, 223, 223, 223, 10: 223},
		// 470
		{224, 224, 224, 224, 224, 224, 224, 10: 224},
		{123, 123, 123, 123, 123, 123, 123, 10: 123, 16: 226, 19: 797, 64: 796},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 799},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 798},
		{119, 119, 119, 119, 119, 119, 119, 10: 119, 21: 529},
		// 475
		{21: 529, 23: 800},
		{122, 122, 122, 122, 122, 122, 122, 10: 122, 19: 801, 64: 802},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 805},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 803},
		{21: 529, 23: 804},
		// 480
		{120, 120, 120, 120, 120, 120, 120, 10: 120},
		{121, 121, 121, 121, 121, 121, 121, 10: 121, 21: 529},
		{143, 143, 143, 143, 143, 143, 143, 10: 143},
		{16: 814},
		{16: 812},
		// 485
		{16: 810},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 811},
		{126, 126, 126, 126, 126, 126, 126, 10: 126},
		{225, 225, 225, 225, 225, 225, 225, 562, 564, 565, 225, 14: 563, 346, 101: 345, 813},
		{127, 127, 127, 127, 127, 127, 127, 10: 127},
		// 490
		{7: 815},
		{19: 816},
		{7: 404, 398, 819, 11: 401, 13: 406, 18: 397, 20: 405, 22: 818, 25: 403, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 104: 399, 396, 395, 394, 109: 393, 392, 391, 369, 817, 820, 821, 337, 340, 338, 339},
		{128, 128, 128, 128, 128, 128, 128, 10: 128, 21: 529},
		{111, 7: 843, 840, 842, 11: 841, 607, 845, 18: 397, 20: 844, 22: 400, 25: 403, 103: 847, 399, 396, 395, 394, 109: 393, 392, 391, 113: 540, 137: 846},
		// 495
		{7: 526, 22: 822},
		{125, 125, 125, 125, 125, 125, 125, 10: 125},
		{124, 124, 124, 124, 124, 124, 124, 10: 124},
		{7: 562, 349, 565, 12: 825, 14: 563, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 101: 345, 384, 112: 369, 114: 824, 823, 337, 340, 338, 339, 829, 826, 828, 830, 827},
		{839},
		// 500
		{838},
		{65: 591, 599, 597, 601, 595, 593, 589, 587, 84: 590, 598, 596, 600, 594, 592, 588, 586, 602, 96: 603, 142: 836},
		{835},
		{834},
		{833},
		// 505
		{832},
		{831},
		{129, 129, 129, 129, 129, 129, 129, 10: 129},
		{130, 130, 130, 130, 130, 130, 130, 10: 130},
		{131, 131, 131, 131, 131, 131, 131, 10: 131},
		// 510
		{132, 132, 132, 132, 132, 132, 132, 10: 132},
		{133, 133, 133, 133, 133, 133, 133, 10: 133},
		{837},
		{134, 134, 134, 134, 134, 134, 134, 10: 134},
		{135, 135, 135, 135, 135, 135, 135, 10: 135},
		// 515
		{136, 136, 136, 136, 136, 136, 136, 10: 136},
		{7: 856, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 542},
		{280, 7: 247, 280, 247, 11: 247, 280, 247, 18: 280, 280, 247, 280, 24: 280, 26: 280, 280, 280, 280, 108: 280},
		{7: 855},
		{276, 7: 248, 276, 248, 11: 248, 276, 248, 18: 276, 276, 248, 276, 24: 276, 26: 276, 276, 276, 276, 108: 276},
		// 520
		{489, 500, 474, 485, 481, 503, 499, 408, 411, 413, 11: 409, 410, 412, 476, 440, 471, 468, 494, 438, 114, 490, 488, 487, 491, 505, 496, 497, 501, 495, 443, 447, 452, 463, 449, 462, 460, 451, 450, 493, 444, 448, 502, 445, 433, 436, 442, 441, 434, 446, 456, 457, 454, 461, 458, 455, 453, 459, 435, 475, 472, 483, 482, 484, 486, 418, 422, 421, 423, 420, 419, 417, 416, 425, 428, 426, 477, 473, 432, 427, 431, 430, 429, 504, 464, 508, 465, 506, 466, 467, 469, 470, 507, 478, 498, 479, 424, 492, 480, 439, 437, 103: 854, 132: 415, 134: 407},
		{274, 7: 242, 274, 242, 11: 242, 274, 242, 18: 274, 274, 242, 274, 24: 274, 26: 274, 274, 274, 274, 108: 274},
		{853},
		{111, 7: 408, 608, 413, 11: 409, 607, 412, 20: 849, 103: 847, 137: 848},
		{113},
		// 525
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 850},
		{20: 851},
		{111, 7: 408, 608, 413, 11: 409, 607, 412, 20: 849, 103: 847, 137: 852},
		{112},
		{137, 137, 137, 137, 137, 137, 137, 10: 137},
		// 530
		{489, 500, 474, 485, 481, 503, 499, 408, 411, 413, 11: 409, 410, 412, 476, 440, 471, 468, 494, 438, 851, 490, 488, 487, 491, 505, 496, 497, 501, 495, 443, 447, 452, 463, 449, 462, 460, 451, 450, 493, 444, 448, 502, 445, 433, 436, 442, 441, 434, 446, 456, 457, 454, 461, 458, 455, 453, 459, 435, 475, 472, 483, 482, 484, 486, 418, 422, 421, 423, 420, 419, 417, 416, 425, 428, 426, 477, 473, 432, 427, 431, 430, 429, 504, 464, 508, 465, 506, 466, 467, 469, 470, 507, 478, 498, 479, 424, 492, 480, 439, 437, 103: 414, 132: 415, 134: 510},
		{279, 7: 241, 279, 241, 11: 241, 279, 241, 18: 279, 279, 241, 279, 24: 279, 26: 279, 279, 279, 279, 64: 527, 108: 279},
		{276, 8: 513, 12: 514, 18: 276, 276, 21: 276, 24: 276, 26: 276, 276, 276, 276, 108: 276},
		{858},
		{77: 859},
		// 535
		{2: 315, 4: 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 860},
		{2: 861},
		{110, 110, 110, 110, 110, 110, 110, 10: 110},
		{233, 233, 233, 233, 233, 233, 233, 10: 233, 233, 16: 233, 233, 59: 233},
		{265, 265, 265, 265, 265, 265, 265, 10: 265},
		// 540
		{16: 865},
		{7: 867, 133: 866},
		{266, 266, 266, 266, 266, 266, 266, 10: 266},
		{19: 868},
		{7: 408, 608, 413, 11: 409, 607, 412, 20: 886, 65: 871, 881, 874, 882, 873, 872, 870, 869, 875, 878, 877, 78: 883, 876, 884, 880, 879, 103: 885, 136: 887},
		// 545
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 14: 264, 264, 264},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 14: 263, 263, 263},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 14: 262, 262, 262},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 14: 261, 261, 261},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 14: 260, 260, 260},
		// 550
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 14: 259, 259, 259},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 14: 258, 258, 258},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 14: 257, 257, 257},
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 14: 256, 256, 256},
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 14: 255, 255, 255},
		// 555
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 14: 254, 254, 254},
		{253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 14: 253, 253, 253},
		{252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 14: 252, 252, 252},
		{251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 14: 251, 251, 251},
		{250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 14: 250, 250, 250},
		// 560
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 14: 249, 249, 249},
		{239, 239, 239, 239, 239, 239, 239, 867, 10: 239, 133: 892},
		{489, 500, 474, 485, 481, 503, 499, 408, 411, 413, 11: 409, 410, 412, 476, 440, 471, 468, 494, 438, 114, 490, 488, 487, 491, 505, 496, 497, 501, 495, 443, 447, 452, 463, 449, 462, 460, 451, 450, 493, 444, 448, 502, 445, 433, 436, 442, 441, 434, 446, 456, 457, 454, 461, 458, 455, 453, 459, 435, 475, 472, 483, 482, 484, 486, 418, 422, 421, 423, 420, 419, 417, 416, 425, 428, 426, 477, 473, 432, 427, 431, 430, 429, 504, 464, 508, 465, 506, 466, 467, 469, 470, 507, 478, 498, 479, 424, 492, 480, 439, 437, 103: 414, 132: 415, 134: 889},
		{236, 236, 236, 236, 236, 236, 236, 867, 10: 236, 133: 888},
		{235, 235, 235, 235, 235, 235, 235, 10: 235},
		// 565
		{20: 890},
		{237, 237, 237, 237, 237, 237, 237, 867, 10: 237, 133: 891},
		{238, 238, 238, 238, 238, 238, 238, 10: 238},
		{240, 240, 240, 240, 240, 240, 240, 10: 240},
		{268, 268, 268, 268, 268, 268, 268, 10: 268},
		// 570
		{7: 867, 133: 895},
		{267, 267, 267, 267, 267, 267, 267, 10: 267},
		{7: 562, 564, 565, 14: 563, 346, 225, 101: 345, 897},
		{16: 898},
		{7: 867, 133: 899},
		// 575
		{269, 269, 269, 269, 269, 269, 269, 10: 269},
		{22: 928},
		{97: 902},
		{7: 404, 398, 905, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 77: 904, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 903},
		{4: 925, 21: 529},
		// 580
		{11: 917},
		{7: 526, 22: 906},
		{7: 404, 9: 402, 11: 401, 13: 406, 20: 405, 22: 400, 25: 403, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 46: 376, 375, 49: 371, 361, 359, 364, 365, 362, 366, 360, 363, 104: 908, 112: 369, 114: 907},
		{913},
		{909},
		// 585
		{83: 910},
		{1: 315, 4: 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 911},
		{1: 912},
		{1: 306, 306, 306, 5: 306, 306, 10: 306},
		{83: 914},
		// 590
		{1: 315, 4: 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 915},
		{1: 916},
		{1: 307, 307, 307, 5: 307, 307, 10: 307},
		{14: 918},
		{14: 919},
		// 595
		{11: 920},
		{2: 921},
		{4: 922},
		{1: 315, 4: 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 923},
		{1: 924},
		// 600
		{1: 308, 308, 308, 5: 308, 308, 10: 308},
		{1: 315, 4: 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 926},
		{1: 927},
		{1: 309, 309, 309, 5: 309, 309, 10: 309},
		{7: 929},
		// 605
		{19: 930},
		{7: 408, 608, 413, 11: 409, 607, 412, 103: 931},
		{4: 932},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 933},
		{4: 934, 21: 529},
		// 610
		{315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 935},
		{936},
		{937},
		{4: 938},
		{1: 315, 4: 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 939},
		// 615
		{1: 940},
		{1: 310, 310, 310, 5: 310, 310, 10: 310},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 942},
		{943, 21: 529},
		{1: 315, 4: 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 944},
		// 620
		{1: 945},
		{1: 311, 311, 311, 5: 311, 311, 10: 311},
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 947},
		{21: 529, 23: 948},
		{94: 949},
		// 625
		{3: 315, 315, 315, 315, 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 950},
		{3: 304, 5: 953, 951, 138: 952},
		{1: 313, 313, 313, 5: 313, 313, 10: 313},
		{3: 960},
		{64: 954},
		// 630
		{7: 404, 398, 402, 11: 401, 13: 406, 18: 397, 20: 405, 22: 400, 25: 403, 104: 399, 396, 395, 394, 109: 393, 392, 391, 113: 955},
		{21: 529, 23: 956},
		{94: 957},
		{3: 315, 315, 315, 7: 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 958},
		{3: 304, 5: 953, 138: 959},
		// 635
		{3: 305},
		{4: 315, 6: 315, 347, 349, 350, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 961},
		{6: 962},
		{1: 312, 312, 312, 5: 312, 312, 10: 312},
		{1: 315, 315, 315, 315, 315, 315, 347, 349, 350, 315, 12: 377, 14: 348, 346, 225, 19: 385, 30: 351, 352, 355, 358, 373, 357, 356, 354, 353, 372, 374, 367, 368, 370, 341, 344, 376, 375, 342, 371, 361, 359, 364, 365, 362, 366, 360, 363, 343, 60: 386, 336, 334, 335, 101: 345, 384, 112: 369, 114: 330, 329, 337, 340, 338, 339, 381, 378, 380, 383, 379, 332, 382, 331, 327, 328, 333, 964},
		// 640
		{1: 321, 321, 321, 5: 321, 321, 10: 321},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 145

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}, nil}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}, nil}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			arrNd := yyS[yypt-4].node
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 18:
		{
			arrNd := yyS[yypt-4].node
			//This NonTerminal is broken, it is kept
			//here to show that eventuall the feature
			//must be added
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 19:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 20:
		{
			yyVAL.elifArr = nil
		}
	case 24:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 38:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "%", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 39:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 40:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 41:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 42:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 43:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 44:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 45:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 46:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 47:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-1].s, &numNode{NUM, -1}, nil}
			yyVAL.node = &numNode{NUM, x.execute().(int)}
		}
	case 48:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 49:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-1].s}
		}
	case 50:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 51:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State start")
			}
		}
	case 55:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false)}}
		}
	case 56:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 57:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s, yyS[yypt-1].s, false)}}
		}
	case 58:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-2].s, resMap(&yyS[yypt-0].s, auxGetNode(yyS[yypt-2].s), true)}}
		}
	case 59:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State NT_DEL")
			}
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 76:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 77:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 78:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 79:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 80:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 81:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 82:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 83:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
			/*Probably code to reference SymbolTable and return data*/
			/*idx := dynamicMap[$2];
			  item := dynamicSymbolTable[idx];
			  switch item.(type) {
			         case bool:
			            dCatchNodePtr=&boolNode{BOOL, item.(bool)}
			            if item.(bool) == false {$$ = "false"} else { $$ = "true"}
			         case string:
			            dCatchNodePtr=&strNode{STR, item.(string)}
			            $$ = item.(string)
			         case int:
			            dCatchNodePtr=&numNode{NUM, item.(int)}
			            $$ = strconv.Itoa(item.(int))
			         case *commonNode:
			            dCatchNodePtr=item
			            args := ""
			            for i := range item.(*commonNode).args {
			                   args += item.(*commonNode).args[i].(string)
			            }
			            $$ = item.(*commonNode).val +" "+ args
			          default:
			            println("Unable to deref your variable ")
			            $$ = ""
			  }*/
		}
	case 84:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 85:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 86:
		{
			yyVAL.s = yyS[yypt-5].s + "=" + yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 87:
		{
			yyVAL.s = yyS[yypt-4].s + "=" + yyS[yypt-1].s
		}
	case 88:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 89:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 91:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 92:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 93:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 94:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 95:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 96:
		{
			yyVAL.s = ".."
		}
	case 97:
		{
			yyVAL.s = "-"
		}
	case 98:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
		}
	case 99:
		{
			yyVAL.s = ""
		}
	case 100:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 101:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 10}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 11}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 8}}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 9}}
		}
	case 114:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 12}}
		}
	case 115:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 13}}
		}
	case 116:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 117:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}}
		}
	case 119:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", yyS[yypt-1].arr}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"pwd"}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"print"}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 134:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"if"}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"while"}}
		}
	case 139:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"for"}}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"unset"}}
		}
	case 141:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"select"}}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cmds"}}
		}
	case 143:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 144:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsten"}}
		}
	case 145:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssite"}}
		}
	case 146:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsbldg"}}
		}
	case 147:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsroom"}}
		}
	case 148:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsrack"}}
		}
	case 149:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsdev"}}
		}
	case 150:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"-"}}
		}
	case 151:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".template"}}
		}
	case 152:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".cmds"}}
		}
	case 153:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".var"}}
		}
	case 154:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"+"}}
		}
	case 155:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"="}}
		}
	case 156:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 157:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 158:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 159:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 160:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 161:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 162:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 163:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 164:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 165:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 166:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 167:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 168:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 169:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 170:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 171:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 172:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 173:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 174:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 175:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 176:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 177:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 178:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 179:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 180:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 181:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 182:
		{
			val := map[string]interface{}{yyS[yypt-2].s: (yyS[yypt-0].node).(node).execute()}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), val}}
			if cmd.State.DebugLvl >= 3 {
				println("Attribute Acquired")
			}
		}
	case 183:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 184:
		{
			x := make([]string, 0)
			x = append(x, yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 185:
		{
			yyVAL.sarr = []string{yyS[yypt-0].s}
		}
	case 186:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 187:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 188:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 189:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 190:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-6].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 191:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 192:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 193:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 194:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 195:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 196:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, (yyS[yypt-0].node).(node).execute()}
		}
	case 197:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 198:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 199:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 200:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 201:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 202:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 203:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, yyS[yypt-3].node, nil}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 204:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-6].s /*&numNode{NUM,$4}*/, yyS[yypt-4].node /*&strNode{STR, $7}*/, yyS[yypt-1].node}
		}
	case 205:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}, nil}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 206:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 207:
		{ /*x := $3+"="+$5;*/
			val := (yyS[yypt-0].node).(node).execute()
			println("Our val:", val)
			x := map[string]interface{}{yyS[yypt-2].s: val}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{x}}
		}
	case 208:
		{
			if yyS[yypt-0].s != "" {
				yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
			} else {
				yyVAL.s = yyS[yypt-1].s
			}
		}
	case 209:
		{
			if yyS[yypt-0].s != "" {
				yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
			} else {
				yyVAL.s = yyS[yypt-1].s
			}
		}
	case 210:
		{
			yyVAL.s = ""
		}
	case 211:
		{
			x := []interface{}{yyS[yypt-1].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 212:
		{
			x := []interface{}{yyS[yypt-2].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 213:
		{
			yyVAL.arr = nil
		}
	case 214:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 215:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}
	case 216:
		{
			if len(yyS[yypt-0].arr) != 0 {
				yyVAL.arr = append(yyS[yypt-1].arr, yyS[yypt-0].arr...)
			} else {
				yyVAL.arr = yyS[yypt-1].arr
			}
		}
	case 217:
		{
			yyVAL.arr = nil
		}
	case 218:
		{
			yyVAL.arr = []interface{}{&strNode{STR, yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 219:
		{
			yyVAL.arr = []interface{}{&numNode{NUM, yyS[yypt-0].n}}
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 220:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 221:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 222:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 223:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 224:
		{
			var x bool
			if yyS[yypt-0].s == "true" {
				x = true
			} else {
				x = false
			}
			yyVAL.arr = []interface{}{&boolNode{BOOL, x}}
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 225:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 226:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 227:
		{
			x := yyS[yypt-1].s
			yyVAL.s = x + "," + yyS[yypt-0].s
		}
	case 228:
		{
			yyVAL.s = ""
		}
	case 229:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 230:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 231:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 232:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 233:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 234:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 235:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 236:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 237:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 238:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 239:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 240:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 241:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 242:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 243:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 244:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 245:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 246:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 247:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 248:
		{
			yyVAL.s = "create"
		}
	case 249:
		{
			yyVAL.s = "get"
		}
	case 250:
		{
			yyVAL.s = "update"
		}
	case 251:
		{
			yyVAL.s = "delete"
		}
	case 252:
		{
			yyVAL.s = "search"
		}
	case 253:
		{
			yyVAL.s = "="
		}
	case 254:
		{
			yyVAL.s = "-l"
		}
	case 255:
		{
			yyVAL.s = "/"
		}
	case 256:
		{
			yyVAL.s = "exit"
		}
	case 257:
		{
			yyVAL.s = "man"
		}
	case 258:
		{
			yyVAL.s = "cd"
		}
	case 259:
		{
			yyVAL.s = "pwd"
		}
	case 260:
		{
			yyVAL.s = "clear"
		}
	case 261:
		{
			yyVAL.s = "grep"
		}
	case 262:
		{
			yyVAL.s = "ls"
		}
	case 263:
		{
			yyVAL.s = "tree"
		}
	case 264:
		{
			yyVAL.s = "lsog"
		}
	case 265:
		{
			yyVAL.s = "lsten"
		}
	case 266:
		{
			yyVAL.s = "lssite"
		}
	case 267:
		{
			yyVAL.s = "lsbldg"
		}
	case 268:
		{
			yyVAL.s = "lstile"
		}
	case 269:
		{
			yyVAL.s = "lscab"
		}
	case 270:
		{
			yyVAL.s = "lssensor"
		}
	case 271:
		{
			yyVAL.s = "lsac"
		}
	case 272:
		{
			yyVAL.s = "lsaisle"
		}
	case 273:
		{
			yyVAL.s = "lspanel"
		}
	case 274:
		{
			yyVAL.s = "lsseparator"
		}
	case 275:
		{
			yyVAL.s = "lsroom"
		}
	case 276:
		{
			yyVAL.s = "lscorridor"
		}
	case 277:
		{
			yyVAL.s = "lsrack"
		}
	case 278:
		{
			yyVAL.s = "lsdev"
		}
	case 279:
		{
			yyVAL.s = "bd"
		}
	case 280:
		{
			yyVAL.s = "dv"
		}
	case 281:
		{
			yyVAL.s = "rk"
		}
	case 282:
		{
			yyVAL.s = "ro"
		}
	case 283:
		{
			yyVAL.s = "@"
		}
	case 284:
		{
			yyVAL.s = "si"
		}
	case 285:
		{
			yyVAL.s = "tn"
		}
	case 286:
		{
			yyVAL.s = ":"
		}
	case 287:
		{
			yyVAL.s = "selection"
		}
	case 288:
		{
			yyVAL.s = "{"
		}
	case 289:
		{
			yyVAL.s = "}"
		}
	case 290:
		{
			yyVAL.s = ","
		}
	case 291:
		{
			yyVAL.s = "."
		}
	case 292:
		{
			yyVAL.s = "cmds"
		}
	case 293:
		{
			yyVAL.s = "template"
		}
	case 294:
		{
			yyVAL.s = "var"
		}
	case 295:
		{
			yyVAL.s = "'"
		}
	case 296:
		{
			yyVAL.s = ";"
		}
	case 297:
		{
			yyVAL.s = "if"
		}
	case 298:
		{
			yyVAL.s = "for"
		}
	case 299:
		{
			yyVAL.s = "while"
		}
	case 300:
		{
			yyVAL.s = "else"
		}
	case 301:
		{
			yyVAL.s = "["
		}
	case 302:
		{
			yyVAL.s = "]"
		}
	case 303:
		{
			yyVAL.s = "("
		}
	case 304:
		{
			yyVAL.s = ")"
		}
	case 305:
		{
			yyVAL.s = "||"
		}
	case 306:
		{
			yyVAL.s = "&&"
		}
	case 307:
		{
			yyVAL.s = "in"
		}
	case 308:
		{
			yyVAL.s = "print"
		}
	case 309:
		{
			yyVAL.s = "!"
		}
	case 310:
		{
			yyVAL.s = "*"
		}
	case 311:
		{
			yyVAL.s = ">"
		}
	case 312:
		{
			yyVAL.s = "<"
		}
	case 313:
		{
			yyVAL.s = "then"
		}
	case 314:
		{
			yyVAL.s = "fi"
		}
	case 315:
		{
			yyVAL.s = "done"
		}
	case 316:
		{
			yyVAL.s = "%"
		}
	case 317:
		{
			yyVAL.s = "unset"
		}
	case 318:
		{
			yyVAL.s = "elif"
		}
	case 319:
		{
			yyVAL.s = "do"
		}
	case 320:
		{
			yyVAL.s = "len"
		}
	case 321:
		{
			yyVAL.s = "gr"
		}
	case 322:
		{
			yyVAL.s = ""
		}
	case 323:
		{
			yyVAL.s = "co"
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
