// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var dynamicVarLimit = []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
var dynamicMap = make(map[string]int)
var dynamicSymbolTable = make(map[int]cmd.DynamicVar)
var dCatchPtr = new(cmd.DynamicVar)
var varCtr = 0

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

type yySymType struct {
	yys  int
	n    int
	s    string
	sarr []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault        = 57406
	yyEofCode        = 57344
	TOKEN_ATTR       = 57357
	TOKEN_ATTRSPEC   = 57390
	TOKEN_BASHTYPE   = 57365
	TOKEN_BLDG       = 57351
	TOKEN_BOOL       = 57346
	TOKEN_CD         = 57371
	TOKEN_CLR        = 57373
	TOKEN_CMDFLAG    = 57367
	TOKEN_CMDS       = 57401
	TOKEN_COMMA      = 57399
	TOKEN_CREATE     = 57360
	TOKEN_DELETE     = 57363
	TOKEN_DEREF      = 57404
	TOKEN_DEVICE     = 57354
	TOKEN_DOC        = 57370
	TOKEN_DOT        = 57400
	TOKEN_EQUAL      = 57366
	TOKEN_EXIT       = 57369
	TOKEN_GET        = 57361
	TOKEN_GREP       = 57374
	TOKEN_LBRAC      = 57397
	TOKEN_LS         = 57375
	TOKEN_LSBLDG     = 57380
	TOKEN_LSDEV      = 57383
	TOKEN_LSOG       = 57377
	TOKEN_LSRACK     = 57382
	TOKEN_LSROOM     = 57381
	TOKEN_LSSITE     = 57379
	TOKEN_LSSUBDEV   = 57384
	TOKEN_LSSUBDEV1  = 57385
	TOKEN_LSTEN      = 57378
	TOKEN_NUM        = 57347
	TOKEN_OCBLDG     = 57386
	TOKEN_OCDEL      = 57359
	TOKEN_OCDEV      = 57387
	TOKEN_OCPSPEC    = 57395
	TOKEN_OCRACK     = 57388
	TOKEN_OCROOM     = 57389
	TOKEN_OCSDEV     = 57393
	TOKEN_OCSDEV1    = 57394
	TOKEN_OCSITE     = 57391
	TOKEN_OCTENANT   = 57392
	TOKEN_PLUS       = 57358
	TOKEN_PWD        = 57372
	TOKEN_RACK       = 57353
	TOKEN_RBRAC      = 57398
	TOKEN_ROOM       = 57352
	TOKEN_SEARCH     = 57364
	TOKEN_SELECT     = 57396
	TOKEN_SEMICOL    = 57405
	TOKEN_SITE       = 57350
	TOKEN_SLASH      = 57368
	TOKEN_SUBDEVICE  = 57355
	TOKEN_SUBDEVICE1 = 57356
	TOKEN_TEMPLATE   = 57402
	TOKEN_TENANT     = 57349
	TOKEN_TREE       = 57376
	TOKEN_UPDATE     = 57362
	TOKEN_VAR        = 57403
	TOKEN_WORD       = 57348
	yyErrCode        = 57345

	yyMaxDepth = 200
	yyTabOfs   = -107
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57344: 0,  // $end (113x)
		57405: 1,  // TOKEN_SEMICOL (111x)
		57348: 2,  // TOKEN_WORD (82x)
		57359: 3,  // TOKEN_OCDEL (69x)
		57400: 4,  // TOKEN_DOT (57x)
		57390: 5,  // TOKEN_ATTRSPEC (46x)
		57404: 6,  // TOKEN_DEREF (44x)
		57368: 7,  // TOKEN_SLASH (43x)
		57427: 8,  // P1 (36x)
		57347: 9,  // TOKEN_NUM (36x)
		57426: 10, // P (33x)
		57357: 11, // TOKEN_ATTR (30x)
		57358: 12, // TOKEN_PLUS (27x)
		57425: 13, // ORIENTN (25x)
		57429: 14, // WORDORNUM (22x)
		57395: 15, // TOKEN_OCPSPEC (15x)
		57366: 16, // TOKEN_EQUAL (6x)
		57410: 17, // F (5x)
		57351: 18, // TOKEN_BLDG (3x)
		57371: 19, // TOKEN_CD (3x)
		57360: 20, // TOKEN_CREATE (3x)
		57363: 21, // TOKEN_DELETE (3x)
		57354: 22, // TOKEN_DEVICE (3x)
		57361: 23, // TOKEN_GET (3x)
		57375: 24, // TOKEN_LS (3x)
		57377: 25, // TOKEN_LSOG (3x)
		57353: 26, // TOKEN_RACK (3x)
		57398: 27, // TOKEN_RBRAC (3x)
		57352: 28, // TOKEN_ROOM (3x)
		57350: 29, // TOKEN_SITE (3x)
		57349: 30, // TOKEN_TENANT (3x)
		57376: 31, // TOKEN_TREE (3x)
		57362: 32, // TOKEN_UPDATE (3x)
		57407: 33, // BASH (2x)
		57409: 34, // E (2x)
		57411: 35, // GETOBJS (2x)
		57412: 36, // K (2x)
		57413: 37, // NT_CREATE (2x)
		57414: 38, // NT_DEL (2x)
		57415: 39, // NT_GET (2x)
		57416: 40, // NT_UPDATE (2x)
		57417: 41, // OCCHOOSE (2x)
		57419: 42, // OCDEL (2x)
		57420: 43, // OCDOT (2x)
		57421: 44, // OCGET (2x)
		57422: 45, // OCLISYNTX (2x)
		57423: 46, // OCSEL (2x)
		57424: 47, // OCUPDATE (2x)
		57428: 48, // Q (2x)
		57430: 49, // start (2x)
		57431: 50, // stmnt (2x)
		57373: 51, // TOKEN_CLR (2x)
		57370: 52, // TOKEN_DOC (2x)
		57369: 53, // TOKEN_EXIT (2x)
		57374: 54, // TOKEN_GREP (2x)
		57380: 55, // TOKEN_LSBLDG (2x)
		57383: 56, // TOKEN_LSDEV (2x)
		57382: 57, // TOKEN_LSRACK (2x)
		57381: 58, // TOKEN_LSROOM (2x)
		57379: 59, // TOKEN_LSSITE (2x)
		57384: 60, // TOKEN_LSSUBDEV (2x)
		57385: 61, // TOKEN_LSSUBDEV1 (2x)
		57378: 62, // TOKEN_LSTEN (2x)
		57372: 63, // TOKEN_PWD (2x)
		57396: 64, // TOKEN_SELECT (2x)
		57355: 65, // TOKEN_SUBDEVICE (2x)
		57356: 66, // TOKEN_SUBDEVICE1 (2x)
		57408: 67, // DWORDORNUM (1x)
		57418: 68, // OCCR (1x)
		57346: 69, // TOKEN_BOOL (1x)
		57401: 70, // TOKEN_CMDS (1x)
		57399: 71, // TOKEN_COMMA (1x)
		57397: 72, // TOKEN_LBRAC (1x)
		57386: 73, // TOKEN_OCBLDG (1x)
		57387: 74, // TOKEN_OCDEV (1x)
		57388: 75, // TOKEN_OCRACK (1x)
		57389: 76, // TOKEN_OCROOM (1x)
		57391: 77, // TOKEN_OCSITE (1x)
		57392: 78, // TOKEN_OCTENANT (1x)
		57402: 79, // TOKEN_TEMPLATE (1x)
		57403: 80, // TOKEN_VAR (1x)
		57406: 81, // $default (0x)
		57345: 82, // error (0x)
		57365: 83, // TOKEN_BASHTYPE (0x)
		57367: 84, // TOKEN_CMDFLAG (0x)
		57393: 85, // TOKEN_OCSDEV (0x)
		57394: 86, // TOKEN_OCSDEV1 (0x)
		57364: 87, // TOKEN_SEARCH (0x)
	}

	yySymNames = []string{
		"$end",
		"TOKEN_SEMICOL",
		"TOKEN_WORD",
		"TOKEN_OCDEL",
		"TOKEN_DOT",
		"TOKEN_ATTRSPEC",
		"TOKEN_DEREF",
		"TOKEN_SLASH",
		"P1",
		"TOKEN_NUM",
		"P",
		"TOKEN_ATTR",
		"TOKEN_PLUS",
		"ORIENTN",
		"WORDORNUM",
		"TOKEN_OCPSPEC",
		"TOKEN_EQUAL",
		"F",
		"TOKEN_BLDG",
		"TOKEN_CD",
		"TOKEN_CREATE",
		"TOKEN_DELETE",
		"TOKEN_DEVICE",
		"TOKEN_GET",
		"TOKEN_LS",
		"TOKEN_LSOG",
		"TOKEN_RACK",
		"TOKEN_RBRAC",
		"TOKEN_ROOM",
		"TOKEN_SITE",
		"TOKEN_TENANT",
		"TOKEN_TREE",
		"TOKEN_UPDATE",
		"BASH",
		"E",
		"GETOBJS",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCDOT",
		"OCGET",
		"OCLISYNTX",
		"OCSEL",
		"OCUPDATE",
		"Q",
		"start",
		"stmnt",
		"TOKEN_CLR",
		"TOKEN_DOC",
		"TOKEN_EXIT",
		"TOKEN_GREP",
		"TOKEN_LSBLDG",
		"TOKEN_LSDEV",
		"TOKEN_LSRACK",
		"TOKEN_LSROOM",
		"TOKEN_LSSITE",
		"TOKEN_LSSUBDEV",
		"TOKEN_LSSUBDEV1",
		"TOKEN_LSTEN",
		"TOKEN_PWD",
		"TOKEN_SELECT",
		"TOKEN_SUBDEVICE",
		"TOKEN_SUBDEVICE1",
		"DWORDORNUM",
		"OCCR",
		"TOKEN_BOOL",
		"TOKEN_CMDS",
		"TOKEN_COMMA",
		"TOKEN_LBRAC",
		"TOKEN_OCBLDG",
		"TOKEN_OCDEV",
		"TOKEN_OCRACK",
		"TOKEN_OCROOM",
		"TOKEN_OCSITE",
		"TOKEN_OCTENANT",
		"TOKEN_TEMPLATE",
		"TOKEN_VAR",
		"$default",
		"error",
		"TOKEN_BASHTYPE",
		"TOKEN_CMDFLAG",
		"TOKEN_OCSDEV",
		"TOKEN_OCSDEV1",
		"TOKEN_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {49, 1},
		2:   {49, 3},
		3:   {50, 1},
		4:   {50, 1},
		5:   {50, 1},
		6:   {50, 0},
		7:   {36, 1},
		8:   {36, 1},
		9:   {36, 1},
		10:  {36, 1},
		11:  {37, 3},
		12:  {37, 4},
		13:  {39, 2},
		14:  {39, 3},
		15:  {40, 3},
		16:  {38, 2},
		17:  {34, 1},
		18:  {34, 1},
		19:  {34, 1},
		20:  {34, 1},
		21:  {34, 1},
		22:  {34, 1},
		23:  {34, 1},
		24:  {34, 1},
		25:  {13, 1},
		26:  {13, 1},
		27:  {13, 0},
		28:  {14, 1},
		29:  {14, 1},
		30:  {14, 4},
		31:  {17, 4},
		32:  {17, 3},
		33:  {10, 1},
		34:  {10, 2},
		35:  {8, 3},
		36:  {8, 1},
		37:  {8, 4},
		38:  {8, 1},
		39:  {8, 2},
		40:  {8, 1},
		41:  {8, 2},
		42:  {8, 0},
		43:  {48, 2},
		44:  {48, 2},
		45:  {48, 2},
		46:  {48, 2},
		47:  {48, 2},
		48:  {48, 2},
		49:  {48, 2},
		50:  {48, 2},
		51:  {48, 2},
		52:  {48, 2},
		53:  {48, 2},
		54:  {48, 2},
		55:  {48, 3},
		56:  {48, 1},
		57:  {33, 1},
		58:  {33, 1},
		59:  {33, 1},
		60:  {33, 1},
		61:  {33, 1},
		62:  {33, 1},
		63:  {33, 2},
		64:  {33, 2},
		65:  {33, 2},
		66:  {33, 2},
		67:  {33, 2},
		68:  {33, 2},
		69:  {33, 2},
		70:  {33, 2},
		71:  {33, 2},
		72:  {45, 2},
		73:  {45, 1},
		74:  {45, 1},
		75:  {45, 1},
		76:  {45, 1},
		77:  {45, 1},
		78:  {45, 1},
		79:  {68, 5},
		80:  {68, 5},
		81:  {68, 5},
		82:  {68, 5},
		83:  {68, 7},
		84:  {68, 7},
		85:  {68, 7},
		86:  {68, 7},
		87:  {68, 7},
		88:  {68, 7},
		89:  {68, 7},
		90:  {68, 7},
		91:  {42, 2},
		92:  {47, 5},
		93:  {44, 2},
		94:  {35, 3},
		95:  {35, 1},
		96:  {41, 4},
		97:  {67, 1},
		98:  {67, 1},
		99:  {67, 1},
		100: {67, 4},
		101: {43, 6},
		102: {43, 4},
		103: {43, 4},
		104: {43, 2},
		105: {46, 1},
		106: {46, 5},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [224][]uint16{
		// 0
		{101, 101, 123, 125, 124, 6: 126, 122, 121, 10: 152, 12: 145, 16: 153, 19: 127, 117, 120, 23: 118, 128, 141, 31: 137, 119, 138, 36: 110, 113, 116, 114, 115, 149, 146, 150, 148, 112, 151, 147, 111, 108, 109, 139, 144, 143, 140, 131, 134, 133, 132, 130, 135, 136, 129, 142, 154},
		{107},
		{106, 329},
		{104, 104},
		{103, 103},
		// 5
		{102, 102},
		{100, 100},
		{99, 99},
		{98, 98},
		{97, 97},
		// 10
		{18: 318, 22: 321, 26: 320, 28: 319, 317, 316, 34: 325, 65: 322, 323},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 314, 18: 318, 22: 321, 26: 320, 28: 319, 317, 316, 34: 315, 65: 322, 323},
		{2: 123, 160, 159, 6: 161, 122, 121, 10: 308, 65},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 307},
		{74, 74, 4: 74, 74, 9: 74, 11: 74},
		// 15
		{65, 65, 123, 160, 159, 65, 161, 8: 306, 65, 11: 65},
		{71, 71, 4: 71, 71, 7: 304, 9: 71, 11: 71},
		{4: 170, 70: 287, 79: 288, 286},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 285},
		{2: 284},
		// 20
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 283},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 282},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 281},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 280},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 279},
		// 25
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 278},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 277},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 276},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 275},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 274},
		// 30
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 271, 272},
		{51, 51},
		{50, 50},
		{49, 49},
		{48, 48},
		// 35
		{47, 47},
		{46, 46},
		{45, 45, 268, 19: 263, 264, 267, 23: 265, 262, 270, 31: 269, 266},
		{18: 191, 22: 197, 26: 195, 28: 193, 189, 187, 68: 185, 73: 190, 196, 194, 192, 188, 186},
		{34, 34},
		// 40
		{33, 33},
		{32, 32},
		{31, 31},
		{30, 30},
		{29, 29},
		// 45
		{4: 173},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 162, 72: 163},
		{2, 2, 4: 155},
		{11: 156},
		{16: 157},
		// 50
		{2: 158},
		{1, 1},
		{4: 170},
		{67, 67, 4: 67, 67, 9: 67, 11: 67},
		{2: 169},
		// 55
		{14, 14},
		{2: 164, 35: 165},
		{27: 12, 71: 167},
		{27: 166},
		{11, 11},
		// 60
		{2: 164, 35: 168},
		{27: 13},
		{66, 66, 4: 66, 66, 9: 66, 11: 66},
		{68, 68, 4: 68, 68, 7: 171, 9: 68, 11: 68},
		{65, 65, 123, 160, 159, 65, 161, 8: 172, 65, 11: 65},
		// 65
		{70, 70, 4: 70, 70, 9: 70, 11: 70},
		{11: 174},
		{16: 175},
		{2: 178, 177, 9: 179, 12: 176, 180, 181},
		{2: 82},
		// 70
		{2: 81},
		{79, 79, 5: 79, 11: 79},
		{78, 78, 5: 78, 11: 78},
		{2: 182},
		{15, 15},
		// 75
		{2: 80, 177, 12: 176, 183},
		{2: 184},
		{77, 77, 5: 77, 11: 77},
		{35, 35},
		{15: 258},
		// 80
		{15: 254},
		{15: 250},
		{15: 246},
		{15: 240},
		{15: 234},
		// 85
		{15: 228},
		{15: 222},
		{15: 216},
		{15: 210},
		{15: 204},
		// 90
		{15: 198},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 199},
		{5: 200},
		{2: 178, 177, 9: 179, 12: 176, 180, 201},
		{5: 202},
		// 95
		{2: 178, 177, 9: 179, 12: 176, 180, 203},
		{17, 17},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 205},
		{5: 206},
		{2: 178, 177, 9: 179, 12: 176, 180, 207},
		// 100
		{5: 208},
		{2: 178, 177, 9: 179, 12: 176, 180, 209},
		{18, 18},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 211},
		{5: 212},
		// 105
		{2: 178, 177, 9: 179, 12: 176, 180, 213},
		{5: 214},
		{2: 178, 177, 9: 179, 12: 176, 180, 215},
		{19, 19},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 217},
		// 110
		{5: 218},
		{2: 178, 177, 9: 179, 12: 176, 180, 219},
		{5: 220},
		{2: 178, 177, 9: 179, 12: 176, 180, 221},
		{20, 20},
		// 115
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 223},
		{5: 224},
		{2: 178, 177, 9: 179, 12: 176, 180, 225},
		{5: 226},
		{2: 178, 177, 9: 179, 12: 176, 180, 227},
		// 120
		{21, 21},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 229},
		{5: 230},
		{2: 178, 177, 9: 179, 12: 176, 180, 231},
		{5: 232},
		// 125
		{2: 178, 177, 9: 179, 12: 176, 180, 233},
		{22, 22},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 235},
		{5: 236},
		{2: 178, 177, 9: 179, 12: 176, 180, 237},
		// 130
		{5: 238},
		{2: 178, 177, 9: 179, 12: 176, 180, 239},
		{23, 23},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 241},
		{5: 242},
		// 135
		{2: 178, 177, 9: 179, 12: 176, 180, 243},
		{5: 244},
		{2: 178, 177, 9: 179, 12: 176, 180, 245},
		{24, 24},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 247},
		// 140
		{5: 248},
		{2: 178, 177, 9: 179, 12: 176, 180, 249},
		{25, 25},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 251},
		{5: 252},
		// 145
		{2: 178, 177, 9: 179, 12: 176, 180, 253},
		{26, 26},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 255},
		{5: 256},
		{2: 178, 177, 9: 179, 12: 176, 180, 257},
		// 150
		{27, 27},
		{2: 123, 160, 159, 65, 161, 122, 121, 10: 259},
		{5: 260},
		{2: 178, 177, 9: 179, 12: 176, 180, 261},
		{28, 28},
		// 155
		{44, 44},
		{43, 43},
		{42, 42},
		{41, 41},
		{40, 40},
		// 160
		{39, 39},
		{38, 38},
		{37, 37},
		{36, 36},
		{54, 54},
		// 165
		{53, 53, 9: 273},
		{52, 52},
		{55, 55},
		{56, 56},
		{57, 57},
		// 170
		{58, 58},
		{59, 59},
		{60, 60},
		{61, 61},
		{62, 62},
		// 175
		{63, 63},
		{64, 64},
		{3, 3, 4: 66},
		{16, 16},
		{15: 293},
		// 180
		{15: 291},
		{15: 289},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 290},
		{4, 4},
		{65, 65, 123, 160, 159, 6: 161, 122, 121, 10: 292},
		// 185
		{5, 5},
		{2: 294},
		{16: 295},
		{2: 296, 177, 9: 297, 12: 176, 299, 67: 300, 69: 298},
		{10, 10},
		// 190
		{9, 9},
		{8, 8},
		{2: 301},
		{6, 6},
		{2: 80, 177, 12: 176, 302},
		// 195
		{2: 303},
		{7, 7},
		{65, 65, 123, 160, 159, 65, 161, 8: 305, 65, 11: 65},
		{72, 72, 4: 72, 72, 9: 72, 11: 72},
		{73, 73, 4: 73, 73, 9: 73, 11: 73},
		// 200
		{91, 91},
		{11: 310, 17: 309},
		{92, 92},
		{16: 311},
		{2: 178, 177, 9: 179, 12: 176, 180, 312},
		// 205
		{75, 75, 11: 310, 17: 313},
		{76, 76},
		{94, 94},
		{11: 310, 17: 324},
		{2: 90, 90, 90, 6: 90, 90, 11: 90},
		// 210
		{2: 89, 89, 89, 6: 89, 89, 11: 89},
		{2: 88, 88, 88, 6: 88, 88, 11: 88},
		{2: 87, 87, 87, 6: 87, 87, 11: 87},
		{2: 86, 86, 86, 6: 86, 86, 11: 86},
		{2: 85, 85, 85, 6: 85, 85, 11: 85},
		// 215
		{2: 84, 84, 84, 6: 84, 84, 11: 84},
		{2: 83, 83, 83, 6: 83, 83, 11: 83},
		{93, 93},
		{2: 123, 160, 159, 6: 161, 122, 121, 10: 327, 310, 17: 326},
		{96, 96},
		// 220
		{11: 310, 17: 328},
		{95, 95},
		{101, 101, 123, 125, 124, 6: 126, 122, 121, 10: 152, 12: 145, 16: 153, 19: 127, 117, 120, 23: 118, 128, 141, 31: 137, 119, 138, 36: 110, 113, 116, 114, 115, 149, 146, 150, 148, 112, 151, 147, 111, 330, 109, 139, 144, 143, 140, 131, 134, 133, 132, 130, 135, 136, 129, 142, 154},
		{105},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 82

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 7:
		{
			println("@State start")
		}
	case 11:
		{
			cmd.PostObj(cmd.EntityStrToInt(yyS[yypt-1].s), yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 12:
		{
			yyVAL.s = yyS[yypt-0].s
			cmd.Disp(resMap(&yyS[yypt-0].s))
			cmd.PostObj(cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s))
		}
	case 13:
		{
			cmd.GetObject(yyS[yypt-0].s)
		}
	case 14:
		{ /*cmd.Disp(resMap(&$4)); */
			cmd.SearchObjects(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 15:
		{
			yyVAL.s = yyS[yypt-0].s /*cmd.Disp(resMap(&$4));*/
			cmd.UpdateObj(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 16:
		{
			println("@State NT_DEL")
			cmd.DeleteObj(yyS[yypt-0].s)
		}
	case 25:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 26:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 27:
		{
			yyVAL.s = ""
		}
	case 28:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 29:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
		}
	case 30:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
		}
	case 31:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 32:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 34:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 35:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 36:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 37:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 38:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 39:
		{
			yyVAL.s = ".."
		}
	case 40:
		{
			yyVAL.s = "-"
		}
	case 41:
		{
			yyVAL.s = ""
		}
	case 42:
		{
			yyVAL.s = ""
		}
	case 43:
		{
			cmd.CD(yyS[yypt-0].s)
		}
	case 44:
		{
			cmd.LS(yyS[yypt-0].s)
		}
	case 45:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 0)
		}
	case 46:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 1)
		}
	case 47:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 2)
		}
	case 48:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 3)
		}
	case 49:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 4)
		}
	case 50:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 5)
		}
	case 51:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 6)
		}
	case 52:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 7)
		}
	case 53:
		{
			cmd.Tree("", yyS[yypt-0].n)
		}
	case 54:
		{
			cmd.Tree(yyS[yypt-0].s, 0)
		}
	case 55:
		{
			cmd.Tree(yyS[yypt-1].s, yyS[yypt-0].n)
		}
	case 56:
		{
			cmd.Execute()
		}
	case 59:
		{
			cmd.LSOG()
		}
	case 60:
		{
			cmd.PWD()
		}
	case 61:
		{
			cmd.Exit()
		}
	case 62:
		{
			cmd.Help("")
		}
	case 63:
		{
			cmd.Help("ls")
		}
	case 64:
		{
			cmd.Help("cd")
		}
	case 65:
		{
			cmd.Help("create")
		}
	case 66:
		{
			cmd.Help("gt")
		}
	case 67:
		{
			cmd.Help("update")
		}
	case 68:
		{
			cmd.Help("delete")
		}
	case 69:
		{
			cmd.Help(yyS[yypt-0].s)
		}
	case 70:
		{
			cmd.Help("tree")
		}
	case 71:
		{
			cmd.Help("lsog")
		}
	case 79:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr)
		}
	case 80:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr)
		}
	case 81:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr)
		}
	case 82:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr)
		}
	case 83:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 84:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 85:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 86:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 87:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 88:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 89:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr)
		}
	case 90:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr)
		}
	case 91:
		{
			cmd.DeleteObj(replaceOCLICurrPath(yyS[yypt-0].s))
		}
	case 92:
		{
			println("Attribute Acquired")
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			cmd.UpdateObj(replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val))
		}
	case 93:
		{
			cmd.GetObject(replaceOCLICurrPath(yyS[yypt-0].s))
		}
	case 94:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 95:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 96:
		{
			cmd.State.ClipBoard = &yyS[yypt-1].sarr
			println("Selection made!")
		}
	case 97:
		{
			dCatchPtr = &cmd.DynamicVar{yyS[yypt-0].s, "string"}
		}
	case 98:
		{
			dCatchPtr = &cmd.DynamicVar{yyS[yypt-0].n, "int"}
		}
	case 99:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = &cmd.DynamicVar{x, "bool"}
		}
	case 100:
		{
			dCatchPtr = &cmd.DynamicVar{yyS[yypt-3].s, "string"}
		}
	case 101:
		{
			dynamicMap[yyS[yypt-2].s] = varCtr
			dynamicSymbolTable[varCtr] = *dCatchPtr
			varCtr += 1
			println("You want to assign", yyS[yypt-2].s, "with value of", dCatchPtr.Val)
		}
	case 102:
		{
			cmd.LoadFile(yyS[yypt-0].s)
		}
	case 103:
		{
			cmd.LoadFile(yyS[yypt-0].s)
		}
	case 104:
		{
			v := dynamicSymbolTable[dynamicMap[yyS[yypt-0].s]]
			switch v.ValType {
			case "string":
				x := string(v.Val.(string))
				println("So You want the value: ", x)
			case "int":
				x := int(v.Val.(int))
				println("So You want the value: ", x)
			case "bool":
				x := v.Val.(bool)
				println("So You want the value: ", x)
			}
		}
	case 105:
		{
			cmd.ShowClipBoard()
		}
	case 106:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			cmd.UpdateSelection(resMap(&x))
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
