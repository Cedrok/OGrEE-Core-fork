// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		switch input[idx].(type) {
		case string:
			if input[idx].(string) == "false" {
				x := map[int]interface{}{0: &boolNode{BOOL, false}}
				res = append(res, x)
			}
			if input[idx].(string) == "true" {
				x := map[int]interface{}{0: &boolNode{BOOL, true}}
				res = append(res, x)
			} else {
				x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
				res = append(res, x)
			}
		case int:
			x := map[int]interface{}{0: &numNode{NUM, input[idx].(int)}}
			res = append(res, x)

		default: //Most likely a node
			res = append(res, map[int]interface{}{0: input[idx]})
		}
		/*if input[idx].(string) == "false" {
		         x := map[int]interface{}{0: &boolNode{BOOL, false}}
		         res = append(res, x)
		  } else if input[idx].(string) == "true" {
		         x := map[int]interface{}{0: &boolNode{BOOL, true}}
		         res = append(res, x)
		  } else if v,e := strconv.Atoi(input[idx].(string)); e == nil {
		         x := map[int]interface{}{0: &numNode{NUM, v}}
		         res = append(res, x)
		  } else {
		         x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
		         res = append(res, x)
		  }*/
	}
	return res
}

func resMap(x *string, ent string, isUpdate bool) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if isUpdate == true {
			res[resarr[i]] = resarr[i+1]
		} else if i+1 < len(resarr) {
			switch ent {
			case "sensor", "group":
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "type",
					"parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "room_template":
				switch resarr[i] {
				case "id", "slug", "orientation", "separators",
					"tiles", "colors", "aisles", "sizeWDHm",
					"technicalArea", "reservedArea":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "obj_template":
				switch resarr[i] {
				case "id", "slug", "description", "category",
					"slots", "colors", "components", "sizeWDHmm",
					"fbxModel":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			default:
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			}
		}
		i += 2
	}
	if len(attrs) > 0 {
		res["attributes"] = attrs
	}

	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_/", cmd.State.CurrPath+"/", 1)
}

func auxGetNode(path string) string {
	stk := cmd.StrToStack(path)
	nd := cmd.FindNodeInTree(&cmd.State.TreeHierarchy, stk)
	if nd != nil {
		return cmd.EntityToString((*nd).Entity)
	} else {
		println("Error while finding object in path")
	}
	return ""
}

func resolveReference(ref string) string {
	/*Probably code to reference SymbolTable and return data*/
	idx := dynamicMap[ref]
	item := dynamicSymbolTable[idx]
	switch item.(type) {
	case bool:
		dCatchNodePtr = &boolNode{BOOL, item.(bool)}
		if item.(bool) == false {
			return "false"
		} else {
			return "true"
		}
	case string:
		dCatchNodePtr = &strNode{STR, item.(string)}
		return item.(string)
	case int:
		dCatchNodePtr = &numNode{NUM, item.(int)}
		return strconv.Itoa(item.(int))
	/*case map[string]interface{}:
	  //dCatchNodePtr=&symbolReferenceNode{REFERENCE, }
	  return item.(map[string]interface{})[subIdx].(string)*/
	case *commonNode:
		dCatchNodePtr = item
		args := ""
		for i := range item.(*commonNode).args {
			args += item.(*commonNode).args[i].(string)
		}
		return item.(*commonNode).val + " " + args
	default:
		println("Unable to deref your variable ")
		return ""
	}
}

func formActualPath(x string) string {
	if x == "" || x == "." {
		return cmd.State.CurrPath
	} else if string(x[0]) == "/" {
		return x

	} else {
		return cmd.State.CurrPath + "/" + x
	}
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57452
	yyEofCode      = 57344
	TOK_AC         = 57358
	TOK_AISLE      = 57361
	TOK_AND        = 57427
	TOK_APOST      = 57447
	TOK_ATTRSPEC   = 57404
	TOK_BLDG       = 57350
	TOK_BOOL       = 57368
	TOK_CABINET    = 57359
	TOK_CAM        = 57450
	TOK_CD         = 57379
	TOK_CLR        = 57381
	TOK_CMDFLAG    = 57375
	TOK_CMDS       = 57413
	TOK_COL        = 57407
	TOK_COMMA      = 57411
	TOK_CORIDOR    = 57355
	TOK_CREATE     = 57369
	TOK_DELETE     = 57372
	TOK_DEREF      = 57416
	TOK_DEVICE     = 57353
	TOK_DIV        = 57432
	TOK_DO         = 57442
	TOK_DOC        = 57378
	TOK_DONE       = 57438
	TOK_DOT        = 57412
	TOK_ELIF       = 57441
	TOK_ELSE       = 57421
	TOK_EQUAL      = 57374
	TOK_EXIT       = 57377
	TOK_FI         = 57437
	TOK_FOR        = 57419
	TOK_GET        = 57370
	TOK_GREATER    = 57434
	TOK_GREP       = 57382
	TOK_GROUP      = 57356
	TOK_IF         = 57418
	TOK_IN         = 57428
	TOK_LBLOCK     = 57422
	TOK_LBRAC      = 57409
	TOK_LEN        = 57443
	TOK_LESS       = 57435
	TOK_LPAREN     = 57424
	TOK_LS         = 57383
	TOK_LSAC       = 57393
	TOK_LSAISLE    = 57389
	TOK_LSBLDG     = 57388
	TOK_LSCAB      = 57391
	TOK_LSCORRIDOR = 57396
	TOK_LSDEV      = 57399
	TOK_LSOG       = 57385
	TOK_LSPANEL    = 57394
	TOK_LSRACK     = 57398
	TOK_LSROOM     = 57397
	TOK_LSSENSOR   = 57392
	TOK_LSSITE     = 57387
	TOK_LSTEN      = 57386
	TOK_LSTILE     = 57390
	TOK_LSWALL     = 57395
	TOK_MOD        = 57439
	TOK_MULT       = 57433
	TOK_NOT        = 57431
	TOK_NUM        = 57346
	TOK_OBJ_TMPL   = 57365
	TOK_OCBLDG     = 57400
	TOK_OCCORIDOR  = 57446
	TOK_OCDEL      = 57367
	TOK_OCDEV      = 57401
	TOK_OCGROUP    = 57444
	TOK_OCRACK     = 57402
	TOK_OCROOM     = 57403
	TOK_OCSITE     = 57405
	TOK_OCTENANT   = 57406
	TOK_OCWALL     = 57445
	TOK_OR         = 57426
	TOK_PANEL      = 57360
	TOK_PARTIAL    = 57449
	TOK_PLUS       = 57366
	TOK_PRNT       = 57429
	TOK_PWD        = 57380
	TOK_QUOT       = 57430
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57423
	TOK_RBRAC      = 57410
	TOK_ROOM       = 57351
	TOK_ROOM_TMPL  = 57364
	TOK_RPAREN     = 57425
	TOK_SEARCH     = 57373
	TOK_SELECT     = 57408
	TOK_SEMICOL    = 57417
	TOK_SENSOR     = 57363
	TOK_SITE       = 57349
	TOK_SLASH      = 57376
	TOK_STR        = 57354
	TOK_TEMPLATE   = 57414
	TOK_TENANT     = 57348
	TOK_THEN       = 57436
	TOK_TILE       = 57362
	TOK_TREE       = 57384
	TOK_UI         = 57451
	TOK_UNSET      = 57440
	TOK_UPDATE     = 57371
	TOK_USE_JSON   = 57448
	TOK_VAR        = 57415
	TOK_WALL       = 57357
	TOK_WHILE      = 57420
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -262
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57438: 0,   // TOK_DONE (311x)
		57410: 1,   // TOK_RBRAC (307x)
		57425: 2,   // TOK_RPAREN (307x)
		57421: 3,   // TOK_ELSE (305x)
		57417: 4,   // TOK_SEMICOL (304x)
		57441: 5,   // TOK_ELIF (303x)
		57437: 6,   // TOK_FI (303x)
		57344: 7,   // $end (302x)
		57347: 8,   // TOK_WORD (240x)
		57367: 9,   // TOK_OCDEL (222x)
		57416: 10,  // TOK_DEREF (195x)
		57412: 11,  // TOK_DOT (118x)
		57407: 12,  // TOK_COL (109x)
		57376: 13,  // TOK_SLASH (108x)
		57346: 14,  // TOK_NUM (107x)
		57366: 15,  // TOK_PLUS (93x)
		57482: 16,  // P1 (91x)
		57481: 17,  // P (88x)
		57368: 18,  // TOK_BOOL (86x)
		57404: 19,  // TOK_ATTRSPEC (78x)
		57431: 20,  // TOK_NOT (63x)
		57374: 21,  // TOK_EQUAL (57x)
		57426: 22,  // TOK_OR (49x)
		57448: 23,  // TOK_USE_JSON (45x)
		57424: 24,  // TOK_LPAREN (43x)
		57423: 25,  // TOK_RBLOCK (40x)
		57486: 26,  // WORDORNUM (39x)
		57354: 27,  // TOK_STR (37x)
		57487: 28,  // factor (36x)
		57443: 29,  // TOK_LEN (36x)
		57493: 30,  // unary (34x)
		57427: 31,  // TOK_AND (31x)
		57492: 32,  // term (29x)
		57411: 33,  // TOK_COMMA (28x)
		57488: 34,  // nex (27x)
		57484: 35,  // REL (23x)
		57458: 36,  // EQAL (21x)
		57464: 37,  // JOIN (20x)
		57434: 38,  // TOK_GREATER (20x)
		57435: 39,  // TOK_LESS (20x)
		57459: 40,  // EXPR (19x)
		57432: 41,  // TOK_DIV (19x)
		57439: 42,  // TOK_MOD (19x)
		57433: 43,  // TOK_MULT (19x)
		57379: 44,  // TOK_CD (17x)
		57383: 45,  // TOK_LS (17x)
		57388: 46,  // TOK_LSBLDG (17x)
		57399: 47,  // TOK_LSDEV (17x)
		57385: 48,  // TOK_LSOG (17x)
		57398: 49,  // TOK_LSRACK (17x)
		57397: 50,  // TOK_LSROOM (17x)
		57387: 51,  // TOK_LSSITE (17x)
		57386: 52,  // TOK_LSTEN (17x)
		57429: 53,  // TOK_PRNT (17x)
		57380: 54,  // TOK_PWD (17x)
		57384: 55,  // TOK_TREE (17x)
		57440: 56,  // TOK_UNSET (17x)
		57453: 57,  // BASH (16x)
		57483: 58,  // Q (16x)
		57381: 59,  // TOK_CLR (16x)
		57369: 60,  // TOK_CREATE (16x)
		57372: 61,  // TOK_DELETE (16x)
		57378: 62,  // TOK_DOC (16x)
		57377: 63,  // TOK_EXIT (16x)
		57370: 64,  // TOK_GET (16x)
		57382: 65,  // TOK_GREP (16x)
		57393: 66,  // TOK_LSAC (16x)
		57389: 67,  // TOK_LSAISLE (16x)
		57391: 68,  // TOK_LSCAB (16x)
		57396: 69,  // TOK_LSCORRIDOR (16x)
		57394: 70,  // TOK_LSPANEL (16x)
		57392: 71,  // TOK_LSSENSOR (16x)
		57390: 72,  // TOK_LSTILE (16x)
		57395: 73,  // TOK_LSWALL (16x)
		57371: 74,  // TOK_UPDATE (16x)
		57465: 75,  // K (15x)
		57468: 76,  // NT_CREATE (15x)
		57469: 77,  // NT_DEL (15x)
		57470: 78,  // NT_GET (15x)
		57471: 79,  // NT_UPDATE (15x)
		57408: 80,  // TOK_SELECT (15x)
		57472: 81,  // OCCHOOSE (14x)
		57474: 82,  // OCDEL (14x)
		57476: 83,  // OCGET (14x)
		57478: 84,  // OCSEL (14x)
		57479: 85,  // OCUPDATE (14x)
		57450: 86,  // TOK_CAM (14x)
		57430: 87,  // TOK_QUOT (14x)
		57451: 88,  // TOK_UI (14x)
		57461: 89,  // FUNC (13x)
		57463: 90,  // HANDLEUI (13x)
		57475: 91,  // OCDOT (13x)
		57477: 92,  // OCLISYNTX (13x)
		57491: 93,  // stmnt (13x)
		57419: 94,  // TOK_FOR (13x)
		57418: 95,  // TOK_IF (13x)
		57420: 96,  // TOK_WHILE (13x)
		57455: 97,  // CTRL (12x)
		57480: 98,  // OPEN_STMT (12x)
		57489: 99,  // st2 (12x)
		57422: 100, // TOK_LBLOCK (10x)
		57460: 101, // F (6x)
		57358: 102, // TOK_AC (5x)
		57361: 103, // TOK_AISLE (5x)
		57350: 104, // TOK_BLDG (5x)
		57359: 105, // TOK_CABINET (5x)
		57355: 106, // TOK_CORIDOR (5x)
		57353: 107, // TOK_DEVICE (5x)
		57356: 108, // TOK_GROUP (5x)
		57365: 109, // TOK_OBJ_TMPL (5x)
		57360: 110, // TOK_PANEL (5x)
		57352: 111, // TOK_RACK (5x)
		57351: 112, // TOK_ROOM (5x)
		57364: 113, // TOK_ROOM_TMPL (5x)
		57363: 114, // TOK_SENSOR (5x)
		57349: 115, // TOK_SITE (5x)
		57348: 116, // TOK_TENANT (5x)
		57362: 117, // TOK_TILE (5x)
		57357: 118, // TOK_WALL (5x)
		57454: 119, // CDORFG (3x)
		57456: 120, // E (3x)
		57413: 121, // TOK_CMDS (3x)
		57409: 122, // TOK_LBRAC (3x)
		57457: 123, // EIF (2x)
		57462: 124, // GETOBJS (2x)
		57466: 125, // NODEACC (2x)
		57467: 126, // NODEGETTER (2x)
		57473: 127, // OCCR (2x)
		57442: 128, // TOK_DO (2x)
		57400: 129, // TOK_OCBLDG (2x)
		57446: 130, // TOK_OCCORIDOR (2x)
		57401: 131, // TOK_OCDEV (2x)
		57444: 132, // TOK_OCGROUP (2x)
		57402: 133, // TOK_OCRACK (2x)
		57403: 134, // TOK_OCROOM (2x)
		57405: 135, // TOK_OCSITE (2x)
		57406: 136, // TOK_OCTENANT (2x)
		57445: 137, // TOK_OCWALL (2x)
		57414: 138, // TOK_TEMPLATE (2x)
		57436: 139, // TOK_THEN (2x)
		57415: 140, // TOK_VAR (2x)
		57485: 141, // WNARG (2x)
		57490: 142, // start (1x)
		57428: 143, // TOK_IN (1x)
		57449: 144, // TOK_PARTIAL (1x)
		57452: 145, // $default (0x)
		57345: 146, // error (0x)
		57447: 147, // TOK_APOST (0x)
		57375: 148, // TOK_CMDFLAG (0x)
		57373: 149, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_RBRAC",
		"TOK_RPAREN",
		"TOK_ELSE",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"$end",
		"TOK_WORD",
		"TOK_OCDEL",
		"TOK_DEREF",
		"TOK_DOT",
		"TOK_COL",
		"TOK_SLASH",
		"TOK_NUM",
		"TOK_PLUS",
		"P1",
		"P",
		"TOK_BOOL",
		"TOK_ATTRSPEC",
		"TOK_NOT",
		"TOK_EQUAL",
		"TOK_OR",
		"TOK_USE_JSON",
		"TOK_LPAREN",
		"TOK_RBLOCK",
		"WORDORNUM",
		"TOK_STR",
		"factor",
		"TOK_LEN",
		"unary",
		"TOK_AND",
		"term",
		"TOK_COMMA",
		"nex",
		"REL",
		"EQAL",
		"JOIN",
		"TOK_GREATER",
		"TOK_LESS",
		"EXPR",
		"TOK_DIV",
		"TOK_MOD",
		"TOK_MULT",
		"TOK_CD",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_TREE",
		"TOK_UNSET",
		"BASH",
		"Q",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_LSAC",
		"TOK_LSAISLE",
		"TOK_LSCAB",
		"TOK_LSCORRIDOR",
		"TOK_LSPANEL",
		"TOK_LSSENSOR",
		"TOK_LSTILE",
		"TOK_LSWALL",
		"TOK_UPDATE",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"TOK_SELECT",
		"OCCHOOSE",
		"OCDEL",
		"OCGET",
		"OCSEL",
		"OCUPDATE",
		"TOK_CAM",
		"TOK_QUOT",
		"TOK_UI",
		"FUNC",
		"HANDLEUI",
		"OCDOT",
		"OCLISYNTX",
		"stmnt",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"TOK_LBLOCK",
		"F",
		"TOK_AC",
		"TOK_AISLE",
		"TOK_BLDG",
		"TOK_CABINET",
		"TOK_CORIDOR",
		"TOK_DEVICE",
		"TOK_GROUP",
		"TOK_OBJ_TMPL",
		"TOK_PANEL",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_ROOM_TMPL",
		"TOK_SENSOR",
		"TOK_SITE",
		"TOK_TENANT",
		"TOK_TILE",
		"TOK_WALL",
		"CDORFG",
		"E",
		"TOK_CMDS",
		"TOK_LBRAC",
		"EIF",
		"GETOBJS",
		"NODEACC",
		"NODEGETTER",
		"OCCR",
		"TOK_DO",
		"TOK_OCBLDG",
		"TOK_OCCORIDOR",
		"TOK_OCDEV",
		"TOK_OCGROUP",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_OCWALL",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"WNARG",
		"start",
		"TOK_IN",
		"TOK_PARTIAL",
		"$default",
		"error",
		"TOK_APOST",
		"TOK_CMDFLAG",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {142, 1},
		2:   {99, 1},
		3:   {99, 3},
		4:   {99, 1},
		5:   {93, 1},
		6:   {93, 1},
		7:   {93, 1},
		8:   {93, 1},
		9:   {93, 0},
		10:  {97, 1},
		11:  {98, 7},
		12:  {98, 10},
		13:  {98, 6},
		14:  {98, 15},
		15:  {98, 7},
		16:  {98, 12},
		17:  {98, 10},
		18:  {98, 10},
		19:  {123, 7},
		20:  {123, 0},
		21:  {40, 3},
		22:  {40, 1},
		23:  {37, 3},
		24:  {37, 1},
		25:  {36, 4},
		26:  {36, 4},
		27:  {36, 1},
		28:  {35, 3},
		29:  {35, 4},
		30:  {35, 4},
		31:  {35, 3},
		32:  {35, 1},
		33:  {34, 3},
		34:  {34, 3},
		35:  {34, 1},
		36:  {32, 3},
		37:  {32, 3},
		38:  {32, 3},
		39:  {32, 1},
		40:  {30, 2},
		41:  {30, 2},
		42:  {30, 1},
		43:  {28, 3},
		44:  {28, 1},
		45:  {28, 2},
		46:  {28, 5},
		47:  {28, 4},
		48:  {28, 1},
		49:  {28, 1},
		50:  {28, 1},
		51:  {75, 1},
		52:  {75, 1},
		53:  {75, 1},
		54:  {75, 1},
		55:  {76, 5},
		56:  {76, 5},
		57:  {78, 2},
		58:  {78, 3},
		59:  {79, 4},
		60:  {79, 6},
		61:  {79, 7},
		62:  {77, 2},
		63:  {120, 1},
		64:  {120, 1},
		65:  {120, 1},
		66:  {120, 1},
		67:  {120, 1},
		68:  {120, 1},
		69:  {120, 1},
		70:  {120, 1},
		71:  {120, 1},
		72:  {120, 1},
		73:  {120, 1},
		74:  {120, 1},
		75:  {120, 1},
		76:  {120, 1},
		77:  {120, 1},
		78:  {120, 1},
		79:  {120, 1},
		80:  {26, 1},
		81:  {26, 1},
		82:  {26, 4},
		83:  {26, 4},
		84:  {26, 4},
		85:  {26, 4},
		86:  {26, 1},
		87:  {26, 2},
		88:  {101, 4},
		89:  {101, 3},
		90:  {101, 4},
		91:  {101, 3},
		92:  {101, 3},
		93:  {101, 4},
		94:  {17, 1},
		95:  {17, 2},
		96:  {16, 3},
		97:  {16, 1},
		98:  {16, 4},
		99:  {16, 3},
		100: {16, 2},
		101: {16, 1},
		102: {16, 2},
		103: {16, 0},
		104: {58, 2},
		105: {58, 2},
		106: {58, 2},
		107: {58, 2},
		108: {58, 2},
		109: {58, 2},
		110: {58, 2},
		111: {58, 2},
		112: {58, 2},
		113: {58, 2},
		114: {58, 2},
		115: {58, 2},
		116: {58, 2},
		117: {58, 2},
		118: {58, 2},
		119: {58, 2},
		120: {58, 2},
		121: {58, 3},
		122: {58, 4},
		123: {58, 6},
		124: {58, 1},
		125: {57, 1},
		126: {57, 1},
		127: {57, 4},
		128: {57, 1},
		129: {57, 1},
		130: {57, 1},
		131: {57, 1},
		132: {57, 2},
		133: {57, 2},
		134: {57, 2},
		135: {57, 2},
		136: {57, 2},
		137: {57, 2},
		138: {57, 2},
		139: {57, 2},
		140: {57, 2},
		141: {57, 2},
		142: {57, 2},
		143: {57, 2},
		144: {57, 2},
		145: {57, 2},
		146: {57, 2},
		147: {57, 2},
		148: {57, 2},
		149: {57, 2},
		150: {57, 2},
		151: {57, 2},
		152: {57, 2},
		153: {57, 2},
		154: {57, 2},
		155: {57, 2},
		156: {57, 2},
		157: {57, 2},
		158: {57, 3},
		159: {57, 3},
		160: {57, 3},
		161: {57, 2},
		162: {57, 2},
		163: {92, 2},
		164: {92, 1},
		165: {92, 1},
		166: {92, 1},
		167: {92, 1},
		168: {92, 1},
		169: {92, 1},
		170: {92, 1},
		171: {127, 5},
		172: {127, 5},
		173: {127, 5},
		174: {127, 5},
		175: {127, 7},
		176: {127, 7},
		177: {127, 7},
		178: {127, 7},
		179: {127, 7},
		180: {127, 7},
		181: {127, 7},
		182: {127, 7},
		183: {127, 11},
		184: {127, 11},
		185: {127, 6},
		186: {127, 6},
		187: {127, 9},
		188: {127, 9},
		189: {127, 5},
		190: {127, 5},
		191: {127, 5},
		192: {127, 5},
		193: {127, 5},
		194: {127, 5},
		195: {127, 5},
		196: {127, 5},
		197: {127, 5},
		198: {127, 5},
		199: {127, 5},
		200: {127, 5},
		201: {127, 5},
		202: {127, 5},
		203: {127, 5},
		204: {127, 5},
		205: {127, 5},
		206: {127, 5},
		207: {127, 5},
		208: {127, 5},
		209: {127, 5},
		210: {127, 5},
		211: {127, 5},
		212: {127, 5},
		213: {127, 5},
		214: {127, 5},
		215: {82, 2},
		216: {85, 5},
		217: {83, 2},
		218: {124, 3},
		219: {124, 1},
		220: {81, 4},
		221: {91, 8},
		222: {91, 9},
		223: {91, 9},
		224: {91, 10},
		225: {91, 9},
		226: {91, 9},
		227: {91, 9},
		228: {91, 9},
		229: {91, 9},
		230: {91, 6},
		231: {91, 4},
		232: {91, 4},
		233: {91, 6},
		234: {91, 6},
		235: {91, 2},
		236: {91, 5},
		237: {91, 7},
		238: {91, 8},
		239: {91, 4},
		240: {84, 1},
		241: {84, 5},
		242: {90, 7},
		243: {90, 5},
		244: {90, 17},
		245: {141, 3},
		246: {141, 1},
		247: {89, 6},
		248: {89, 1},
		249: {126, 2},
		250: {126, 0},
		251: {125, 1},
		252: {125, 1},
		253: {125, 4},
		254: {125, 4},
		255: {125, 4},
		256: {125, 4},
		257: {125, 1},
		258: {125, 2},
		259: {125, 5},
		260: {119, 3},
		261: {119, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [664][]uint16{
		// 0
		{4: 253, 7: 253, 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 264, 142: 263},
		{7: 262},
		{7: 261},
		{260, 260, 3: 260, 924, 260, 260, 260},
		{258, 258, 3: 258, 5: 258, 258, 258},
		// 5
		{257, 257, 257, 257, 257, 257, 257, 257},
		{256, 256, 256, 256, 256, 256, 256, 256},
		{255, 255, 255, 255, 255, 255, 255, 255},
		{254, 254, 254, 254, 254, 254, 254, 254},
		{252, 252, 3: 252, 5: 252, 252, 252},
		// 10
		{100: 907},
		{24: 902},
		{8: 862, 24: 861},
		{211, 211, 211, 211, 211, 211, 211, 211},
		{210, 210, 210, 210, 210, 210, 210, 210},
		// 15
		{209, 209, 209, 209, 209, 209, 209, 209},
		{208, 208, 208, 208, 208, 208, 208, 208},
		{102: 829, 832, 825, 831, 836, 828, 837, 838, 830, 827, 826, 839, 835, 824, 823, 833, 834, 120: 854},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 851, 102: 829, 832, 825, 831, 836, 828, 837, 838, 830, 827, 826, 839, 835, 824, 823, 833, 834, 120: 852},
		{8: 410, 412, 413, 411, 159, 284, 16: 283, 817},
		// 20
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 816},
		{168, 168, 168, 168, 168, 168, 168, 168, 12: 168, 14: 168, 19: 168, 33: 168},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 159, 14: 159, 16: 815, 19: 159, 33: 159},
		{14, 14, 14, 14, 14, 14, 14, 14, 11: 426, 165, 425, 24: 810},
		{11: 422, 121: 772, 138: 773, 140: 771},
		// 25
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 161, 284, 16: 283, 770},
		{8: 759},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 758},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 757},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 756},
		// 30
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 755},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 754},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 753},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 752},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 751},
		// 35
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 750},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 749},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 748},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 747},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 746},
		// 40
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 745},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 744},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 743},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 159, 16: 283, 741},
		{9: 733, 734},
		// 45
		{138, 138, 138, 138, 138, 138, 138, 138},
		{137, 137, 137, 137, 137, 137, 137, 137},
		{136, 136, 136, 136, 136, 136, 136, 136},
		{87: 708},
		{134, 134, 134, 134, 134, 134, 134, 134},
		// 50
		{133, 133, 133, 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 686, 701, 11: 702, 15: 703, 21: 704, 44: 679, 676, 697, 700, 694, 699, 698, 696, 695, 678, 677, 687, 691, 60: 682, 685, 64: 683, 74: 684, 80: 692, 86: 680, 88: 681, 94: 690, 688, 689, 121: 693},
		{102: 452, 455, 439, 454, 447, 445, 449, 458, 453, 443, 441, 459, 457, 437, 435, 456, 451, 127: 433, 129: 438, 446, 444, 448, 442, 440, 436, 434, 450},
		{98, 98, 98, 98, 98, 98, 98, 98},
		// 55
		{97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93},
		// 60
		{92, 92, 92, 92, 92, 92, 92, 92},
		{12: 429},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 414, 122: 415},
		{22, 22, 22, 22, 22, 22, 22, 22, 11: 406},
		{11: 400},
		// 65
		{11: 328},
		{8: 329},
		{21: 330},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 331, 100: 348},
		{19, 19, 19, 19, 19, 19, 19, 19, 22: 367},
		// 70
		{240, 240, 240, 240, 240, 240, 240, 240, 22: 240, 25: 240, 31: 370},
		{238, 238, 238, 238, 238, 238, 238, 238, 20: 373, 372, 238, 25: 238, 31: 238},
		{235, 235, 235, 235, 235, 235, 235, 235, 20: 235, 235, 235, 25: 235, 31: 235},
		{230, 230, 230, 230, 230, 230, 230, 230, 9: 391, 15: 390, 20: 230, 230, 230, 25: 230, 31: 230, 38: 389, 388},
		{227, 227, 227, 227, 227, 227, 227, 227, 9: 227, 15: 227, 20: 227, 227, 227, 25: 227, 31: 227, 38: 227, 227, 41: 383, 384, 382},
		// 75
		{223, 223, 223, 223, 223, 223, 223, 223, 9: 223, 15: 223, 20: 223, 223, 223, 25: 223, 31: 223, 38: 223, 223, 41: 223, 223, 223},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 381},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 380},
		{220, 220, 220, 220, 220, 220, 220, 220, 9: 220, 15: 220, 20: 220, 220, 220, 25: 220, 31: 220, 38: 220, 220, 41: 220, 220, 220},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 378},
		// 80
		{218, 218, 218, 218, 218, 218, 218, 218, 9: 218, 15: 218, 20: 218, 218, 218, 25: 218, 31: 218, 33: 218, 38: 218, 218, 41: 218, 218, 218},
		{8: 364},
		{24: 361},
		{214, 214, 214, 214, 214, 214, 214, 214, 9: 214, 15: 214, 20: 214, 214, 214, 25: 214, 31: 214, 33: 214, 38: 214, 214, 41: 214, 214, 214},
		{213, 213, 213, 213, 213, 213, 213, 213, 9: 213, 15: 213, 20: 213, 213, 213, 25: 213, 31: 213, 33: 213, 38: 213, 213, 41: 213, 213, 213},
		// 85
		{212, 212, 212, 212, 212, 212, 212, 212, 9: 212, 15: 212, 20: 212, 212, 212, 25: 212, 31: 212, 33: 212, 38: 212, 212, 41: 212, 212, 212},
		{14: 349},
		{33: 350},
		{14: 351},
		{33: 352},
		// 90
		{14: 353},
		{25: 354},
		{19: 355},
		{100: 356},
		{14: 357},
		// 95
		{33: 358},
		{14: 359},
		{25: 360},
		{18, 18, 18, 18, 18, 18, 18, 18},
		{8: 362},
		// 100
		{2: 363},
		{215, 215, 215, 215, 215, 215, 215, 215, 9: 215, 15: 215, 20: 215, 215, 215, 25: 215, 31: 215, 33: 215, 38: 215, 215, 41: 215, 215, 215},
		{217, 217, 217, 217, 217, 217, 217, 217, 9: 217, 15: 217, 20: 217, 217, 217, 25: 217, 31: 217, 33: 217, 38: 217, 217, 41: 217, 217, 217, 100: 365},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 366},
		{22: 367, 25: 368},
		// 105
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 369},
		{216, 216, 216, 216, 216, 216, 216, 216, 9: 216, 15: 216, 20: 216, 216, 216, 25: 216, 31: 216, 33: 216, 38: 216, 216, 41: 216, 216, 216},
		{241, 241, 241, 241, 241, 241, 241, 241, 22: 241, 25: 241, 31: 370},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 371},
		{239, 239, 239, 239, 239, 239, 239, 239, 20: 373, 372, 239, 25: 239, 31: 239},
		// 110
		{21: 376},
		{21: 374},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 375},
		{236, 236, 236, 236, 236, 236, 236, 236, 20: 236, 236, 236, 25: 236, 31: 236},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 377},
		// 115
		{237, 237, 237, 237, 237, 237, 237, 237, 20: 237, 237, 237, 25: 237, 31: 237},
		{2: 379, 22: 367},
		{219, 219, 219, 219, 219, 219, 219, 219, 9: 219, 15: 219, 20: 219, 219, 219, 25: 219, 31: 219, 33: 219, 38: 219, 219, 41: 219, 219, 219},
		{221, 221, 221, 221, 221, 221, 221, 221, 9: 221, 15: 221, 20: 221, 221, 221, 25: 221, 31: 221, 38: 221, 221, 41: 221, 221, 221},
		{222, 222, 222, 222, 222, 222, 222, 222, 9: 222, 15: 222, 20: 222, 222, 222, 25: 222, 31: 222, 38: 222, 222, 41: 222, 222, 222},
		// 120
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 387},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 386},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 385},
		{224, 224, 224, 224, 224, 224, 224, 224, 9: 224, 15: 224, 20: 224, 224, 224, 25: 224, 31: 224, 38: 224, 224, 41: 224, 224, 224},
		{225, 225, 225, 225, 225, 225, 225, 225, 9: 225, 15: 225, 20: 225, 225, 225, 25: 225, 31: 225, 38: 225, 225, 41: 225, 225, 225},
		// 125
		{226, 226, 226, 226, 226, 226, 226, 226, 9: 226, 15: 226, 20: 226, 226, 226, 25: 226, 31: 226, 38: 226, 226, 41: 226, 226, 226},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 398, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 397},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 394, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 395},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 393},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 392},
		// 130
		{228, 228, 228, 228, 228, 228, 228, 228, 9: 228, 15: 228, 20: 228, 228, 228, 25: 228, 31: 228, 38: 228, 228, 41: 383, 384, 382},
		{229, 229, 229, 229, 229, 229, 229, 229, 9: 229, 15: 229, 20: 229, 229, 229, 25: 229, 31: 229, 38: 229, 229, 41: 383, 384, 382},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 396},
		{231, 231, 231, 231, 231, 231, 231, 231, 9: 391, 15: 390, 20: 231, 231, 231, 25: 231, 31: 231},
		{232, 232, 232, 232, 232, 232, 232, 232, 9: 391, 15: 390, 20: 232, 232, 232, 25: 232, 31: 232},
		// 135
		{234, 234, 234, 234, 234, 234, 234, 234, 9: 391, 15: 390, 20: 234, 234, 234, 25: 234, 31: 234},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 399},
		{233, 233, 233, 233, 233, 233, 233, 233, 9: 391, 15: 390, 20: 233, 233, 233, 25: 233, 31: 233},
		{8: 401},
		{21: 402},
		// 140
		{100: 403},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 404},
		{22: 367, 25: 405},
		{20, 20, 20, 20, 20, 20, 20, 20},
		{8: 407},
		// 145
		{21: 408},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 409},
		{21, 21, 21, 21, 21, 21, 21, 21, 22: 367},
		{165, 165, 165, 165, 165, 165, 165, 165, 11: 426, 165, 425, 165, 19: 165, 33: 165},
		{11: 422},
		// 150
		{161, 161, 161, 161, 161, 161, 161, 161, 12: 161, 14: 161, 19: 161, 33: 161},
		{8: 421},
		{45, 45, 45, 45, 45, 45, 45, 45},
		{1: 159, 8: 410, 412, 413, 411, 13: 284, 16: 283, 416, 33: 159, 124: 417},
		{1: 43, 33: 419},
		// 155
		{1: 418},
		{42, 42, 42, 42, 42, 42, 42, 42},
		{1: 159, 8: 410, 412, 413, 411, 13: 284, 16: 283, 416, 33: 159, 124: 420},
		{1: 44},
		{160, 160, 160, 160, 160, 160, 160, 160, 12: 160, 14: 160, 19: 160, 33: 160},
		// 160
		{162, 162, 162, 162, 162, 162, 162, 162, 12: 162, 423, 162, 19: 162, 33: 162},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 159, 14: 159, 16: 424, 19: 159, 33: 159},
		{164, 164, 164, 164, 164, 164, 164, 164, 12: 164, 14: 164, 19: 164, 33: 164},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 159, 14: 159, 16: 428, 19: 159, 33: 159},
		{8: 427},
		// 165
		{163, 163, 163, 163, 163, 163, 163, 163, 12: 163, 14: 163, 19: 163, 33: 163},
		{166, 166, 166, 166, 166, 166, 166, 166, 12: 166, 14: 166, 19: 166, 33: 166},
		{8: 430},
		{21: 431},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 432},
		// 170
		{46, 46, 46, 46, 46, 46, 46, 46, 22: 367},
		{99, 99, 99, 99, 99, 99, 99, 99},
		{12: 669},
		{12: 662},
		{12: 655},
		// 175
		{12: 648},
		{12: 639},
		{12: 630},
		{12: 621},
		{12: 612},
		// 180
		{12: 603},
		{12: 594},
		{12: 585},
		{12: 576},
		{12: 563},
		// 185
		{12: 550},
		{12: 542},
		{12: 531},
		{12: 520},
		{12: 492},
		// 190
		{12: 488},
		{12: 484},
		{12: 480},
		{12: 476},
		{12: 472},
		// 195
		{12: 468},
		{12: 464},
		{12: 460},
		{23: 461},
		{12: 462},
		// 200
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 463},
		{48, 48, 48, 48, 48, 48, 48, 48},
		{23: 465},
		{12: 466},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 467},
		// 205
		{49, 49, 49, 49, 49, 49, 49, 49},
		{23: 469},
		{12: 470},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 471},
		{50, 50, 50, 50, 50, 50, 50, 50},
		// 210
		{23: 473},
		{12: 474},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 475},
		{51, 51, 51, 51, 51, 51, 51, 51},
		{23: 477},
		// 215
		{12: 478},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 479},
		{52, 52, 52, 52, 52, 52, 52, 52},
		{23: 481},
		{12: 482},
		// 220
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 483},
		{53, 53, 53, 53, 53, 53, 53, 53},
		{23: 485},
		{12: 486},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 487},
		// 225
		{54, 54, 54, 54, 54, 54, 54, 54},
		{23: 489},
		{12: 490},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 491},
		{55, 55, 55, 55, 55, 55, 55, 55},
		// 230
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 493, 19: 159, 23: 494},
		{19: 497},
		{12: 495},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 496},
		{56, 56, 56, 56, 56, 56, 56, 56},
		// 235
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 504},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 19: 182},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 19: 181},
		{8: 515},
		{8: 510},
		// 240
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 19: 176},
		{8: 509},
		{19: 505},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 506},
		{19: 507},
		// 245
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 508},
		{74, 74, 74, 74, 74, 74, 74, 74},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 19: 175},
		{9: 511, 15: 512},
		{8: 514},
		// 250
		{8: 513},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 19: 177},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 19: 178},
		{9: 517, 15: 516},
		{8: 519},
		// 255
		{8: 518},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 19: 179},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 19: 180},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 521, 19: 159, 23: 522},
		{19: 525},
		// 260
		{12: 523},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 524},
		{57, 57, 57, 57, 57, 57, 57, 57},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 526},
		{19: 527},
		// 265
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 528},
		{19: 529},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 530},
		{75, 75, 75, 75, 75, 75, 75, 75},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 532, 19: 159, 23: 533},
		// 270
		{19: 536},
		{12: 534},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 535},
		{58, 58, 58, 58, 58, 58, 58, 58},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 537},
		// 275
		{1, 1, 1, 1, 1, 1, 1, 1, 19: 539, 119: 538},
		{76, 76, 76, 76, 76, 76, 76, 76},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 540},
		{1, 1, 1, 1, 1, 1, 1, 1, 19: 539, 119: 541},
		{2, 2, 2, 2, 2, 2, 2, 2},
		// 280
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 543, 19: 159, 23: 544},
		{19: 547},
		{12: 545},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 546},
		{59, 59, 59, 59, 59, 59, 59, 59},
		// 285
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 548},
		{1, 1, 1, 1, 1, 1, 1, 1, 19: 539, 119: 549},
		{77, 77, 77, 77, 77, 77, 77, 77},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 551, 19: 159, 23: 552},
		{19: 555},
		// 290
		{12: 553},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 554},
		{60, 60, 60, 60, 60, 60, 60, 60},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 556},
		{19: 557},
		// 295
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 558},
		{19: 559},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 560},
		{19: 561},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 562},
		// 300
		{78, 78, 78, 78, 78, 78, 78, 78},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 564, 19: 159, 23: 565},
		{19: 568},
		{12: 566},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 567},
		// 305
		{61, 61, 61, 61, 61, 61, 61, 61},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 569},
		{19: 570},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 571},
		{19: 572},
		// 310
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 573},
		{19: 574},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 575},
		{79, 79, 79, 79, 79, 79, 79, 79},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 577, 19: 159, 23: 578},
		// 315
		{19: 581},
		{12: 579},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 580},
		{63, 63, 63, 63, 63, 63, 63, 63},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 582},
		// 320
		{19: 583},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 584},
		{80, 80, 80, 80, 80, 80, 80, 80},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 586, 19: 159, 23: 587},
		{19: 590},
		// 325
		{12: 588},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 589},
		{62, 62, 62, 62, 62, 62, 62, 62},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 591},
		{19: 592},
		// 330
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 593},
		{81, 81, 81, 81, 81, 81, 81, 81},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 595, 19: 159, 23: 596},
		{19: 599},
		{12: 597},
		// 335
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 598},
		{65, 65, 65, 65, 65, 65, 65, 65},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 600},
		{19: 601},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 602},
		// 340
		{82, 82, 82, 82, 82, 82, 82, 82},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 604, 19: 159, 23: 605},
		{19: 608},
		{12: 606},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 607},
		// 345
		{64, 64, 64, 64, 64, 64, 64, 64},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 609},
		{19: 610},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 611},
		{83, 83, 83, 83, 83, 83, 83, 83},
		// 350
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 613, 19: 159, 23: 614},
		{19: 617},
		{12: 615},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 616},
		{67, 67, 67, 67, 67, 67, 67, 67},
		// 355
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 618},
		{19: 619},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 620},
		{84, 84, 84, 84, 84, 84, 84, 84},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 622, 19: 159, 23: 623},
		// 360
		{19: 626},
		{12: 624},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 625},
		{66, 66, 66, 66, 66, 66, 66, 66},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 627},
		// 365
		{19: 628},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 629},
		{85, 85, 85, 85, 85, 85, 85, 85},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 631, 19: 159, 23: 632},
		{19: 635},
		// 370
		{12: 633},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 634},
		{69, 69, 69, 69, 69, 69, 69, 69},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 636},
		{19: 637},
		// 375
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 638},
		{86, 86, 86, 86, 86, 86, 86, 86},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 640, 19: 159, 23: 641},
		{19: 644},
		{12: 642},
		// 380
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 643},
		{68, 68, 68, 68, 68, 68, 68, 68},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 645},
		{19: 646},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 647},
		// 385
		{87, 87, 87, 87, 87, 87, 87, 87},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 649, 19: 159, 23: 650},
		{19: 653},
		{12: 651},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 652},
		// 390
		{71, 71, 71, 71, 71, 71, 71, 71},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 654},
		{88, 88, 88, 88, 88, 88, 88, 88},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 656, 19: 159, 23: 657},
		{19: 660},
		// 395
		{12: 658},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 659},
		{70, 70, 70, 70, 70, 70, 70, 70},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 661},
		{89, 89, 89, 89, 89, 89, 89, 89},
		// 400
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 663, 19: 159, 23: 664},
		{19: 667},
		{12: 665},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 666},
		{73, 73, 73, 73, 73, 73, 73, 73},
		// 405
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 668},
		{90, 90, 90, 90, 90, 90, 90, 90},
		{8: 410, 412, 413, 411, 13: 284, 16: 283, 670, 19: 159, 23: 671},
		{19: 674},
		{12: 672},
		// 410
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 673},
		{72, 72, 72, 72, 72, 72, 72, 72},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 675},
		{91, 91, 91, 91, 91, 91, 91, 91},
		{130, 130, 130, 130, 130, 130, 130, 130},
		// 415
		{129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125},
		// 420
		{124, 124, 124, 124, 124, 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120},
		// 425
		{119, 119, 119, 119, 119, 119, 119, 119},
		{118, 118, 118, 118, 118, 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117},
		{116, 116, 116, 116, 116, 116, 116, 116},
		{115, 115, 115, 115, 115, 115, 115, 115},
		// 430
		{114, 114, 114, 114, 114, 114, 114, 114},
		{113, 113, 113, 113, 113, 113, 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112},
		{111, 111, 111, 111, 111, 111, 111, 111},
		{110, 110, 110, 110, 110, 110, 110, 110},
		// 435
		{109, 109, 109, 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108},
		{107, 107, 107, 107, 107, 107, 107, 107},
		{106, 106, 106, 106, 106, 106, 106, 106},
		{105, 105, 105, 105, 105, 105, 105, 105},
		// 440
		{121: 706, 138: 705, 140: 707},
		{101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100},
		{104, 104, 104, 104, 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103},
		// 445
		{102, 102, 102, 102, 102, 102, 102, 102},
		{8: 711, 714, 716, 14: 712, 713, 18: 715, 87: 12, 125: 710, 709},
		{87: 732},
		{8: 711, 714, 716, 14: 712, 713, 18: 715, 87: 12, 125: 710, 731},
		{8: 11, 11, 11, 14: 11, 11, 18: 11, 87: 11},
		// 450
		{8: 10, 10, 10, 14: 10, 10, 18: 10, 87: 10},
		{8: 726},
		{8: 721},
		{8: 5, 5, 5, 14: 5, 5, 18: 5, 87: 5},
		{8: 717},
		// 455
		{8: 4, 4, 4, 14: 4, 4, 18: 4, 87: 4, 100: 718},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 719},
		{22: 367, 25: 720},
		{8: 3, 3, 3, 14: 3, 3, 18: 3, 87: 3},
		{9: 722, 15: 723},
		// 460
		{8: 725},
		{8: 724},
		{8: 6, 6, 6, 14: 6, 6, 18: 6, 87: 6},
		{8: 7, 7, 7, 14: 7, 7, 18: 7, 87: 7},
		{9: 728, 15: 727},
		// 465
		{8: 730},
		{8: 729},
		{8: 8, 8, 8, 14: 8, 8, 18: 8, 87: 8},
		{8: 9, 9, 9, 14: 9, 9, 18: 9, 87: 9},
		{87: 13},
		// 470
		{135, 135, 135, 135, 135, 135, 135, 135},
		{8: 739},
		{8: 735},
		{100: 736},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 737},
		// 475
		{22: 367, 25: 738},
		{139, 139, 139, 139, 139, 139, 139, 139},
		{8: 740},
		{140, 140, 140, 140, 140, 140, 140, 140},
		{142, 142, 142, 142, 142, 142, 142, 142, 14: 742},
		// 480
		{141, 141, 141, 141, 141, 141, 141, 141},
		{143, 143, 143, 143, 143, 143, 143, 143},
		{144, 144, 144, 144, 144, 144, 144, 144},
		{145, 145, 145, 145, 145, 145, 145, 145},
		{146, 146, 146, 146, 146, 146, 146, 146},
		// 485
		{147, 147, 147, 147, 147, 147, 147, 147},
		{148, 148, 148, 148, 148, 148, 148, 148},
		{149, 149, 149, 149, 149, 149, 149, 149},
		{150, 150, 150, 150, 150, 150, 150, 150},
		{151, 151, 151, 151, 151, 151, 151, 151},
		// 490
		{152, 152, 152, 152, 152, 152, 152, 152},
		{153, 153, 153, 153, 153, 153, 153, 153},
		{154, 154, 154, 154, 154, 154, 154, 154},
		{155, 155, 155, 155, 155, 155, 155, 155},
		{156, 156, 156, 156, 156, 156, 156, 156},
		// 495
		{157, 157, 157, 157, 157, 157, 157, 157},
		{158, 158, 158, 158, 158, 158, 158, 158},
		{27, 27, 27, 27, 27, 27, 27, 27, 12: 160, 21: 761, 100: 760},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 763},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 762},
		// 500
		{23, 23, 23, 23, 23, 23, 23, 23, 22: 367},
		{22: 367, 25: 764},
		{26, 26, 26, 26, 26, 26, 26, 26, 21: 765, 100: 766},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 769},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 767},
		// 505
		{22: 367, 25: 768},
		{24, 24, 24, 24, 24, 24, 24, 24},
		{25, 25, 25, 25, 25, 25, 25, 25, 22: 367},
		{47, 47, 47, 47, 47, 47, 47, 47},
		{12: 778},
		// 510
		{12: 776},
		{12: 774},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 775},
		{30, 30, 30, 30, 30, 30, 30, 30},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 777},
		// 515
		{31, 31, 31, 31, 31, 31, 31, 31},
		{8: 779},
		{21: 780},
		{8: 345, 339, 783, 14: 342, 18: 347, 20: 338, 24: 782, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 781, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 784, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 785, 275, 278, 276, 277},
		{32, 32, 32, 32, 32, 32, 32, 32, 22: 367},
		// 520
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 804, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 378, 141: 805},
		{8: 364, 24: 786},
		{29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28},
		{8: 410, 287, 413, 411, 159, 284, 15: 789, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 788, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 787, 275, 278, 276, 277, 325, 793, 790, 792, 794, 791},
		// 525
		{2: 803},
		{2: 802},
		{102: 452, 455, 439, 454, 447, 445, 449, 458, 453, 443, 441, 459, 457, 437, 435, 456, 451, 127: 800, 129: 438, 446, 444, 448, 442, 440, 436, 434, 450},
		{2: 799},
		{2: 798},
		// 530
		{2: 797},
		{2: 796},
		{2: 795},
		{33, 33, 33, 33, 33, 33, 33, 33},
		{34, 34, 34, 34, 34, 34, 34, 34},
		// 535
		{35, 35, 35, 35, 35, 35, 35, 35},
		{36, 36, 36, 36, 36, 36, 36, 36},
		{37, 37, 37, 37, 37, 37, 37, 37},
		{2: 801},
		{38, 38, 38, 38, 38, 38, 38, 38},
		// 540
		{39, 39, 39, 39, 39, 39, 39, 39},
		{40, 40, 40, 40, 40, 40, 40, 40},
		{2: 220, 9: 220, 15: 220, 20: 220, 220, 220, 31: 220, 33: 807, 38: 220, 220, 41: 220, 220, 220},
		{2: 806},
		{41, 41, 41, 41, 41, 41, 41, 41},
		// 545
		{8: 345, 10: 343, 14: 342, 18: 347, 24: 341, 27: 346, 808, 344, 141: 809},
		{2: 16, 33: 807},
		{2: 17},
		{2: 811},
		{122: 812},
		// 550
		{1: 253, 4: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 813},
		{1: 814},
		{15, 15, 15, 15, 15, 15, 15, 15},
		{167, 167, 167, 167, 167, 167, 167, 167, 12: 167, 14: 167, 19: 167, 33: 167},
		{200, 200, 200, 200, 200, 200, 200, 200},
		// 555
		{12: 818},
		{8: 821, 23: 820, 101: 819},
		{203, 203, 203, 203, 203, 203, 203, 203},
		{12: 846, 144: 847},
		{21: 822},
		// 560
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 840, 841, 102: 829, 832, 825, 831, 836, 828, 837, 838, 830, 827, 826, 839, 835, 824, 823, 833, 834, 120: 842},
		{199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 23: 199},
		{198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 23: 198},
		{197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 23: 197},
		{196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 23: 196},
		// 565
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 23: 195},
		{194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 23: 194},
		{193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 23: 193},
		{192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 23: 192},
		{191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 23: 191},
		// 570
		{190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 23: 190},
		{189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 23: 189},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 23: 188},
		{187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 23: 187},
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 23: 186},
		// 575
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 23: 185},
		{184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 23: 184},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 23: 183},
		{173, 173, 173, 173, 173, 173, 173, 173, 821, 101: 845},
		{171, 171, 171, 171, 171, 171, 171, 171, 821, 101: 844},
		// 580
		{170, 170, 170, 170, 170, 170, 170, 170, 821, 101: 843},
		{169, 169, 169, 169, 169, 169, 169, 169},
		{172, 172, 172, 172, 172, 172, 172, 172},
		{174, 174, 174, 174, 174, 174, 174, 174},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 850},
		// 585
		{12: 848},
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 849},
		{201, 201, 201, 201, 201, 201, 201, 201},
		{202, 202, 202, 202, 202, 202, 202, 202},
		{205, 205, 205, 205, 205, 205, 205, 205},
		// 590
		{8: 821, 101: 853},
		{204, 204, 204, 204, 204, 204, 204, 204},
		{8: 410, 412, 413, 411, 159, 284, 16: 283, 855, 23: 856},
		{12: 859},
		{12: 857},
		// 595
		{159, 159, 159, 159, 159, 159, 159, 159, 410, 412, 413, 411, 13: 284, 16: 283, 858},
		{206, 206, 206, 206, 206, 206, 206, 206},
		{8: 821, 101: 860},
		{207, 207, 207, 207, 207, 207, 207, 207},
		{24: 889},
		// 600
		{143: 863},
		{8: 345, 339, 866, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 864, 122: 865},
		{4: 886, 22: 367},
		{14: 878},
		{8: 364, 24: 867},
		// 605
		{8: 345, 10: 343, 14: 342, 18: 347, 24: 341, 27: 346, 869, 344, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 868, 308, 62: 314, 313, 65: 309, 299, 297, 302, 303, 300, 304, 298, 301},
		{2: 874},
		{2: 870},
		{128: 871},
		{253, 4: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 872},
		// 610
		{873},
		{244, 244, 3: 244, 5: 244, 244, 244},
		{128: 875},
		{253, 4: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 876},
		{877},
		// 615
		{245, 245, 3: 245, 5: 245, 245, 245},
		{11: 879},
		{11: 880},
		{14: 881},
		{1: 882},
		// 620
		{4: 883},
		{253, 4: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 884},
		{885},
		{246, 246, 3: 246, 5: 246, 246, 246},
		{253, 4: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 887},
		// 625
		{888},
		{247, 247, 3: 247, 5: 247, 247, 247},
		{8: 890},
		{21: 891},
		{8: 498, 501, 503, 14: 499, 500, 18: 502, 26: 892},
		// 630
		{4: 893},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 894},
		{4: 895, 22: 367},
		{2: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 896},
		{2: 897},
		// 635
		{2: 898},
		{4: 899},
		{253, 4: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 900},
		{901},
		{248, 248, 3: 248, 5: 248, 248, 248},
		// 640
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 903},
		{2: 904, 22: 367},
		{253, 4: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 905},
		{906},
		{249, 249, 3: 249, 5: 249, 249, 249},
		// 645
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 908},
		{22: 367, 25: 909},
		{139: 910},
		{3: 253, 253, 253, 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 911},
		{3: 242, 5: 914, 912, 123: 913},
		// 650
		{251, 251, 3: 251, 5: 251, 251, 251},
		{3: 921},
		{100: 915},
		{8: 345, 339, 343, 14: 342, 18: 347, 20: 338, 24: 341, 27: 346, 340, 344, 337, 32: 336, 34: 335, 334, 333, 332, 40: 916},
		{22: 367, 25: 917},
		// 655
		{139: 918},
		{3: 253, 253, 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 919},
		{3: 242, 5: 914, 123: 920},
		{3: 243},
		{4: 253, 6: 253, 8: 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 922},
		// 660
		{6: 923},
		{250, 250, 3: 250, 5: 250, 250, 250},
		{253, 253, 3: 253, 253, 253, 253, 253, 285, 287, 288, 286, 159, 284, 15: 315, 283, 323, 21: 324, 44: 289, 290, 293, 296, 311, 295, 294, 292, 291, 310, 312, 305, 306, 307, 268, 308, 279, 282, 314, 313, 280, 309, 299, 297, 302, 303, 300, 304, 298, 301, 281, 267, 275, 278, 276, 277, 325, 319, 316, 318, 321, 317, 327, 88: 326, 270, 322, 320, 269, 265, 274, 272, 273, 266, 271, 925},
		{259, 259, 3: 259, 5: 259, 259, 259},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 146

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}, nil}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}, nil}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			arrNd := yyS[yypt-4].node
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 18:
		{
			arrNd := yyS[yypt-4].node
			//This NonTerminal is broken, it is kept
			//here to show that eventuall the feature
			//must be added
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 19:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 20:
		{
			yyVAL.elifArr = nil
		}
	case 24:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 38:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "%", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 39:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 40:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 41:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 42:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 43:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 44:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 45:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 46:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 47:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-1].s, &numNode{NUM, -1}, nil}
			switch x.execute().(type) {
			case int:
				yyVAL.node = &numNode{NUM, x.execute().(int)}
			default: //Error, the array length is not an int
				println("Error! Single element arrays are not supported")
				yyVAL.node = &numNode{NUM, -1}

			}
		}
	case 48:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 49:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-0].s}
		}
	case 50:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 51:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State start")
			}
		}
	case 55:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false)}}
		}
	case 56:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, yyS[yypt-0].s}}
		}
	case 57:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 58:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s, yyS[yypt-1].s, false)}}
		}
	case 59:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-2].s, resMap(&yyS[yypt-0].s, auxGetNode(yyS[yypt-2].s), true)}}
		}
	case 60:
		{
			yyVAL.node = &commonNode{COMMON, cmd.EasyUpdate, "EasyUpdate", []interface{}{yyS[yypt-4].s, yyS[yypt-0].s, false}}
		}
	case 61:
		{
			yyVAL.node = &commonNode{COMMON, cmd.EasyUpdate, "EasyUpdate", []interface{}{yyS[yypt-5].s, yyS[yypt-0].s, true}}
		}
	case 62:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State NT_DEL")
			}
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 80:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 81:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 82:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 83:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 84:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 85:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 86:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 87:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
		}
	case 88:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 89:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 90:
		{
			yyVAL.s = yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s
		}
	case 91:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 92:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 93:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 95:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 96:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 97:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 98:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 99:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 100:
		{
			yyVAL.s = ".."
		}
	case 101:
		{
			yyVAL.s = "-"
		}
	case 102:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
		}
	case 103:
		{
			yyVAL.s = ""
		}
	case 104:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 105:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 10}}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 11}}
		}
	case 114:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 115:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 116:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 8}}
		}
	case 117:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 9}}
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 12}}
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 13}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s, nil, nil}}
		}
	case 123:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
			//$$=&assignNode{ASSIGN, v, "deleteValue"}
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{"", "", v, nil}}

		}
	case 124:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", yyS[yypt-1].arr}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"pwd"}}
		}
	case 134:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"print"}}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"camera"}}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ui"}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 139:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 141:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 143:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 144:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"if"}}
		}
	case 145:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"while"}}
		}
	case 146:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"for"}}
		}
	case 147:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"unset"}}
		}
	case 148:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"select"}}
		}
	case 149:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cmds"}}
		}
	case 150:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 151:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsten"}}
		}
	case 152:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssite"}}
		}
	case 153:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsbldg"}}
		}
	case 154:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsroom"}}
		}
	case 155:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsrack"}}
		}
	case 156:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsdev"}}
		}
	case 157:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"-"}}
		}
	case 158:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".template"}}
		}
	case 159:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".cmds"}}
		}
	case 160:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".var"}}
		}
	case 161:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"+"}}
		}
	case 162:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"="}}
		}
	case 163:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 164:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 165:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 166:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 167:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 168:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 169:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 170:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 171:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 172:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 173:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 174:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 175:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 176:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 177:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 178:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 179:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 180:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 181:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 182:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 183:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 184:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 185:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 186:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 187:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 188:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 189:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 190:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("tenant"), "tenant", yyS[yypt-0].s}}
		}
	case 191:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 192:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("site"), "site", yyS[yypt-0].s}}
		}
	case 193:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 194:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("building"), "building", yyS[yypt-0].s}}
		}
	case 195:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 196:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("room"), "room", yyS[yypt-0].s}}
		}
	case 197:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 198:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("rack"), "rack", yyS[yypt-0].s}}
		}
	case 199:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 200:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("device"), "device", yyS[yypt-0].s}}
		}
	case 201:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("corridor"), "corridor", yyS[yypt-0].s}}
		}
	case 202:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 203:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("group"), "group", yyS[yypt-0].s}}
		}
	case 204:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 205:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("separator"), "separator", yyS[yypt-0].s}}
		}
	case 206:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 207:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 208:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 209:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 210:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 211:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 212:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 213:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 214:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 215:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 216:
		{
			val := map[string]interface{}{yyS[yypt-2].s: (yyS[yypt-0].node).(node).execute()}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), val}}
			if cmd.State.DebugLvl >= 3 {
				println("Attribute Acquired")
			}
		}
	case 217:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 218:
		{
			x := make([]string, 0)
			x = append(x, formActualPath(yyS[yypt-2].s))
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 219:
		{
			yyVAL.sarr = []string{formActualPath(yyS[yypt-0].s)}
		}
	case 220:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 221:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 222:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 223:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 224:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-6].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 225:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 226:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 227:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 228:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 229:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 230:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, (yyS[yypt-0].node).(node).execute()}
		}
	case 231:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s, "cmd"}}
		}
	case 232:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadTemplate, "Load", []interface{}{yyS[yypt-0].s, "template"}}
		}
	case 233:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 234:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 235:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 236:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 237:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, yyS[yypt-3].node, nil}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 238:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-6].s /*&numNode{NUM,$4}*/, yyS[yypt-4].node /*&strNode{STR, $7}*/, yyS[yypt-1].node}
		}
	case 239:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}, nil}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 240:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 241:
		{ /*x := $3+"="+$5;*/
			val := (yyS[yypt-0].node).(node).execute()
			println("Our val:", val)
			x := map[string]interface{}{yyS[yypt-2].s: val}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{x}}
		}
	case 242:
		{
			yyVAL.node = &commonNode{COMMON, cmd.HandleUI, "HandleUnity", []interface{}{"ui", yyS[yypt-4].s, (yyS[yypt-1].node).(node).execute()}}
		}
	case 243:
		{
			yyVAL.node = &commonNode{COMMON, cmd.HandleUI, "HandleUnity", []interface{}{"camera", yyS[yypt-2].s, (yyS[yypt-0].node).(node).execute()}}
		}
	case 244:
		{
			yyVAL.node = &commonNode{COMMON, cmd.HandleUI, "HandleUnity", []interface{}{"camera", yyS[yypt-14].s, []int{yyS[yypt-11].n, yyS[yypt-9].n, yyS[yypt-7].n}, []int{yyS[yypt-3].n, yyS[yypt-1].n}}}
		}
	case 245:
		{
			x := []interface{}{yyS[yypt-2].node}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 246:
		{
			x := []interface{}{yyS[yypt-0].node}
			yyVAL.arr = x
		}
	case 247:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 248:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}
	case 249:
		{
			if len(yyS[yypt-0].arr) != 0 {
				yyVAL.arr = append(yyS[yypt-1].arr, yyS[yypt-0].arr...)
			} else {
				yyVAL.arr = yyS[yypt-1].arr
			}
		}
	case 250:
		{
			yyVAL.arr = nil
		}
	case 251:
		{
			yyVAL.arr = []interface{}{&strNode{STR, yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 252:
		{
			yyVAL.arr = []interface{}{&numNode{NUM, yyS[yypt-0].n}}
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 253:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 254:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 255:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 256:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 257:
		{
			var x bool
			if yyS[yypt-0].s == "true" {
				x = true
			} else {
				x = false
			}
			yyVAL.arr = []interface{}{&boolNode{BOOL, x}}
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 258:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 259:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 260:
		{
			x := yyS[yypt-1].s
			yyVAL.s = x + "," + yyS[yypt-0].s
		}
	case 261:
		{
			yyVAL.s = ""
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
