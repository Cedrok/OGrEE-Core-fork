// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		if input[idx].(string) == "false" {
			x := map[int]interface{}{0: &boolNode{BOOL, false}}
			res = append(res, x)
		} else if input[idx].(string) == "true" {
			x := map[int]interface{}{0: &boolNode{BOOL, true}}
			res = append(res, x)
		} else if v, e := strconv.Atoi(input[idx].(string)); e == nil {
			x := map[int]interface{}{0: &numNode{NUM, v}}
			res = append(res, x)
		} else {
			x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
			res = append(res, x)
		}
	}
	return res
}

//This func helps to build the correct map[str]interface{}
//based on the input string x
func retMapInf(x string, y interface{}) map[string]interface{} {
	switch x {
	case "id", "name", "category", "parentID",
		"description", "domain", "parentid", "parentId":
		return map[string]interface{}{x: y}

	default:
		return map[string]interface{}{
			"attributes": map[string]interface{}{x: y}}
	}
}

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

//Gets node from Tree Hierarchy using a map[string]interface
func getNodeFromMapInf(x map[string]interface{}) *cmd.Node {
	ent := x["category"]
	pid, _ := x["parentId"].(string)
	id, _ := x["id"].(string)

	entNum := cmd.EntityStrToInt(ent.(string))
	nodes := cmd.GetNodes(&cmd.State.TreeHierarchy, entNum)
	for i := range nodes {
		if nodes[i].PID == pid && nodes[i].ID == id {
			return nodes[i]
		}
	}
	return nil
}

func genNodeFromCommonRes(x node) node {
	val := x.execute()
	switch val.(type) {
	case string:
		return &strNode{STR, val.(string)}

	case []map[string]interface{}:
		return &jsonObjArrNode{JSONND,
			len(val.([]map[string]interface{})), val.([]map[string]interface{})}
	}
	return nil
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57437
	yyEofCode      = 57344
	TOK_AND        = 57418
	TOK_ATTR       = 57359
	TOK_ATTRSPEC   = 57393
	TOK_BASHTYPE   = 57368
	TOK_BLDG       = 57350
	TOK_BOOL       = 57362
	TOK_CD         = 57374
	TOK_CLR        = 57376
	TOK_CMDFLAG    = 57370
	TOK_CMDS       = 57404
	TOK_COL        = 57398
	TOK_COMMA      = 57402
	TOK_CORIDOR    = 57356
	TOK_CREATE     = 57363
	TOK_DELETE     = 57366
	TOK_DEREF      = 57407
	TOK_DEVICE     = 57353
	TOK_DIV        = 57423
	TOK_DO         = 57432
	TOK_DOC        = 57373
	TOK_DONE       = 57429
	TOK_DOT        = 57403
	TOK_ELIF       = 57431
	TOK_ELSE       = 57412
	TOK_EQUAL      = 57369
	TOK_EXIT       = 57372
	TOK_FI         = 57428
	TOK_FOR        = 57410
	TOK_GET        = 57364
	TOK_GREATER    = 57425
	TOK_GREP       = 57377
	TOK_GROUP      = 57357
	TOK_IF         = 57409
	TOK_IN         = 57419
	TOK_LBLOCK     = 57413
	TOK_LBRAC      = 57400
	TOK_LEN        = 57433
	TOK_LESS       = 57426
	TOK_LPAREN     = 57415
	TOK_LS         = 57378
	TOK_LSBLDG     = 57383
	TOK_LSDEV      = 57386
	TOK_LSOG       = 57380
	TOK_LSRACK     = 57385
	TOK_LSROOM     = 57384
	TOK_LSSITE     = 57382
	TOK_LSSUBDEV   = 57387
	TOK_LSSUBDEV1  = 57388
	TOK_LSTEN      = 57381
	TOK_MULT       = 57424
	TOK_NOT        = 57422
	TOK_NUM        = 57346
	TOK_OCBLDG     = 57389
	TOK_OCCORIDOR  = 57436
	TOK_OCDEL      = 57361
	TOK_OCDEV      = 57390
	TOK_OCGROUP    = 57434
	TOK_OCRACK     = 57391
	TOK_OCROOM     = 57392
	TOK_OCSDEV     = 57396
	TOK_OCSDEV1    = 57397
	TOK_OCSITE     = 57394
	TOK_OCTENANT   = 57395
	TOK_OCWALL     = 57435
	TOK_OR         = 57417
	TOK_PLUS       = 57360
	TOK_PRNT       = 57420
	TOK_PWD        = 57375
	TOK_QUOT       = 57421
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57414
	TOK_RBRAC      = 57401
	TOK_ROOM       = 57351
	TOK_RPAREN     = 57416
	TOK_SEARCH     = 57367
	TOK_SELECT     = 57399
	TOK_SEMICOL    = 57408
	TOK_SITE       = 57349
	TOK_SLASH      = 57371
	TOK_SUBDEVICE  = 57354
	TOK_SUBDEVICE1 = 57355
	TOK_TEMPLATE   = 57405
	TOK_TENANT     = 57348
	TOK_THEN       = 57427
	TOK_TREE       = 57379
	TOK_UNSET      = 57430
	TOK_UPDATE     = 57365
	TOK_VAR        = 57406
	TOK_WALL       = 57358
	TOK_WHILE      = 57411
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -202
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57429: 0,   // TOK_DONE (217x)
		57416: 1,   // TOK_RPAREN (217x)
		57412: 2,   // TOK_ELSE (213x)
		57401: 3,   // TOK_RBRAC (213x)
		57408: 4,   // TOK_SEMICOL (212x)
		57431: 5,   // TOK_ELIF (211x)
		57428: 6,   // TOK_FI (211x)
		57344: 7,   // $end (210x)
		57361: 8,   // TOK_OCDEL (170x)
		57347: 9,   // TOK_WORD (165x)
		57346: 10,  // TOK_NUM (97x)
		57360: 11,  // TOK_PLUS (97x)
		57407: 12,  // TOK_DEREF (86x)
		57403: 13,  // TOK_DOT (83x)
		57362: 14,  // TOK_BOOL (79x)
		57393: 15,  // TOK_ATTRSPEC (76x)
		57371: 16,  // TOK_SLASH (65x)
		57369: 17,  // TOK_EQUAL (56x)
		57464: 18,  // P1 (55x)
		57463: 19,  // P (52x)
		57422: 20,  // TOK_NOT (52x)
		57469: 21,  // WORDORNUM (49x)
		57421: 22,  // TOK_QUOT (44x)
		57417: 23,  // TOK_OR (40x)
		57414: 24,  // TOK_RBLOCK (39x)
		57359: 25,  // TOK_ATTR (38x)
		57418: 26,  // TOK_AND (31x)
		57415: 27,  // TOK_LPAREN (31x)
		57470: 28,  // factor (23x)
		57433: 29,  // TOK_LEN (23x)
		57476: 30,  // unary (23x)
		57398: 31,  // TOK_COL (21x)
		57425: 32,  // TOK_GREATER (20x)
		57426: 33,  // TOK_LESS (20x)
		57475: 34,  // term (19x)
		57423: 35,  // TOK_DIV (19x)
		57424: 36,  // TOK_MULT (19x)
		57471: 37,  // nex (17x)
		57374: 38,  // TOK_CD (16x)
		57378: 39,  // TOK_LS (16x)
		57383: 40,  // TOK_LSBLDG (16x)
		57386: 41,  // TOK_LSDEV (16x)
		57380: 42,  // TOK_LSOG (16x)
		57385: 43,  // TOK_LSRACK (16x)
		57384: 44,  // TOK_LSROOM (16x)
		57382: 45,  // TOK_LSSITE (16x)
		57387: 46,  // TOK_LSSUBDEV (16x)
		57388: 47,  // TOK_LSSUBDEV1 (16x)
		57381: 48,  // TOK_LSTEN (16x)
		57379: 49,  // TOK_TREE (16x)
		57430: 50,  // TOK_UNSET (16x)
		57438: 51,  // BASH (15x)
		57465: 52,  // Q (15x)
		57376: 53,  // TOK_CLR (15x)
		57363: 54,  // TOK_CREATE (15x)
		57366: 55,  // TOK_DELETE (15x)
		57373: 56,  // TOK_DOC (15x)
		57372: 57,  // TOK_EXIT (15x)
		57364: 58,  // TOK_GET (15x)
		57377: 59,  // TOK_GREP (15x)
		57420: 60,  // TOK_PRNT (15x)
		57375: 61,  // TOK_PWD (15x)
		57399: 62,  // TOK_SELECT (15x)
		57365: 63,  // TOK_UPDATE (15x)
		57449: 64,  // K (14x)
		57450: 65,  // NT_CREATE (14x)
		57451: 66,  // NT_DEL (14x)
		57452: 67,  // NT_GET (14x)
		57453: 68,  // NT_UPDATE (14x)
		57454: 69,  // OCCHOOSE (14x)
		57456: 70,  // OCDEL (14x)
		57458: 71,  // OCGET (14x)
		57460: 72,  // OCSEL (14x)
		57461: 73,  // OCUPDATE (14x)
		57457: 74,  // OCDOT (13x)
		57459: 75,  // OCLISYNTX (13x)
		57466: 76,  // REL (13x)
		57446: 77,  // FUNC (12x)
		57474: 78,  // stmnt (12x)
		57410: 79,  // TOK_FOR (12x)
		57409: 80,  // TOK_IF (12x)
		57411: 81,  // TOK_WHILE (12x)
		57440: 82,  // CTRL (11x)
		57443: 83,  // EQAL (11x)
		57462: 84,  // OPEN_STMT (11x)
		57472: 85,  // st2 (11x)
		57448: 86,  // JOIN (10x)
		57444: 87,  // EXPR (9x)
		57350: 88,  // TOK_BLDG (5x)
		57353: 89,  // TOK_DEVICE (5x)
		57413: 90,  // TOK_LBLOCK (5x)
		57352: 91,  // TOK_RACK (5x)
		57351: 92,  // TOK_ROOM (5x)
		57349: 93,  // TOK_SITE (5x)
		57348: 94,  // TOK_TENANT (5x)
		57445: 95,  // F (4x)
		57467: 96,  // STRARG (4x)
		57439: 97,  // CDORFG (3x)
		57455: 98,  // OCCR (3x)
		57404: 99,  // TOK_CMDS (3x)
		57356: 100, // TOK_CORIDOR (3x)
		57357: 101, // TOK_GROUP (3x)
		57400: 102, // TOK_LBRAC (3x)
		57389: 103, // TOK_OCBLDG (3x)
		57436: 104, // TOK_OCCORIDOR (3x)
		57390: 105, // TOK_OCDEV (3x)
		57434: 106, // TOK_OCGROUP (3x)
		57391: 107, // TOK_OCRACK (3x)
		57392: 108, // TOK_OCROOM (3x)
		57394: 109, // TOK_OCSITE (3x)
		57395: 110, // TOK_OCTENANT (3x)
		57435: 111, // TOK_OCWALL (3x)
		57358: 112, // TOK_WALL (3x)
		57468: 113, // WNARG (3x)
		57441: 114, // E (2x)
		57442: 115, // EIF (2x)
		57447: 116, // GETOBJS (2x)
		57354: 117, // TOK_SUBDEVICE (2x)
		57355: 118, // TOK_SUBDEVICE1 (2x)
		57405: 119, // TOK_TEMPLATE (2x)
		57427: 120, // TOK_THEN (2x)
		57406: 121, // TOK_VAR (2x)
		57473: 122, // start (1x)
		57402: 123, // TOK_COMMA (1x)
		57432: 124, // TOK_DO (1x)
		57419: 125, // TOK_IN (1x)
		57437: 126, // $default (0x)
		57345: 127, // error (0x)
		57368: 128, // TOK_BASHTYPE (0x)
		57370: 129, // TOK_CMDFLAG (0x)
		57396: 130, // TOK_OCSDEV (0x)
		57397: 131, // TOK_OCSDEV1 (0x)
		57367: 132, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_RPAREN",
		"TOK_ELSE",
		"TOK_RBRAC",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"$end",
		"TOK_OCDEL",
		"TOK_WORD",
		"TOK_NUM",
		"TOK_PLUS",
		"TOK_DEREF",
		"TOK_DOT",
		"TOK_BOOL",
		"TOK_ATTRSPEC",
		"TOK_SLASH",
		"TOK_EQUAL",
		"P1",
		"P",
		"TOK_NOT",
		"WORDORNUM",
		"TOK_QUOT",
		"TOK_OR",
		"TOK_RBLOCK",
		"TOK_ATTR",
		"TOK_AND",
		"TOK_LPAREN",
		"factor",
		"TOK_LEN",
		"unary",
		"TOK_COL",
		"TOK_GREATER",
		"TOK_LESS",
		"term",
		"TOK_DIV",
		"TOK_MULT",
		"nex",
		"TOK_CD",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSSUBDEV",
		"TOK_LSSUBDEV1",
		"TOK_LSTEN",
		"TOK_TREE",
		"TOK_UNSET",
		"BASH",
		"Q",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_SELECT",
		"TOK_UPDATE",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCGET",
		"OCSEL",
		"OCUPDATE",
		"OCDOT",
		"OCLISYNTX",
		"REL",
		"FUNC",
		"stmnt",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"CTRL",
		"EQAL",
		"OPEN_STMT",
		"st2",
		"JOIN",
		"EXPR",
		"TOK_BLDG",
		"TOK_DEVICE",
		"TOK_LBLOCK",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"F",
		"STRARG",
		"CDORFG",
		"OCCR",
		"TOK_CMDS",
		"TOK_CORIDOR",
		"TOK_GROUP",
		"TOK_LBRAC",
		"TOK_OCBLDG",
		"TOK_OCCORIDOR",
		"TOK_OCDEV",
		"TOK_OCGROUP",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_OCWALL",
		"TOK_WALL",
		"WNARG",
		"E",
		"EIF",
		"GETOBJS",
		"TOK_SUBDEVICE",
		"TOK_SUBDEVICE1",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"start",
		"TOK_COMMA",
		"TOK_DO",
		"TOK_IN",
		"$default",
		"error",
		"TOK_BASHTYPE",
		"TOK_CMDFLAG",
		"TOK_OCSDEV",
		"TOK_OCSDEV1",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {122, 1},
		2:   {85, 1},
		3:   {85, 3},
		4:   {85, 1},
		5:   {78, 1},
		6:   {78, 1},
		7:   {78, 1},
		8:   {78, 1},
		9:   {78, 0},
		10:  {82, 1},
		11:  {84, 7},
		12:  {84, 10},
		13:  {84, 6},
		14:  {84, 15},
		15:  {84, 7},
		16:  {84, 12},
		17:  {84, 10},
		18:  {115, 7},
		19:  {115, 0},
		20:  {87, 3},
		21:  {87, 1},
		22:  {86, 3},
		23:  {86, 1},
		24:  {83, 4},
		25:  {83, 4},
		26:  {83, 1},
		27:  {76, 3},
		28:  {76, 4},
		29:  {76, 4},
		30:  {76, 3},
		31:  {76, 1},
		32:  {37, 3},
		33:  {37, 3},
		34:  {37, 1},
		35:  {34, 3},
		36:  {34, 3},
		37:  {34, 1},
		38:  {30, 2},
		39:  {30, 2},
		40:  {30, 1},
		41:  {28, 3},
		42:  {28, 1},
		43:  {28, 5},
		44:  {28, 5},
		45:  {28, 2},
		46:  {28, 5},
		47:  {28, 4},
		48:  {28, 1},
		49:  {28, 3},
		50:  {28, 1},
		51:  {64, 1},
		52:  {64, 1},
		53:  {64, 1},
		54:  {64, 1},
		55:  {65, 4},
		56:  {67, 2},
		57:  {67, 3},
		58:  {68, 3},
		59:  {66, 2},
		60:  {114, 1},
		61:  {114, 1},
		62:  {114, 1},
		63:  {114, 1},
		64:  {114, 1},
		65:  {114, 1},
		66:  {114, 1},
		67:  {114, 1},
		68:  {21, 1},
		69:  {21, 1},
		70:  {21, 4},
		71:  {21, 4},
		72:  {21, 4},
		73:  {21, 4},
		74:  {21, 1},
		75:  {95, 4},
		76:  {95, 3},
		77:  {19, 1},
		78:  {19, 2},
		79:  {18, 3},
		80:  {18, 1},
		81:  {18, 4},
		82:  {18, 3},
		83:  {18, 2},
		84:  {18, 1},
		85:  {18, 2},
		86:  {18, 0},
		87:  {52, 2},
		88:  {52, 2},
		89:  {52, 2},
		90:  {52, 2},
		91:  {52, 2},
		92:  {52, 2},
		93:  {52, 2},
		94:  {52, 2},
		95:  {52, 2},
		96:  {52, 2},
		97:  {52, 2},
		98:  {52, 3},
		99:  {52, 4},
		100: {52, 1},
		101: {51, 1},
		102: {51, 1},
		103: {51, 4},
		104: {51, 1},
		105: {51, 1},
		106: {51, 1},
		107: {51, 1},
		108: {51, 2},
		109: {51, 2},
		110: {51, 2},
		111: {51, 2},
		112: {51, 2},
		113: {51, 2},
		114: {51, 2},
		115: {51, 2},
		116: {51, 2},
		117: {51, 2},
		118: {51, 2},
		119: {51, 2},
		120: {51, 2},
		121: {51, 2},
		122: {51, 2},
		123: {51, 2},
		124: {51, 2},
		125: {51, 2},
		126: {51, 2},
		127: {51, 2},
		128: {51, 2},
		129: {51, 2},
		130: {51, 2},
		131: {51, 2},
		132: {51, 3},
		133: {51, 3},
		134: {51, 3},
		135: {51, 2},
		136: {51, 2},
		137: {75, 2},
		138: {75, 1},
		139: {75, 1},
		140: {75, 1},
		141: {75, 1},
		142: {75, 1},
		143: {75, 1},
		144: {98, 5},
		145: {98, 5},
		146: {98, 5},
		147: {98, 5},
		148: {98, 7},
		149: {98, 7},
		150: {98, 7},
		151: {98, 7},
		152: {98, 7},
		153: {98, 7},
		154: {98, 7},
		155: {98, 7},
		156: {98, 11},
		157: {98, 11},
		158: {98, 6},
		159: {98, 6},
		160: {98, 9},
		161: {98, 9},
		162: {70, 2},
		163: {73, 5},
		164: {71, 2},
		165: {116, 3},
		166: {116, 1},
		167: {69, 4},
		168: {74, 6},
		169: {74, 8},
		170: {74, 8},
		171: {74, 9},
		172: {74, 9},
		173: {74, 10},
		174: {74, 9},
		175: {74, 9},
		176: {74, 9},
		177: {74, 9},
		178: {74, 9},
		179: {74, 4},
		180: {74, 4},
		181: {74, 6},
		182: {74, 6},
		183: {74, 6},
		184: {74, 2},
		185: {74, 7},
		186: {74, 5},
		187: {74, 5},
		188: {74, 7},
		189: {74, 8},
		190: {74, 4},
		191: {72, 1},
		192: {72, 5},
		193: {96, 2},
		194: {96, 0},
		195: {113, 2},
		196: {113, 4},
		197: {113, 0},
		198: {77, 6},
		199: {77, 1},
		200: {97, 3},
		201: {97, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [492][]uint16{
		// 0
		{4: 193, 7: 193, 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 204, 122: 203},
		{7: 202},
		{7: 201},
		{200, 2: 200, 200, 692, 200, 200, 200},
		{198, 2: 198, 198, 5: 198, 198, 198},
		// 5
		{197, 197, 197, 197, 197, 197, 197, 197},
		{196, 196, 196, 196, 196, 196, 196, 196},
		{195, 195, 195, 195, 195, 195, 195, 195},
		{194, 194, 194, 194, 194, 194, 194, 194},
		{192, 2: 192, 192, 5: 192, 192, 192},
		// 10
		{90: 675},
		{27: 670},
		{9: 635, 27: 634},
		{151, 151, 151, 151, 151, 151, 151, 151},
		{150, 150, 150, 150, 150, 150, 150, 150},
		// 15
		{149, 149, 149, 149, 149, 149, 149, 149},
		{148, 148, 148, 148, 148, 148, 148, 148},
		{88: 624, 627, 91: 626, 625, 623, 622, 114: 631, 117: 628, 629},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 620, 88: 624, 627, 91: 626, 625, 623, 622, 114: 621, 117: 628, 629},
		{8: 265, 263, 12: 266, 264, 16: 224, 18: 223, 614, 25: 116},
		// 20
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 613},
		{125, 125, 125, 125, 125, 125, 125, 125, 10: 125, 13: 125, 15: 125, 25: 125},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 116, 12: 266, 264, 15: 116, 18: 612, 25: 116},
		{3, 3, 3, 3, 3, 3, 3, 3, 13: 279, 16: 278, 27: 607},
		{13: 275, 99: 559, 119: 560, 121: 558},
		// 25
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 557},
		{9: 483},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 482},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 481},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 480},
		// 30
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 479},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 478},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 477},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 476},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 475},
		// 35
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 474},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 473},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 116, 12: 266, 264, 16: 224, 18: 223, 471},
		{8: 468},
		{102, 102, 102, 102, 102, 102, 102, 102},
		// 40
		{101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100},
		{22: 463},
		{98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97},
		// 45
		{96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 456, 439, 11: 458, 13: 457, 17: 459, 38: 434, 433, 450, 453, 447, 452, 451, 449, 454, 455, 448, 440, 444, 54: 435, 438, 58: 436, 62: 445, 437, 79: 443, 441, 442, 99: 446},
		{88: 307, 313, 91: 311, 309, 305, 303, 98: 301, 100: 315, 317, 103: 306, 314, 312, 316, 310, 308, 304, 302, 318, 319},
		{64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 63, 63, 63, 63, 63},
		// 50
		{62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59},
		{13: 282},
		// 55
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 267, 102: 268},
		{11, 11, 11, 11, 11, 11, 11, 11, 13: 259},
		{25: 260},
		{17: 261},
		{9: 262},
		// 60
		{10, 10, 10, 10, 10, 10, 10, 10},
		{122, 122, 122, 122, 122, 122, 122, 122, 10: 122, 13: 279, 15: 122, 278, 25: 122},
		{13: 275},
		{118, 118, 118, 118, 118, 118, 118, 118, 10: 118, 13: 118, 15: 118, 25: 118},
		{9: 274},
		// 65
		{38, 38, 38, 38, 38, 38, 38, 38},
		{9: 269, 116: 270},
		{3: 36, 123: 272},
		{3: 271},
		{35, 35, 35, 35, 35, 35, 35, 35},
		// 70
		{9: 269, 116: 273},
		{3: 37},
		{117, 117, 117, 117, 117, 117, 117, 117, 10: 117, 13: 117, 15: 117, 25: 117},
		{119, 119, 119, 119, 119, 119, 119, 119, 10: 119, 13: 119, 15: 119, 276, 25: 119},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 116, 12: 266, 264, 15: 116, 18: 277, 25: 116},
		// 75
		{121, 121, 121, 121, 121, 121, 121, 121, 10: 121, 13: 121, 15: 121, 25: 121},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 116, 12: 266, 264, 15: 116, 18: 281, 25: 116},
		{9: 280},
		{120, 120, 120, 120, 120, 120, 120, 120, 10: 120, 13: 120, 15: 120, 25: 120},
		{123, 123, 123, 123, 123, 123, 123, 123, 10: 123, 13: 123, 15: 123, 25: 123},
		// 80
		{25: 283},
		{17: 284},
		{8: 288, 285, 286, 287, 14: 289, 21: 290},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 14: 134, 134, 22: 134, 25: 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 14: 133, 133, 22: 133, 25: 133},
		// 85
		{9: 296},
		{9: 291},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 14: 128, 128, 22: 128, 25: 128},
		{39, 39, 39, 39, 39, 39, 39, 39},
		{8: 292, 11: 293},
		// 90
		{9: 295},
		{9: 294},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 14: 129, 129, 22: 129, 25: 129},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 14: 130, 130, 22: 130, 25: 130},
		{8: 298, 11: 297},
		// 95
		{9: 300},
		{9: 299},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 14: 131, 131, 22: 131, 25: 131},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 14: 132, 132, 22: 132, 25: 132},
		{65, 65, 65, 65, 65, 65, 65, 65},
		// 100
		{31: 429},
		{31: 425},
		{31: 421},
		{31: 417},
		{31: 411},
		// 105
		{31: 405},
		{31: 399},
		{31: 393},
		{31: 387},
		{31: 381},
		// 110
		{31: 375},
		{31: 369},
		{31: 359},
		{31: 349},
		{31: 344},
		// 115
		{31: 336},
		{31: 328},
		{31: 320},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 321},
		{15: 322},
		// 120
		{8: 288, 285, 286, 287, 14: 289, 21: 323},
		{15: 324},
		{8: 288, 285, 286, 287, 14: 289, 21: 325},
		{15: 326},
		{8: 288, 285, 286, 287, 14: 289, 21: 327},
		// 125
		{41, 41, 41, 41, 41, 41, 41, 41},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 329},
		{15: 330},
		{8: 288, 285, 286, 287, 14: 289, 21: 331},
		{15: 332},
		// 130
		{8: 288, 285, 286, 287, 14: 289, 21: 333},
		{15: 334},
		{8: 288, 285, 286, 287, 14: 289, 21: 335},
		{42, 42, 42, 42, 42, 42, 42, 42},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 337},
		// 135
		{15: 338},
		{8: 288, 285, 286, 287, 14: 289, 21: 339},
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 341, 97: 340},
		{43, 43, 43, 43, 43, 43, 43, 43},
		{8: 288, 285, 286, 287, 14: 289, 21: 342},
		// 140
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 341, 97: 343},
		{2, 2, 2, 2, 2, 2, 2, 2},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 345},
		{15: 346},
		{8: 288, 285, 286, 287, 14: 289, 21: 347},
		// 145
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 341, 97: 348},
		{44, 44, 44, 44, 44, 44, 44, 44},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 350},
		{15: 351},
		{8: 288, 285, 286, 287, 14: 289, 21: 352},
		// 150
		{15: 353},
		{8: 288, 285, 286, 287, 14: 289, 21: 354},
		{15: 355},
		{8: 288, 285, 286, 287, 14: 289, 21: 356},
		{15: 357},
		// 155
		{8: 288, 285, 286, 287, 14: 289, 21: 358},
		{45, 45, 45, 45, 45, 45, 45, 45},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 360},
		{15: 361},
		{8: 288, 285, 286, 287, 14: 289, 21: 362},
		// 160
		{15: 363},
		{8: 288, 285, 286, 287, 14: 289, 21: 364},
		{15: 365},
		{8: 288, 285, 286, 287, 14: 289, 21: 366},
		{15: 367},
		// 165
		{8: 288, 285, 286, 287, 14: 289, 21: 368},
		{46, 46, 46, 46, 46, 46, 46, 46},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 370},
		{15: 371},
		{8: 288, 285, 286, 287, 14: 289, 21: 372},
		// 170
		{15: 373},
		{8: 288, 285, 286, 287, 14: 289, 21: 374},
		{47, 47, 47, 47, 47, 47, 47, 47},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 376},
		{15: 377},
		// 175
		{8: 288, 285, 286, 287, 14: 289, 21: 378},
		{15: 379},
		{8: 288, 285, 286, 287, 14: 289, 21: 380},
		{48, 48, 48, 48, 48, 48, 48, 48},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 382},
		// 180
		{15: 383},
		{8: 288, 285, 286, 287, 14: 289, 21: 384},
		{15: 385},
		{8: 288, 285, 286, 287, 14: 289, 21: 386},
		{49, 49, 49, 49, 49, 49, 49, 49},
		// 185
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 388},
		{15: 389},
		{8: 288, 285, 286, 287, 14: 289, 21: 390},
		{15: 391},
		{8: 288, 285, 286, 287, 14: 289, 21: 392},
		// 190
		{50, 50, 50, 50, 50, 50, 50, 50},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 394},
		{15: 395},
		{8: 288, 285, 286, 287, 14: 289, 21: 396},
		{15: 397},
		// 195
		{8: 288, 285, 286, 287, 14: 289, 21: 398},
		{51, 51, 51, 51, 51, 51, 51, 51},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 400},
		{15: 401},
		{8: 288, 285, 286, 287, 14: 289, 21: 402},
		// 200
		{15: 403},
		{8: 288, 285, 286, 287, 14: 289, 21: 404},
		{52, 52, 52, 52, 52, 52, 52, 52},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 406},
		{15: 407},
		// 205
		{8: 288, 285, 286, 287, 14: 289, 21: 408},
		{15: 409},
		{8: 288, 285, 286, 287, 14: 289, 21: 410},
		{53, 53, 53, 53, 53, 53, 53, 53},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 412},
		// 210
		{15: 413},
		{8: 288, 285, 286, 287, 14: 289, 21: 414},
		{15: 415},
		{8: 288, 285, 286, 287, 14: 289, 21: 416},
		{54, 54, 54, 54, 54, 54, 54, 54},
		// 215
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 418},
		{15: 419},
		{8: 288, 285, 286, 287, 14: 289, 21: 420},
		{55, 55, 55, 55, 55, 55, 55, 55},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 422},
		// 220
		{15: 423},
		{8: 288, 285, 286, 287, 14: 289, 21: 424},
		{56, 56, 56, 56, 56, 56, 56, 56},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 426},
		{15: 427},
		// 225
		{8: 288, 285, 286, 287, 14: 289, 21: 428},
		{57, 57, 57, 57, 57, 57, 57, 57},
		{8: 265, 263, 12: 266, 264, 15: 116, 224, 18: 223, 430},
		{15: 431},
		{8: 288, 285, 286, 287, 14: 289, 21: 432},
		// 230
		{58, 58, 58, 58, 58, 58, 58, 58},
		{94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91},
		// 235
		{90, 90, 90, 90, 90, 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86},
		// 240
		{85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81},
		// 245
		{80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76},
		// 250
		{75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 71, 71, 71, 71, 71},
		// 255
		{99: 461, 119: 460, 121: 462},
		{67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66},
		{70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 69, 69, 69, 69, 69},
		// 260
		{68, 68, 68, 68, 68, 68, 68, 68},
		{8: 288, 285, 286, 287, 14: 289, 21: 465, 8, 96: 464},
		{22: 467},
		{8: 288, 285, 286, 287, 14: 289, 21: 465, 8, 96: 466},
		{22: 9},
		// 265
		{99, 99, 99, 99, 99, 99, 99, 99},
		{9: 469},
		{9: 470},
		{103, 103, 103, 103, 103, 103, 103, 103},
		{105, 105, 105, 105, 105, 105, 105, 105, 10: 472},
		// 270
		{104, 104, 104, 104, 104, 104, 104, 104},
		{106, 106, 106, 106, 106, 106, 106, 106},
		{107, 107, 107, 107, 107, 107, 107, 107},
		{108, 108, 108, 108, 108, 108, 108, 108},
		{109, 109, 109, 109, 109, 109, 109, 109},
		// 275
		{110, 110, 110, 110, 110, 110, 110, 110},
		{111, 111, 111, 111, 111, 111, 111, 111},
		{112, 112, 112, 112, 112, 112, 112, 112},
		{113, 113, 113, 113, 113, 113, 113, 113},
		{114, 114, 114, 114, 114, 114, 114, 114},
		// 280
		{115, 115, 115, 115, 115, 115, 115, 115},
		{18, 18, 18, 18, 18, 18, 18, 18, 13: 117, 17: 485, 90: 484},
		{10: 547, 25: 546},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 486},
		{12, 12, 12, 12, 12, 12, 12, 12, 23: 517},
		// 285
		{181, 181, 181, 181, 181, 181, 181, 181, 23: 181, 181, 26: 520},
		{179, 179, 179, 179, 179, 179, 179, 179, 17: 522, 20: 523, 23: 179, 179, 26: 179},
		{176, 176, 176, 176, 176, 176, 176, 176, 17: 176, 20: 176, 23: 176, 176, 26: 176},
		{171, 171, 171, 171, 171, 171, 171, 171, 537, 11: 536, 17: 171, 20: 171, 23: 171, 171, 26: 171, 32: 535, 534},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 11: 168, 17: 168, 20: 168, 23: 168, 168, 26: 168, 32: 168, 168, 35: 531, 530},
		// 290
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 11: 165, 17: 165, 20: 165, 23: 165, 165, 26: 165, 32: 165, 165, 35: 165, 165},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 529},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 528},
		{162, 162, 162, 162, 162, 162, 162, 162, 162, 11: 162, 17: 162, 20: 162, 23: 162, 162, 26: 162, 32: 162, 162, 35: 162, 162},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 516},
		// 295
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 11: 160, 17: 160, 20: 160, 23: 160, 160, 26: 160, 32: 160, 160, 35: 160, 160},
		{9: 508},
		{27: 505},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 11: 154, 17: 154, 20: 154, 23: 154, 154, 26: 154, 32: 154, 154, 35: 154, 154},
		{8: 288, 285, 286, 287, 14: 289, 21: 465, 8, 96: 503},
		// 300
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 11: 152, 17: 152, 20: 152, 23: 152, 152, 26: 152, 32: 152, 152, 35: 152, 152},
		{22: 504},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 11: 153, 17: 153, 20: 153, 23: 153, 153, 26: 153, 32: 153, 153, 35: 153, 153},
		{9: 506},
		{1: 507},
		// 305
		{155, 155, 155, 155, 155, 155, 155, 155, 155, 11: 155, 17: 155, 20: 155, 23: 155, 155, 26: 155, 32: 155, 155, 35: 155, 155},
		{157, 157, 157, 157, 157, 157, 157, 157, 157, 11: 157, 17: 157, 20: 157, 23: 157, 157, 26: 157, 32: 157, 157, 35: 157, 157, 90: 509},
		{9: 511, 512, 25: 510},
		{24: 515},
		{24: 514},
		// 310
		{24: 513},
		{156, 156, 156, 156, 156, 156, 156, 156, 156, 11: 156, 17: 156, 20: 156, 23: 156, 156, 26: 156, 32: 156, 156, 35: 156, 156},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 11: 158, 17: 158, 20: 158, 23: 158, 158, 26: 158, 32: 158, 158, 35: 158, 158},
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 11: 159, 17: 159, 20: 159, 23: 159, 159, 26: 159, 32: 159, 159, 35: 159, 159},
		{1: 518, 23: 517},
		// 315
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 519},
		{161, 161, 161, 161, 161, 161, 161, 161, 161, 11: 161, 17: 161, 20: 161, 23: 161, 161, 26: 161, 32: 161, 161, 35: 161, 161},
		{182, 182, 182, 182, 182, 182, 182, 182, 23: 182, 182, 26: 520},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 521},
		{180, 180, 180, 180, 180, 180, 180, 180, 17: 522, 20: 523, 23: 180, 180, 26: 180},
		// 320
		{17: 526},
		{17: 524},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 525},
		{177, 177, 177, 177, 177, 177, 177, 177, 17: 177, 20: 177, 23: 177, 177, 26: 177},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 527},
		// 325
		{178, 178, 178, 178, 178, 178, 178, 178, 17: 178, 20: 178, 23: 178, 178, 26: 178},
		{163, 163, 163, 163, 163, 163, 163, 163, 163, 11: 163, 17: 163, 20: 163, 23: 163, 163, 26: 163, 32: 163, 163, 35: 163, 163},
		{164, 164, 164, 164, 164, 164, 164, 164, 164, 11: 164, 17: 164, 20: 164, 23: 164, 164, 26: 164, 32: 164, 164, 35: 164, 164},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 533},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 532},
		// 330
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 11: 166, 17: 166, 20: 166, 23: 166, 166, 26: 166, 32: 166, 166, 35: 166, 166},
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 11: 167, 17: 167, 20: 167, 23: 167, 167, 26: 167, 32: 167, 167, 35: 167, 167},
		{8: 494, 500, 497, 12: 498, 14: 502, 17: 544, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 543},
		{8: 494, 500, 497, 12: 498, 14: 502, 17: 540, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 541},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 539},
		// 335
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 538},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 11: 169, 17: 169, 20: 169, 23: 169, 169, 26: 169, 32: 169, 169, 35: 531, 530},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 11: 170, 17: 170, 20: 170, 23: 170, 170, 26: 170, 32: 170, 170, 35: 531, 530},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 542},
		{172, 172, 172, 172, 172, 172, 172, 172, 537, 11: 536, 17: 172, 20: 172, 23: 172, 172, 26: 172},
		// 340
		{173, 173, 173, 173, 173, 173, 173, 173, 537, 11: 536, 17: 173, 20: 173, 23: 173, 173, 26: 173},
		{175, 175, 175, 175, 175, 175, 175, 175, 537, 11: 536, 17: 175, 20: 175, 23: 175, 175, 26: 175},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 545},
		{174, 174, 174, 174, 174, 174, 174, 174, 537, 11: 536, 17: 174, 20: 174, 23: 174, 174, 26: 174},
		{24: 554},
		// 345
		{24: 548},
		{15, 15, 15, 15, 15, 15, 15, 15, 17: 549, 90: 550},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 553},
		{25: 551},
		{24: 552},
		// 350
		{13, 13, 13, 13, 13, 13, 13, 13},
		{14, 14, 14, 14, 14, 14, 14, 14, 23: 517},
		{16, 16, 16, 16, 16, 16, 16, 16, 17: 555},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 556},
		{17, 17, 17, 17, 17, 17, 17, 17, 23: 517},
		// 355
		{40, 40, 40, 40, 40, 40, 40, 40},
		{31: 565},
		{31: 563},
		{31: 561},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 562},
		// 360
		{22, 22, 22, 22, 22, 22, 22, 22},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 263, 12: 266, 264, 16: 224, 18: 223, 564},
		{23, 23, 23, 23, 23, 23, 23, 23},
		{9: 566},
		{17: 567},
		// 365
		{8: 570, 568, 286, 569, 571, 226, 289, 16: 224, 257, 223, 256, 21: 572, 573, 27: 574, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 575, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 576, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 577},
		{134, 134, 134, 134, 134, 134, 134, 134, 13: 279, 16: 278},
		{9: 296, 88: 307, 313, 91: 311, 309, 305, 303, 98: 301, 100: 315, 317, 103: 306, 314, 312, 316, 310, 308, 304, 302, 318, 319},
		{116, 116, 116, 116, 116, 116, 116, 116, 265, 606, 12: 266, 264, 16: 224, 18: 223, 557},
		{9: 483, 27: 588},
		// 370
		{34, 34, 34, 34, 34, 34, 34, 34},
		{8: 288, 285, 286, 287, 14: 289, 21: 465, 8, 96: 586},
		{1: 5, 8: 288, 285, 286, 287, 14: 289, 21: 579, 580, 113: 578},
		{21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20},
		// 375
		{19, 19, 19, 19, 19, 19, 19, 19},
		{1: 585},
		{1: 5, 8: 288, 285, 286, 287, 14: 289, 21: 579, 580, 113: 584},
		{8: 288, 285, 286, 287, 14: 289, 21: 581},
		{22: 582},
		// 380
		{1: 5, 8: 288, 285, 286, 287, 14: 289, 21: 579, 580, 113: 583},
		{1: 6},
		{1: 7},
		{32, 32, 32, 32, 32, 32, 32, 32},
		{22: 587},
		// 385
		{33, 33, 33, 33, 33, 33, 33, 33},
		{8: 227, 263, 11: 591, 266, 264, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 590, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 589, 215, 218, 216, 217, 595, 592, 594, 596, 593},
		{1: 605},
		{1: 604},
		{88: 307, 313, 91: 311, 309, 305, 303, 98: 602, 100: 315, 317, 103: 306, 314, 312, 316, 310, 308, 304, 302, 318, 319},
		// 390
		{1: 601},
		{1: 600},
		{1: 599},
		{1: 598},
		{1: 597},
		// 395
		{24, 24, 24, 24, 24, 24, 24, 24},
		{25, 25, 25, 25, 25, 25, 25, 25},
		{26, 26, 26, 26, 26, 26, 26, 26},
		{27, 27, 27, 27, 27, 27, 27, 27},
		{28, 28, 28, 28, 28, 28, 28, 28},
		// 400
		{1: 603},
		{29, 29, 29, 29, 29, 29, 29, 29},
		{30, 30, 30, 30, 30, 30, 30, 30},
		{31, 31, 31, 31, 31, 31, 31, 31},
		{122, 122, 122, 122, 122, 122, 122, 122, 292, 11: 293, 13: 279, 16: 278},
		// 405
		{1: 608},
		{102: 609},
		{3: 193, 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 610},
		{3: 611},
		{4, 4, 4, 4, 4, 4, 4, 4},
		// 410
		{124, 124, 124, 124, 124, 124, 124, 124, 10: 124, 13: 124, 15: 124, 25: 124},
		{143, 143, 143, 143, 143, 143, 143, 143},
		{25: 616, 95: 615},
		{144, 144, 144, 144, 144, 144, 144, 144},
		{17: 617},
		// 415
		{8: 288, 285, 286, 287, 14: 289, 21: 618},
		{126, 126, 126, 126, 126, 126, 126, 126, 25: 616, 95: 619},
		{127, 127, 127, 127, 127, 127, 127, 127},
		{146, 146, 146, 146, 146, 146, 146, 146},
		{25: 616, 95: 630},
		// 420
		{8: 142, 142, 12: 142, 142, 16: 142, 25: 142},
		{8: 141, 141, 12: 141, 141, 16: 141, 25: 141},
		{8: 140, 140, 12: 140, 140, 16: 140, 25: 140},
		{8: 139, 139, 12: 139, 139, 16: 139, 25: 139},
		{8: 138, 138, 12: 138, 138, 16: 138, 25: 138},
		// 425
		{8: 137, 137, 12: 137, 137, 16: 137, 25: 137},
		{8: 136, 136, 12: 136, 136, 16: 136, 25: 136},
		{8: 135, 135, 12: 135, 135, 16: 135, 25: 135},
		{145, 145, 145, 145, 145, 145, 145, 145},
		{8: 265, 263, 12: 266, 264, 16: 224, 18: 223, 632, 25: 116},
		// 430
		{25: 616, 95: 633},
		{147, 147, 147, 147, 147, 147, 147, 147},
		{27: 657},
		{125: 636},
		{8: 494, 500, 497, 12: 639, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 637, 102: 638},
		// 435
		{4: 654, 23: 517},
		{10: 646},
		{9: 508, 27: 640},
		{38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 641, 242, 56: 248, 247, 59: 243, 244, 246},
		{1: 642},
		// 440
		{124: 643},
		{193, 4: 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 644},
		{645},
		{185, 2: 185, 185, 5: 185, 185, 185},
		{13: 647},
		// 445
		{13: 648},
		{10: 649},
		{3: 650},
		{4: 651},
		{193, 4: 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 652},
		// 450
		{653},
		{186, 2: 186, 186, 5: 186, 186, 186},
		{193, 4: 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 655},
		{656},
		{187, 2: 187, 187, 5: 187, 187, 187},
		// 455
		{9: 658},
		{17: 659},
		{8: 288, 285, 286, 287, 14: 289, 21: 660},
		{4: 661},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 662},
		// 460
		{4: 663, 23: 517},
		{1: 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 664},
		{1: 665},
		{1: 666},
		{4: 667},
		// 465
		{193, 4: 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 668},
		{669},
		{188, 2: 188, 188, 5: 188, 188, 188},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 671},
		{1: 672, 23: 517},
		// 470
		{193, 4: 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 673},
		{674},
		{189, 2: 189, 189, 5: 189, 189, 189},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 676},
		{23: 517, 677},
		// 475
		{120: 678},
		{2: 193, 4: 193, 193, 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 679},
		{2: 183, 5: 682, 680, 115: 681},
		{191, 2: 191, 191, 5: 191, 191, 191},
		{2: 689},
		// 480
		{90: 683},
		{8: 494, 500, 497, 12: 498, 14: 502, 20: 493, 22: 501, 27: 496, 495, 499, 492, 34: 491, 37: 490, 76: 489, 83: 488, 86: 487, 684},
		{23: 517, 685},
		{120: 686},
		{2: 193, 4: 193, 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 687},
		// 485
		{2: 183, 5: 682, 115: 688},
		{2: 184},
		{4: 193, 6: 193, 8: 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 690},
		{6: 691},
		{190, 2: 190, 190, 5: 190, 190, 190},
		// 490
		{193, 2: 193, 193, 193, 193, 193, 193, 227, 225, 11: 249, 228, 226, 16: 224, 257, 223, 256, 38: 229, 230, 233, 236, 245, 235, 234, 232, 237, 238, 231, 239, 240, 241, 208, 242, 219, 222, 248, 247, 220, 243, 244, 246, 258, 221, 207, 215, 218, 216, 217, 253, 250, 252, 255, 251, 254, 209, 77: 210, 205, 214, 212, 213, 206, 84: 211, 693},
		{199, 2: 199, 199, 5: 199, 199, 199},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 127

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}, nil}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}, nil}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			arrNd := yyS[yypt-4].node
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 18:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 19:
		{
			yyVAL.elifArr = nil
		}
	case 23:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 24:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 27:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 32:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 35:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 38:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 39:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 40:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 41:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 42:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 43:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &strNode{STR, yyS[yypt-1].s}, nil}
		}
	case 44:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &strNode{STR, yyS[yypt-1].s}, nil}
		}
	case 45:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 46:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &numNode{NUM, yyS[yypt-1].n}, nil}
		}
	case 47:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-1].s, &numNode{NUM, -1}, nil}
			yyVAL.node = &numNode{NUM, x.execute().(int)}
		}
	case 48:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 49:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-1].s}
		}
	case 50:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 51:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State start")
			}
		}
	case 55:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s)}}
		}
	case 56:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 57:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 58:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 59:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State NT_DEL")
			}
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 68:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 69:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 70:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 71:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 72:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 73:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 74:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 75:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 76:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 78:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 79:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 80:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 81:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 82:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 83:
		{
			yyVAL.s = ".."
		}
	case 84:
		{
			yyVAL.s = "-"
		}
	case 85:
		{
			yyVAL.s = ""
		}
	case 86:
		{
			yyVAL.s = ""
		}
	case 87:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 88:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 89:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 90:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 91:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 92:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 93:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 94:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 95:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 96:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 97:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 98:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 99:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}}
		}
	case 100:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 101:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", []interface{}{yyS[yypt-1].s}}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 114:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 115:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 116:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"if"}}
		}
	case 117:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"while"}}
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"for"}}
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"unset"}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"select"}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cmds"}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsten"}}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssite"}}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsbldg"}}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsroom"}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsrack"}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsdev"}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssubdev"}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssubdev1"}}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"-"}}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".template"}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".cmds"}}
		}
	case 134:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".var"}}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"+"}}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"="}}
		}
	case 137:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 138:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 139:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 140:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 141:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 142:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 143:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 144:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 145:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 146:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 147:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 148:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 149:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 150:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 151:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 152:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 153:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 154:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 155:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 156:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORRIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 157:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORRIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 158:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 159:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 160:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.WALL, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 161:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.WALL, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 162:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 163:
		{
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val)}}
			if cmd.State.DebugLvl >= 3 {
				println("Attribute Acquired")
			}
		}
	case 164:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 165:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 166:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 167:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 168:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, dCatchNodePtr}
		}
	case 169:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &strNode{STR, yyS[yypt-1].s}}
		}
	case 170:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 171:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 172:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 173:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-6].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 174:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 175:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 176:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 177:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 178:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 179:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 180:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 181:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 182:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 183:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 184:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 185:
		{
			y := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &strNode{STR, yyS[yypt-3].s}, nil}
			x := &assignNode{ASSIGN, y, yyS[yypt-0].node}
			mp := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, -1}, nil}
			q := getNodeFromMapInf(mp.execute().(map[string]interface{}))
			z := &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{q.Path, retMapInf(yyS[yypt-3].s, (yyS[yypt-0].node).execute())}}
			yyVAL.node = &ast{ASSIGN, []node{x, z}}
		}
	case 186:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &strNode{STR, yyS[yypt-1].s}, nil}
		}
	case 187:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &numNode{NUM, yyS[yypt-1].n}, nil}
		}
	case 188:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, yyS[yypt-3].n}, nil}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 189:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-6].s, &numNode{NUM, yyS[yypt-4].n}, &strNode{STR, yyS[yypt-1].s}}
		}
	case 190:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}, nil}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 191:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 192:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{resMap(&x)}}
		}
	case 193:
		{
			if yyS[yypt-0].s != "" {
				yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
			} else {
				yyVAL.s = yyS[yypt-1].s
			}
		}
	case 194:
		{
			yyVAL.s = ""
		}
	case 195:
		{
			x := []interface{}{yyS[yypt-1].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 196:
		{
			x := []interface{}{yyS[yypt-2].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 197:
		{
			yyVAL.arr = nil
		}
	case 198:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 199:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}
	case 200:
		{
			x := yyS[yypt-1].s
			yyVAL.s = x + "," + yyS[yypt-0].s
		}
	case 201:
		{
			yyVAL.s = ""
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
