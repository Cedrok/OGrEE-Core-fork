// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	l "cli/logger"
	"path/filepath"
)

var root node
var _ = l.GetInfoLogger() //Suppresses annoying Dockerfile build error

type yySymType struct {
	yys      int
	n        int
	s        string
	f        float64
	sarr     []string
	ast      *ast
	node     node
	boolNode boolNode
	numNode  numNode
	nodeArr  []node
	arr      []interface{}
	mapArr   []map[int]interface{}
	mapVoid  map[string]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault         = 57454
	yyEofCode         = 57344
	TOK_AC            = 57358
	TOK_AND           = 57421
	TOK_ATTRSPEC      = 57400
	TOK_BLDG          = 57351
	TOK_CABINET       = 57359
	TOK_CAM           = 57444
	TOK_CD            = 57379
	TOK_CLR           = 57381
	TOK_CMDFLAG       = 57374
	TOK_CMDS          = 57407
	TOK_COL           = 57402
	TOK_COMMA         = 57406
	TOK_CORIDOR       = 57356
	TOK_CREATE        = 57367
	TOK_DELETE        = 57370
	TOK_DEREF         = 57410
	TOK_DEVICE        = 57354
	TOK_DO            = 57438
	TOK_DOC           = 57378
	TOK_DONE          = 57434
	TOK_DOUBLE_DOT    = 57376
	TOK_DOUBLE_EQUAL  = 57373
	TOK_DRAW          = 57450
	TOK_DRAWABLE      = 57447
	TOK_ELIF          = 57437
	TOK_ELSE          = 57415
	TOK_ENV           = 57448
	TOK_EQUAL         = 57372
	TOK_EXIT          = 57377
	TOK_FALSE         = 57453
	TOK_FI            = 57433
	TOK_FLOAT         = 57347
	TOK_FOR           = 57413
	TOK_GET           = 57368
	TOK_GETSLOT       = 57401
	TOK_GETU          = 57396
	TOK_GREATER       = 57428
	TOK_GREATER_EQUAL = 57429
	TOK_GREP          = 57382
	TOK_GROUP         = 57357
	TOK_HIERARCH      = 57446
	TOK_IF            = 57412
	TOK_IN            = 57422
	TOK_INT           = 57346
	TOK_LBLOCK        = 57416
	TOK_LBRAC         = 57404
	TOK_LEN           = 57439
	TOK_LESS          = 57430
	TOK_LESS_EQUAL    = 57431
	TOK_LINK          = 57442
	TOK_LPAREN        = 57418
	TOK_LS            = 57383
	TOK_LSAC          = 57391
	TOK_LSBLDG        = 57388
	TOK_LSCAB         = 57389
	TOK_LSCORRIDOR    = 57393
	TOK_LSDEV         = 57399
	TOK_LSOG          = 57385
	TOK_LSPANEL       = 57392
	TOK_LSRACK        = 57398
	TOK_LSROOM        = 57397
	TOK_LSSENSOR      = 57390
	TOK_LSSITE        = 57387
	TOK_LSSLOT        = 57395
	TOK_LSTEN         = 57386
	TOK_LSU           = 57394
	TOK_MINUS         = 57365
	TOK_MOD           = 57435
	TOK_MULT          = 57427
	TOK_NOT           = 57425
	TOK_NOT_EQUAL     = 57426
	TOK_OBJ_TMPL      = 57363
	TOK_OR            = 57420
	TOK_ORIENTATION   = 57366
	TOK_ORPH          = 57449
	TOK_PANEL         = 57360
	TOK_PARTIAL       = 57441
	TOK_PLUS          = 57364
	TOK_PRNT          = 57423
	TOK_PWD           = 57380
	TOK_QUOT          = 57424
	TOK_RACK          = 57353
	TOK_RBLOCK        = 57417
	TOK_RBRAC         = 57405
	TOK_ROOM          = 57352
	TOK_ROOM_TMPL     = 57362
	TOK_RPAREN        = 57419
	TOK_SEARCH        = 57371
	TOK_SELECT        = 57403
	TOK_SEMICOL       = 57411
	TOK_SENSOR        = 57361
	TOK_SETENV        = 57451
	TOK_SITE          = 57350
	TOK_SLASH         = 57375
	TOK_STR           = 57355
	TOK_TEMPLATE      = 57408
	TOK_TENANT        = 57349
	TOK_THEN          = 57432
	TOK_TREE          = 57384
	TOK_TRUE          = 57452
	TOK_UI            = 57445
	TOK_UNLINK        = 57443
	TOK_UNSET         = 57436
	TOK_UPDATE        = 57369
	TOK_USE_JSON      = 57440
	TOK_VAR           = 57409
	TOK_WHILE         = 57414
	TOK_WORD          = 57348
	yyErrCode         = 57345

	yyMaxDepth = 200
	yyTabOfs   = -177
)

var (
	yyPrec = map[int]int{
		TOK_EQUAL:         0,
		TOK_GET:           0,
		TOK_CD:            0,
		TOK_LS:            0,
		TOK_TREE:          0,
		TOK_DRAW:          0,
		TOK_HIERARCH:      0,
		TOK_UNSET:         0,
		TOK_DRAWABLE:      0,
		TOK_SETENV:        0,
		TOK_VAR:           0,
		TOK_CMDS:          0,
		TOK_TEMPLATE:      0,
		TOK_SELECT:        0,
		TOK_LINK:          0,
		TOK_UNLINK:        0,
		TOK_LEN:           0,
		TOK_PRNT:          0,
		TOK_DOC:           0,
		TOK_OR:            1,
		TOK_AND:           2,
		TOK_DOUBLE_EQUAL:  3,
		TOK_NOT_EQUAL:     3,
		TOK_LESS:          4,
		TOK_GREATER:       4,
		TOK_LESS_EQUAL:    4,
		TOK_GREATER_EQUAL: 4,
		TOK_MINUS:         5,
		TOK_PLUS:          5,
		TOK_MULT:          6,
		TOK_SLASH:         6,
		TOK_NOT:           7,
	}

	yyXLAT = map[int]int{
		57344: 0,   // $end (127x)
		57411: 1,   // TOK_SEMICOL (122x)
		57346: 2,   // TOK_INT (119x)
		57365: 3,   // TOK_MINUS (115x)
		57375: 4,   // TOK_SLASH (113x)
		57348: 5,   // TOK_WORD (111x)
		57410: 6,   // TOK_DEREF (101x)
		57355: 7,   // TOK_STR (100x)
		57347: 8,   // TOK_FLOAT (95x)
		57416: 9,   // TOK_LBLOCK (95x)
		57453: 10,  // TOK_FALSE (93x)
		57452: 11,  // TOK_TRUE (93x)
		57458: 12,  // CONCAT (83x)
		57459: 13,  // CONCAT_TERM (83x)
		57461: 14,  // EXPR (82x)
		57419: 15,  // TOK_RPAREN (48x)
		57400: 16,  // TOK_ATTRSPEC (44x)
		57402: 17,  // TOK_COL (36x)
		57405: 18,  // TOK_RBRAC (29x)
		57406: 19,  // TOK_COMMA (25x)
		57418: 20,  // TOK_LPAREN (24x)
		57417: 21,  // TOK_RBLOCK (24x)
		57364: 22,  // TOK_PLUS (23x)
		57354: 23,  // TOK_DEVICE (22x)
		57361: 24,  // TOK_SENSOR (22x)
		57428: 25,  // TOK_GREATER (21x)
		57421: 26,  // TOK_AND (20x)
		57373: 27,  // TOK_DOUBLE_EQUAL (20x)
		57429: 28,  // TOK_GREATER_EQUAL (20x)
		57430: 29,  // TOK_LESS (20x)
		57431: 30,  // TOK_LESS_EQUAL (20x)
		57435: 31,  // TOK_MOD (20x)
		57427: 32,  // TOK_MULT (20x)
		57426: 33,  // TOK_NOT_EQUAL (20x)
		57420: 34,  // TOK_OR (20x)
		57466: 35,  // PATH (16x)
		57440: 36,  // TOK_USE_JSON (15x)
		57467: 37,  // PHYSICAL_PATH (14x)
		57372: 38,  // TOK_EQUAL (6x)
		57404: 39,  // TOK_LBRAC (6x)
		57403: 40,  // TOK_SELECT (4x)
		57462: 41,  // GETOBJS (3x)
		57379: 42,  // TOK_CD (3x)
		57381: 43,  // TOK_CLR (3x)
		57407: 44,  // TOK_CMDS (3x)
		57450: 45,  // TOK_DRAW (3x)
		57447: 46,  // TOK_DRAWABLE (3x)
		57448: 47,  // TOK_ENV (3x)
		57368: 48,  // TOK_GET (3x)
		57401: 49,  // TOK_GETSLOT (3x)
		57396: 50,  // TOK_GETU (3x)
		57446: 51,  // TOK_HIERARCH (3x)
		57442: 52,  // TOK_LINK (3x)
		57383: 53,  // TOK_LS (3x)
		57388: 54,  // TOK_LSBLDG (3x)
		57399: 55,  // TOK_LSDEV (3x)
		57385: 56,  // TOK_LSOG (3x)
		57398: 57,  // TOK_LSRACK (3x)
		57397: 58,  // TOK_LSROOM (3x)
		57387: 59,  // TOK_LSSITE (3x)
		57395: 60,  // TOK_LSSLOT (3x)
		57386: 61,  // TOK_LSTEN (3x)
		57394: 62,  // TOK_LSU (3x)
		57423: 63,  // TOK_PRNT (3x)
		57380: 64,  // TOK_PWD (3x)
		57408: 65,  // TOK_TEMPLATE (3x)
		57384: 66,  // TOK_TREE (3x)
		57443: 67,  // TOK_UNLINK (3x)
		57436: 68,  // TOK_UNSET (3x)
		57409: 69,  // TOK_VAR (3x)
		57463: 70,  // LSOBJ_COMMAND (2x)
		57470: 71,  // st2 (2x)
		57472: 72,  // stmnt (2x)
		57378: 73,  // TOK_DOC (2x)
		57377: 74,  // TOK_EXIT (2x)
		57382: 75,  // TOK_GREP (2x)
		57439: 76,  // TOK_LEN (2x)
		57391: 77,  // TOK_LSAC (2x)
		57389: 78,  // TOK_LSCAB (2x)
		57393: 79,  // TOK_LSCORRIDOR (2x)
		57392: 80,  // TOK_LSPANEL (2x)
		57390: 81,  // TOK_LSSENSOR (2x)
		57366: 82,  // TOK_ORIENTATION (2x)
		57451: 83,  // TOK_SETENV (2x)
		57469: 84,  // WNARG (2x)
		57455: 85,  // ARITHEXPR (1x)
		57456: 86,  // BOOLEXPR (1x)
		57457: 87,  // COMMAND (1x)
		57460: 88,  // DEREF (1x)
		57464: 89,  // OBJ_TYPE (1x)
		57465: 90,  // OCCR (1x)
		57471: 91,  // start (1x)
		57358: 92,  // TOK_AC (1x)
		57351: 93,  // TOK_BLDG (1x)
		57359: 94,  // TOK_CABINET (1x)
		57444: 95,  // TOK_CAM (1x)
		57356: 96,  // TOK_CORIDOR (1x)
		57413: 97,  // TOK_FOR (1x)
		57357: 98,  // TOK_GROUP (1x)
		57412: 99,  // TOK_IF (1x)
		57425: 100, // TOK_NOT (1x)
		57363: 101, // TOK_OBJ_TMPL (1x)
		57449: 102, // TOK_ORPH (1x)
		57360: 103, // TOK_PANEL (1x)
		57353: 104, // TOK_RACK (1x)
		57352: 105, // TOK_ROOM (1x)
		57362: 106, // TOK_ROOM_TMPL (1x)
		57350: 107, // TOK_SITE (1x)
		57349: 108, // TOK_TENANT (1x)
		57445: 109, // TOK_UI (1x)
		57414: 110, // TOK_WHILE (1x)
		57454: 111, // $default (0x)
		57345: 112, // error (0x)
		57468: 113, // STRAY_DEV_PATH (0x)
		57374: 114, // TOK_CMDFLAG (0x)
		57367: 115, // TOK_CREATE (0x)
		57370: 116, // TOK_DELETE (0x)
		57438: 117, // TOK_DO (0x)
		57434: 118, // TOK_DONE (0x)
		57376: 119, // TOK_DOUBLE_DOT (0x)
		57437: 120, // TOK_ELIF (0x)
		57415: 121, // TOK_ELSE (0x)
		57433: 122, // TOK_FI (0x)
		57422: 123, // TOK_IN (0x)
		57441: 124, // TOK_PARTIAL (0x)
		57424: 125, // TOK_QUOT (0x)
		57371: 126, // TOK_SEARCH (0x)
		57432: 127, // TOK_THEN (0x)
		57369: 128, // TOK_UPDATE (0x)
	}

	yySymNames = []string{
		"$end",
		"TOK_SEMICOL",
		"TOK_INT",
		"TOK_MINUS",
		"TOK_SLASH",
		"TOK_WORD",
		"TOK_DEREF",
		"TOK_STR",
		"TOK_FLOAT",
		"TOK_LBLOCK",
		"TOK_FALSE",
		"TOK_TRUE",
		"CONCAT",
		"CONCAT_TERM",
		"EXPR",
		"TOK_RPAREN",
		"TOK_ATTRSPEC",
		"TOK_COL",
		"TOK_RBRAC",
		"TOK_COMMA",
		"TOK_LPAREN",
		"TOK_RBLOCK",
		"TOK_PLUS",
		"TOK_DEVICE",
		"TOK_SENSOR",
		"TOK_GREATER",
		"TOK_AND",
		"TOK_DOUBLE_EQUAL",
		"TOK_GREATER_EQUAL",
		"TOK_LESS",
		"TOK_LESS_EQUAL",
		"TOK_MOD",
		"TOK_MULT",
		"TOK_NOT_EQUAL",
		"TOK_OR",
		"PATH",
		"TOK_USE_JSON",
		"PHYSICAL_PATH",
		"TOK_EQUAL",
		"TOK_LBRAC",
		"TOK_SELECT",
		"GETOBJS",
		"TOK_CD",
		"TOK_CLR",
		"TOK_CMDS",
		"TOK_DRAW",
		"TOK_DRAWABLE",
		"TOK_ENV",
		"TOK_GET",
		"TOK_GETSLOT",
		"TOK_GETU",
		"TOK_HIERARCH",
		"TOK_LINK",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSSLOT",
		"TOK_LSTEN",
		"TOK_LSU",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_TEMPLATE",
		"TOK_TREE",
		"TOK_UNLINK",
		"TOK_UNSET",
		"TOK_VAR",
		"LSOBJ_COMMAND",
		"st2",
		"stmnt",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GREP",
		"TOK_LEN",
		"TOK_LSAC",
		"TOK_LSCAB",
		"TOK_LSCORRIDOR",
		"TOK_LSPANEL",
		"TOK_LSSENSOR",
		"TOK_ORIENTATION",
		"TOK_SETENV",
		"WNARG",
		"ARITHEXPR",
		"BOOLEXPR",
		"COMMAND",
		"DEREF",
		"OBJ_TYPE",
		"OCCR",
		"start",
		"TOK_AC",
		"TOK_BLDG",
		"TOK_CABINET",
		"TOK_CAM",
		"TOK_CORIDOR",
		"TOK_FOR",
		"TOK_GROUP",
		"TOK_IF",
		"TOK_NOT",
		"TOK_OBJ_TMPL",
		"TOK_ORPH",
		"TOK_PANEL",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_ROOM_TMPL",
		"TOK_SITE",
		"TOK_TENANT",
		"TOK_UI",
		"TOK_WHILE",
		"$default",
		"error",
		"STRAY_DEV_PATH",
		"TOK_CMDFLAG",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DO",
		"TOK_DONE",
		"TOK_DOUBLE_DOT",
		"TOK_ELIF",
		"TOK_ELSE",
		"TOK_FI",
		"TOK_IN",
		"TOK_PARTIAL",
		"TOK_QUOT",
		"TOK_SEARCH",
		"TOK_THEN",
		"TOK_UPDATE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {91, 1},
		2:   {71, 0},
		3:   {71, 1},
		4:   {71, 3},
		5:   {72, 2},
		6:   {72, 2},
		7:   {72, 4},
		8:   {72, 5},
		9:   {72, 7},
		10:  {72, 2},
		11:  {72, 2},
		12:  {72, 1},
		13:  {72, 2},
		14:  {72, 2},
		15:  {72, 2},
		16:  {72, 2},
		17:  {72, 3},
		18:  {72, 4},
		19:  {72, 3},
		20:  {72, 2},
		21:  {72, 2},
		22:  {72, 3},
		23:  {72, 2},
		24:  {72, 3},
		25:  {72, 4},
		26:  {72, 2},
		27:  {72, 4},
		28:  {72, 2},
		29:  {72, 2},
		30:  {72, 2},
		31:  {72, 5},
		32:  {72, 3},
		33:  {72, 3},
		34:  {72, 1},
		35:  {72, 5},
		36:  {72, 7},
		37:  {72, 3},
		38:  {72, 5},
		39:  {72, 4},
		40:  {72, 1},
		41:  {72, 1},
		42:  {72, 2},
		43:  {72, 1},
		44:  {72, 1},
		45:  {72, 1},
		46:  {72, 1},
		47:  {72, 2},
		48:  {72, 1},
		49:  {72, 2},
		50:  {37, 1},
		51:  {113, 1},
		52:  {35, 1},
		53:  {14, 5},
		54:  {14, 6},
		55:  {14, 6},
		56:  {14, 1},
		57:  {14, 1},
		58:  {14, 2},
		59:  {14, 2},
		60:  {14, 1},
		61:  {14, 1},
		62:  {14, 1},
		63:  {14, 3},
		64:  {12, 1},
		65:  {12, 2},
		66:  {13, 2},
		67:  {13, 4},
		68:  {13, 1},
		69:  {13, 1},
		70:  {13, 1},
		71:  {86, 3},
		72:  {86, 3},
		73:  {86, 3},
		74:  {86, 3},
		75:  {86, 3},
		76:  {86, 3},
		77:  {86, 3},
		78:  {86, 3},
		79:  {86, 2},
		80:  {86, 1},
		81:  {86, 1},
		82:  {85, 3},
		83:  {85, 3},
		84:  {85, 3},
		85:  {85, 3},
		86:  {85, 3},
		87:  {85, 2},
		88:  {85, 2},
		89:  {85, 2},
		90:  {85, 4},
		91:  {85, 1},
		92:  {85, 1},
		93:  {88, 4},
		94:  {88, 7},
		95:  {84, 3},
		96:  {84, 1},
		97:  {41, 3},
		98:  {41, 1},
		99:  {89, 1},
		100: {89, 1},
		101: {89, 1},
		102: {89, 1},
		103: {89, 1},
		104: {89, 1},
		105: {89, 1},
		106: {89, 1},
		107: {89, 1},
		108: {89, 1},
		109: {89, 1},
		110: {89, 1},
		111: {89, 1},
		112: {89, 1},
		113: {70, 1},
		114: {70, 1},
		115: {70, 1},
		116: {70, 1},
		117: {70, 1},
		118: {70, 1},
		119: {70, 1},
		120: {70, 1},
		121: {70, 1},
		122: {70, 1},
		123: {70, 1},
		124: {87, 1},
		125: {87, 1},
		126: {87, 1},
		127: {87, 1},
		128: {87, 1},
		129: {87, 1},
		130: {87, 1},
		131: {87, 1},
		132: {87, 1},
		133: {87, 1},
		134: {87, 1},
		135: {87, 1},
		136: {87, 1},
		137: {87, 1},
		138: {87, 1},
		139: {87, 1},
		140: {87, 1},
		141: {87, 1},
		142: {87, 1},
		143: {87, 1},
		144: {87, 1},
		145: {87, 1},
		146: {87, 1},
		147: {87, 1},
		148: {87, 1},
		149: {87, 1},
		150: {87, 1},
		151: {87, 1},
		152: {87, 1},
		153: {87, 1},
		154: {87, 1},
		155: {87, 1},
		156: {87, 1},
		157: {87, 1},
		158: {87, 1},
		159: {87, 1},
		160: {87, 1},
		161: {87, 1},
		162: {90, 5},
		163: {90, 5},
		164: {90, 7},
		165: {90, 11},
		166: {90, 9},
		167: {90, 7},
		168: {90, 9},
		169: {90, 7},
		170: {90, 9},
		171: {90, 11},
		172: {90, 12},
		173: {90, 7},
		174: {90, 7},
		175: {90, 7},
		176: {90, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [330][]uint16{
		// 0
		{175, 2: 216, 198, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 22: 197, 37: 183, 182, 40: 202, 42: 184, 206, 200, 192, 195, 210, 181, 190, 189, 193, 203, 185, 228, 231, 209, 230, 229, 227, 188, 226, 187, 208, 211, 201, 191, 204, 194, 199, 186, 179, 180, 213, 212, 207, 205, 232, 234, 235, 233, 236, 83: 196, 91: 178},
		{177},
		{176},
		{174, 505},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 504},
		// 5
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 500, 39: 501},
		{17: 494},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 493},
		{165, 165, 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 492},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 491},
		// 10
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 490},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 489},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 487},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 484},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 482},
		// 15
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 480},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 478},
		{3: 475},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 474},
		{5: 471},
		// 20
		{23: 384, 388, 89: 394, 378, 92: 385, 381, 387, 96: 389, 98: 390, 101: 391, 393, 386, 383, 382, 392, 380, 379},
		{2: 376, 243, 225, 223, 215, 224, 377, 221, 219, 218, 220, 222, 375, 35: 373, 40: 374},
		{17: 369},
		{17: 367},
		{17: 365},
		// 25
		{143, 143},
		{17: 359},
		{17: 355},
		{20: 352},
		{137, 137},
		// 30
		{136, 136},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 351},
		{134, 134},
		{133, 133},
		{132, 132},
		// 35
		{131, 131},
		{129, 129, 3: 339, 5: 312, 22: 343, 25: 345, 38: 344, 40: 330, 42: 319, 315, 341, 325, 346, 332, 322, 350, 349, 323, 313, 316, 335, 338, 331, 337, 336, 334, 348, 333, 347, 318, 317, 340, 324, 314, 329, 342, 87: 311, 95: 320, 97: 328, 99: 326, 109: 321, 327},
		{127, 127, 16: 127, 127, 23: 127, 127},
		{5: 251, 20: 252, 39: 240},
		{121, 121, 121, 15: 121, 121, 121, 121, 121, 121, 121, 23: 121, 121},
		// 40
		{120, 120, 120, 15: 120, 120, 120, 120, 120, 120, 120, 23: 120, 120},
		{117, 117, 117, 15: 117, 117, 117, 117, 117, 117, 117, 23: 117, 117},
		{116, 116, 116, 15: 116, 116, 116, 116, 116, 116, 116, 23: 116, 116},
		{115, 115, 115, 115, 115, 15: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 245, 84: 244},
		// 45
		{113, 113, 113, 113, 225, 223, 238, 224, 12: 237, 222, 15: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{109, 109, 109, 109, 109, 109, 109, 109, 15: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108, 15: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		{107, 107, 107, 107, 107, 107, 107, 107, 15: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{2: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		// 50
		{2: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{2: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{2: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{2: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{2: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		// 55
		{2: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{2: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{2: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{2: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{2: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		// 60
		{112, 112, 112, 112, 112, 15: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{5: 239, 39: 240},
		{111, 111, 111, 111, 111, 111, 111, 111, 15: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{5: 241},
		{18: 242},
		// 65
		{110, 110, 110, 110, 110, 110, 110, 110, 15: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{2: 249, 8: 250},
		{21: 248},
		{19: 246, 21: 81},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 245, 84: 247},
		// 70
		{21: 82},
		{114, 114, 114, 114, 114, 15: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{119, 119, 119, 15: 119, 119, 18: 119, 119, 119, 119, 23: 119, 119},
		{118, 118, 118, 15: 118, 118, 18: 118, 118, 118, 118, 23: 118, 118},
		{111, 111, 111, 111, 111, 111, 111, 111, 9: 308, 15: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		// 75
		{20: 253},
		{2: 256, 258, 225, 223, 215, 224, 257, 221, 260, 259, 220, 222, 261, 85: 254, 255, 100: 262},
		{15: 306},
		{15: 304},
		{3: 121, 121, 15: 86, 22: 121, 25: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 80
		{3: 120, 120, 15: 85, 22: 120, 25: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{2: 290, 6: 294, 8: 291, 20: 293, 88: 292},
		{3: 117, 117, 15: 97, 22: 117, 25: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{3: 116, 116, 15: 96, 22: 116, 25: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{3: 273, 275, 22: 272, 25: 271, 265, 266, 270, 268, 269, 276, 274, 267, 264},
		// 85
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 263},
		{15: 98},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 289},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 288},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 287},
		// 90
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 286},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 285},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 284},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 283},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 282},
		// 95
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 281},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 280},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 279},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 278},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 277},
		// 100
		{15: 91},
		{15: 92},
		{15: 93},
		{15: 94},
		{15: 95},
		// 105
		{15: 99},
		{15: 100},
		{15: 101},
		{15: 102},
		{15: 103},
		// 110
		{15: 104},
		{15: 105},
		{15: 106},
		{3: 119, 119, 15: 90, 22: 119, 25: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{3: 118, 118, 15: 89, 22: 118, 25: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		// 115
		{15: 88},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 302},
		{39: 295},
		{5: 296},
		{9: 298, 18: 297},
		// 120
		{15: 84},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 299},
		{21: 300},
		{18: 301},
		{15: 83},
		// 125
		{20: 303},
		{15: 87},
		{15: 305},
		{122, 122, 122, 122, 122, 15: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{15: 307},
		// 130
		{123, 123, 123, 123, 123, 15: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 309},
		{21: 310},
		{124, 124, 124, 124, 124, 15: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{130, 130},
		// 135
		{128, 128},
		{53, 53},
		{52, 52},
		{51, 51},
		{50, 50},
		// 140
		{49, 49},
		{48, 48},
		{47, 47},
		{46, 46},
		{45, 45},
		// 145
		{44, 44},
		{43, 43},
		{42, 42},
		{41, 41},
		{40, 40},
		// 150
		{39, 39},
		{38, 38},
		{37, 37},
		{36, 36},
		{35, 35},
		// 155
		{34, 34},
		{33, 33},
		{32, 32},
		{31, 31},
		{30, 30},
		// 160
		{29, 29},
		{28, 28},
		{27, 27},
		{26, 26},
		{25, 25},
		// 165
		{24, 24},
		{23, 23},
		{22, 22},
		{21, 21},
		{20, 20},
		// 170
		{19, 19},
		{18, 18},
		{17, 17},
		{16, 16},
		{135, 135},
		// 175
		{5: 353},
		{15: 354},
		{138, 138},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 356},
		{140, 140, 16: 357},
		// 180
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 358},
		{139, 139},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 360},
		{16: 361},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 362},
		// 185
		{142, 142, 16: 363},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 364},
		{141, 141},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 366},
		{144, 144},
		// 190
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 368},
		{145, 145},
		{5: 370},
		{38: 371},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 372},
		// 195
		{146, 146},
		{148, 148},
		{147, 147},
		{125, 125, 125, 18: 125, 125},
		{121, 121, 17: 119},
		// 200
		{120, 120, 17: 118},
		{149, 149},
		{17: 467, 36: 78},
		{17: 463, 36: 77},
		{17: 457, 36: 76},
		// 205
		{17: 447, 36: 75},
		{17: 439, 36: 74},
		{17: 431, 36: 73},
		{36: 72},
		{36: 71},
		// 210
		{36: 70},
		{36: 69},
		{17: 417, 36: 68},
		{17: 408, 36: 67},
		{36: 66},
		// 215
		{36: 65},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 397},
		{36: 395},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 396},
		{1, 1},
		// 220
		{23: 398, 399},
		{17: 404},
		{17: 400},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 401},
		{16: 402},
		// 225
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 403},
		{2, 2},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 405},
		{16: 406},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 407},
		// 230
		{3, 3},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 409},
		{16: 410},
		{39: 411},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 412, 41: 413},
		// 235
		{18: 79, 415},
		{18: 414},
		{4, 4},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 412, 41: 416},
		{18: 80},
		// 240
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 418},
		{16: 419},
		{39: 420},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 421},
		{19: 422},
		// 245
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 423},
		{18: 424, 425},
		{16: 429},
		{18: 426},
		{16: 427},
		// 250
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 428},
		{5, 5},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 430},
		{6, 6},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 432},
		// 255
		{16: 433},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 434},
		{16: 435},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 436},
		{8, 8, 16: 437},
		// 260
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 438},
		{7, 7},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 440},
		{16: 441},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 442},
		// 265
		{16: 443},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 444},
		{16: 445},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 446},
		{9, 9},
		// 270
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 448},
		{16: 449},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 450},
		{16: 451},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 452},
		// 275
		{10, 10, 16: 453},
		{82: 454},
		{11, 11, 16: 455},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 456},
		{12, 12},
		// 280
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 458},
		{16: 459},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 460},
		{16: 461},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 462},
		// 285
		{13, 13},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 464},
		{16: 465},
		{82: 466},
		{14, 14},
		// 290
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 37: 468},
		{16: 469},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 470},
		{15, 15},
		{38: 472},
		// 295
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 473},
		{150, 150},
		{151, 151},
		{5: 476},
		{5: 477},
		// 300
		{152, 152},
		{154, 154, 479},
		{153, 153},
		{156, 156, 481},
		{155, 155},
		// 305
		{157, 157, 483},
		{158, 158},
		{19: 485},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 486},
		{159, 159},
		// 310
		{161, 161, 488},
		{160, 160},
		{162, 162},
		{163, 163},
		{164, 164},
		// 315
		{166, 166},
		{167, 167},
		{5: 495},
		{38: 496},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 497},
		// 320
		{169, 169, 16: 498},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 499},
		{168, 168},
		{171, 171},
		{2: 216, 243, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 375, 35: 412, 41: 502},
		// 325
		{18: 503},
		{170, 170},
		{172, 172},
		{175, 2: 216, 198, 225, 223, 215, 224, 217, 221, 219, 218, 220, 222, 214, 22: 197, 37: 183, 182, 40: 202, 42: 184, 206, 200, 192, 195, 210, 181, 190, 189, 193, 203, 185, 228, 231, 209, 230, 229, 227, 188, 226, 187, 208, 211, 201, 191, 204, 194, 199, 186, 506, 180, 213, 212, 207, 205, 232, 234, 235, 233, 236, 83: 196},
		{173},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 112

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
			if cmd.State.DebugLvl > 0 {
				if cmd.State.ScriptCalled == true {
					println("File:",filepath.Base(cmd.GetScriptPath()) )
					println("Line:", cmd.GetLineNumber())
				}
			}
			l.GetWarningLogger().Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = nil
		}
	case 3:
		{
			yyVAL.node = &ast{[]node{yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{[]node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = &getObjectNode{yyS[yypt-0].node}
		}
	case 6:
		{
			yyVAL.node = &selectObjectNode{yyS[yypt-0].node}
		}
	case 7:
		{
			yyVAL.node = &selectChildrenNode{yyS[yypt-1].nodeArr}
		}
	case 8:
		{
			yyVAL.node = &updateObjNode{yyS[yypt-4].node, map[string]interface{}{yyS[yypt-2].s: yyS[yypt-0].node}}
		}
	case 9:
		{
			yyVAL.node = &specialUpdateNode{yyS[yypt-6].node, yyS[yypt-4].s, yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 10:
		{
			yyVAL.node = &cdNode{yyS[yypt-0].node}
		}
	case 11:
		{
			yyVAL.node = &lsNode{yyS[yypt-0].node}
		}
	case 12:
		{
			yyVAL.node = &lsNode{&strLeaf{""}}
		}
	case 13:
		{
			yyVAL.node = &lsObjNode{yyS[yypt-0].node, yyS[yypt-1].n}
		}
	case 14:
		{
			yyVAL.node = &lsAttrNode{yyS[yypt-0].node, "heightu"}
		}
	case 15:
		{
			yyVAL.node = &lsAttrNode{yyS[yypt-0].node, "slot"}
		}
	case 16:
		{
			yyVAL.node = &getUNode{yyS[yypt-0].node, 0}
		}
	case 17:
		{
			yyVAL.node = &getUNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 18:
		{
			yyVAL.node = &getUNode{yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 19:
		{
			yyVAL.node = &treeNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 20:
		{
			yyVAL.node = &treeNode{yyS[yypt-0].node, 0}
		}
	case 21:
		{
			yyVAL.node = &drawNode{yyS[yypt-0].node, 0}
		}
	case 22:
		{
			yyVAL.node = &drawNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 23:
		{
			yyVAL.node = &hierarchyNode{yyS[yypt-0].node, 1}
		}
	case 24:
		{
			yyVAL.node = &hierarchyNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 25:
		{
			yyVAL.node = &unsetVarNode{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}
		}
	case 26:
		{
			yyVAL.node = &isEntityDrawableNode{yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = &setEnvNode{yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 28:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 29:
		{
			yyVAL.node = &deleteObjNode{yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &deleteSelectionNode{}
		}
	case 31:
		{
			yyVAL.node = &assignNode{yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = &loadNode{yyS[yypt-0].node}
		}
	case 33:
		{
			yyVAL.node = &loadTemplateNode{yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &selectNode{}
		}
	case 35:
		{
			yyVAL.node = &linkObjectNode{[]interface{}{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 36:
		{
			yyVAL.node = &linkObjectNode{[]interface{}{yyS[yypt-4].node, yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 37:
		{
			yyVAL.node = &unlinkObjectNode{[]interface{}{yyS[yypt-0].node}}
		}
	case 38:
		{
			yyVAL.node = &unlinkObjectNode{[]interface{}{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 39:
		{
			yyVAL.node = &lenNode{yyS[yypt-1].s}
		}
	case 40:
		{
			yyVAL.node = &clrNode{}
		}
	case 41:
		{
			yyVAL.node = &grepNode{}
		}
	case 42:
		{
			yyVAL.node = &printNode{yyS[yypt-0].node}
		}
	case 43:
		{
			yyVAL.node = &lsogNode{}
		}
	case 44:
		{
			yyVAL.node = &envNode{}
		}
	case 45:
		{
			yyVAL.node = &pwdNode{}
		}
	case 46:
		{
			yyVAL.node = &exitNode{}
		}
	case 47:
		{
			yyVAL.node = &helpNode{yyS[yypt-0].s}
		}
	case 48:
		{
			yyVAL.node = &helpNode{""}
		}
	case 49:
		{
			yyVAL.node = &helpNode{yyS[yypt-0].s}
		}
	case 50:
		{
			yyVAL.node = &pathNode{yyS[yypt-0].node, PHYSICAL}
		}
	case 51:
		{
			yyVAL.node = &pathNode{yyS[yypt-0].node, STRAY_DEV}
		}
	case 52:
		{
			yyVAL.node = &pathNode{yyS[yypt-0].node, STD}
		}
	case 53:
		{
			yyVAL.node = &arrayReferenceNode{yyS[yypt-3].s, yyS[yypt-1].node}
		}
	case 54:
		{
			yyVAL.node = yyS[yypt-2].node
		}
	case 55:
		{
			yyVAL.node = yyS[yypt-2].boolNode
		}
	case 56:
		{
			yyVAL.node = &intLeaf{yyS[yypt-0].n}
		}
	case 57:
		{
			yyVAL.node = &floatLeaf{yyS[yypt-0].f}
		}
	case 58:
		{
			yyVAL.node = &intLeaf{-yyS[yypt-0].n}
		}
	case 59:
		{
			yyVAL.node = &floatLeaf{-yyS[yypt-0].f}
		}
	case 60:
		{
			yyVAL.node = &boolLeaf{true}
		}
	case 61:
		{
			yyVAL.node = &boolLeaf{false}
		}
	case 62:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 63:
		{
			yyVAL.node = &arrNode{yyS[yypt-1].nodeArr}
		}
	case 64:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 65:
		{
			yyVAL.node = &concatNode{[]node{yyS[yypt-1].node, yyS[yypt-0].node}}
		}
	case 66:
		{
			yyVAL.node = &symbolReferenceNode{yyS[yypt-0].s}
		}
	case 67:
		{
			yyVAL.node = &symbolReferenceNode{yyS[yypt-1].s}
		}
	case 68:
		{
			yyVAL.node = &strLeaf{yyS[yypt-0].s}
		}
	case 69:
		{
			yyVAL.node = &strLeaf{yyS[yypt-0].s}
		}
	case 70:
		{
			yyVAL.node = &strLeaf{"/"}
		}
	case 71:
		{
			yyVAL.boolNode = &logicalNode{"||", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 72:
		{
			yyVAL.boolNode = &logicalNode{"&&", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 73:
		{
			yyVAL.boolNode = &equalityNode{"==", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 74:
		{
			yyVAL.boolNode = &equalityNode{"!=", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 75:
		{
			yyVAL.boolNode = &comparatorNode{"<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 76:
		{
			yyVAL.boolNode = &comparatorNode{"<=", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 77:
		{
			yyVAL.boolNode = &comparatorNode{">=", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 78:
		{
			yyVAL.boolNode = &comparatorNode{">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 79:
		{
			yyVAL.boolNode = &negateNode{yyS[yypt-0].node}
		}
	case 80:
		{
			yyVAL.boolNode = &boolLeaf{true}
		}
	case 81:
		{
			yyVAL.boolNode = &boolLeaf{false}
		}
	case 82:
		{
			yyVAL.node = &arithNode{"+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 83:
		{
			yyVAL.node = &arithNode{"-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 84:
		{
			yyVAL.node = &arithNode{"*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 85:
		{
			yyVAL.node = &arithNode{"/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 86:
		{
			yyVAL.node = &arithNode{"%", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 87:
		{
			yyVAL.node = &intLeaf{-yyS[yypt-0].n}
		}
	case 88:
		{
			yyVAL.node = &floatLeaf{-yyS[yypt-0].f}
		}
	case 89:
		{
			yyVAL.node = &arithNode{"-", &floatLeaf{0}, yyS[yypt-0].node}
		}
	case 90:
		{
			yyVAL.node = &arithNode{"-", &floatLeaf{0}, yyS[yypt-1].node}
		}
	case 91:
		{
			yyVAL.node = &intLeaf{yyS[yypt-0].n}
		}
	case 92:
		{
			yyVAL.node = &floatLeaf{yyS[yypt-0].f}
		}
	case 93:
		{
			yyVAL.node = &symbolReferenceNode{yyS[yypt-1].s}
		}
	case 94:
		{
			yyVAL.node = &arrayReferenceNode{yyS[yypt-4].s, yyS[yypt-2].node}
		}
	case 95:
		{
			x := []node{yyS[yypt-2].node}
			yyVAL.nodeArr = append(x, yyS[yypt-0].nodeArr...)
		}
	case 96:
		{
			x := []node{yyS[yypt-0].node}
			yyVAL.nodeArr = x
		}
	case 97:
		{
			x := []node{yyS[yypt-2].node}
			yyVAL.nodeArr = append(x, yyS[yypt-0].nodeArr...)
		}
	case 98:
		{
			x := []node{yyS[yypt-0].node}
			yyVAL.nodeArr = x
		}
	case 113:
		{
			yyVAL.n = 0
		}
	case 114:
		{
			yyVAL.n = 1
		}
	case 115:
		{
			yyVAL.n = 2
		}
	case 116:
		{
			yyVAL.n = 3
		}
	case 117:
		{
			yyVAL.n = 4
		}
	case 118:
		{
			yyVAL.n = 5
		}
	case 119:
		{
			yyVAL.n = 6
		}
	case 120:
		{
			yyVAL.n = 7
		}
	case 121:
		{
			yyVAL.n = 8
		}
	case 122:
		{
			yyVAL.n = 9
		}
	case 123:
		{
			yyVAL.n = 10
		}
	case 124:
		{
			yyVAL.s = "link"
		}
	case 125:
		{
			yyVAL.s = "unlink"
		}
	case 126:
		{
			yyVAL.s = "clear"
		}
	case 127:
		{
			yyVAL.s = "ls"
		}
	case 128:
		{
			yyVAL.s = "pwd"
		}
	case 129:
		{
			yyVAL.s = "print"
		}
	case 130:
		{
			yyVAL.s = "cd"
		}
	case 131:
		{
			yyVAL.s = "camera"
		}
	case 132:
		{
			yyVAL.s = "ui"
		}
	case 133:
		{
			yyVAL.s = "get"
		}
	case 134:
		{
			yyVAL.s = "hc"
		}
	case 135:
		{
			yyVAL.s = "tree"
		}
	case 136:
		{
			yyVAL.s = "draw"
		}
	case 137:
		{
			yyVAL.s = "if"
		}
	case 138:
		{
			yyVAL.s = "while"
		}
	case 139:
		{
			yyVAL.s = "for"
		}
	case 140:
		{
			yyVAL.s = "unset"
		}
	case 141:
		{
			yyVAL.s = "select"
		}
	case 142:
		{
			yyVAL.s = "lsog"
		}
	case 143:
		{
			yyVAL.s = "env"
		}
	case 144:
		{
			yyVAL.s = "lsten"
		}
	case 145:
		{
			yyVAL.s = "lssite"
		}
	case 146:
		{
			yyVAL.s = "lsbldg"
		}
	case 147:
		{
			yyVAL.s = "lsroom"
		}
	case 148:
		{
			yyVAL.s = "lsrack"
		}
	case 149:
		{
			yyVAL.s = "lsdev"
		}
	case 150:
		{
			yyVAL.s = "-"
		}
	case 151:
		{
			yyVAL.s = ".template"
		}
	case 152:
		{
			yyVAL.s = ".cmds"
		}
	case 153:
		{
			yyVAL.s = ".var"
		}
	case 154:
		{
			yyVAL.s = "+"
		}
	case 155:
		{
			yyVAL.s = "="
		}
	case 156:
		{
			yyVAL.s = ">"
		}
	case 157:
		{
			yyVAL.s = "drawable"
		}
	case 158:
		{
			yyVAL.s = "lsu"
		}
	case 159:
		{
			yyVAL.s = "lsslot"
		}
	case 160:
		{
			yyVAL.s = "getu"
		}
	case 161:
		{
			yyVAL.s = "getslot"
		}
	case 162:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].node}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.TENANT, attributes}
		}
	case 163:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"orientation": &strLeaf{yyS[yypt-0].s}}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.SITE, attributes}
		}
	case 164:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-4].node, cmd.BLDG, attributes}
		}
	case 165:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-6].node, "size": yyS[yypt-4].node, "orientation": &strLeaf{yyS[yypt-2].s}, "floorUnit": yyS[yypt-0].node}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-8].node, cmd.ROOM, attributes}
		}
	case 166:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-4].node, "size": yyS[yypt-2].node, "orientation": &strLeaf{yyS[yypt-0].s}}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-6].node, cmd.ROOM, attributes}
		}
	case 167:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "template": yyS[yypt-0].node}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-4].node, cmd.ROOM, attributes}
		}
	case 168:
		{
			yyVAL.node = &createRackNode{yyS[yypt-6].node, [3]node{yyS[yypt-4].node, yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 169:
		{
			yyVAL.node = &createDeviceNode{yyS[yypt-4].node, [3]node{yyS[yypt-2].node, yyS[yypt-0].node, nil}}
		}
	case 170:
		{
			yyVAL.node = &createDeviceNode{yyS[yypt-6].node, [3]node{yyS[yypt-4].node, yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 171:
		{
			attributes := map[string]interface{}{"leftRack": yyS[yypt-5].node, "rightRack": yyS[yypt-3].node, "temperature": yyS[yypt-0].node}
			yyVAL.node = &getOCAttrNode{yyS[yypt-8].node, cmd.CORIDOR, attributes}
		}
	case 172:
		{
			attributes := map[string]interface{}{"leftRack": yyS[yypt-6].node, "rightRack": yyS[yypt-4].node, "temperature": yyS[yypt-0].node}
			yyVAL.node = &getOCAttrNode{yyS[yypt-9].node, cmd.CORIDOR, attributes}
		}
	case 173:
		{
			yyVAL.node = &createGroupNode{yyS[yypt-4].node, yyS[yypt-1].nodeArr}
		}
	case 174:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"template": yyS[yypt-0].node}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.STRAY_DEV, attributes}
		}
	case 175:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"template": yyS[yypt-0].node}}
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.STRAYSENSOR, attributes}
		}
	case 176:
		{
			yyVAL.node = &easyPostNode{yyS[yypt-2].s, yyS[yypt-0].node}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}


func yyAnalyse(yylex yyLexer) int {
	const yyError = 112

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
			if cmd.State.DebugLvl > 0 {
				if cmd.State.ScriptCalled == true {
					println("File:",filepath.Base(cmd.GetScriptPath()) )
					println("Line:", cmd.GetLineNumber())
				}
			}
			l.GetWarningLogger().Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			return 0
			yyVAL.node = nil
		}
	case 3:
		{
			return 0
			yyVAL.node = &ast{[]node{yyS[yypt-0].node}}
		}
	case 4:
		{
			return 0
			yyVAL.node = &ast{[]node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 5:
		{
			return 0
			yyVAL.node = &getObjectNode{yyS[yypt-0].node}
		}
	case 6:
		{
			return 0
			yyVAL.node = &selectObjectNode{yyS[yypt-0].node}
		}
	case 7:
		{
			return 0
			yyVAL.node = &selectChildrenNode{yyS[yypt-1].nodeArr}
		}
	case 8:
		{
			return 0
			yyVAL.node = &updateObjNode{yyS[yypt-4].node, map[string]interface{}{yyS[yypt-2].s: yyS[yypt-0].node}}
		}
	case 9:
		{
			return 0
			yyVAL.node = &specialUpdateNode{yyS[yypt-6].node, yyS[yypt-4].s, yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 10:
		{
			return 0
			yyVAL.node = &cdNode{yyS[yypt-0].node}
		}
	case 11:
		{
			return 0
			yyVAL.node = &lsNode{yyS[yypt-0].node}
		}
	case 12:
		{
			return 0
			yyVAL.node = &lsNode{&strLeaf{""}}
		}
	case 13:
		{
			return 0
			yyVAL.node = &lsObjNode{yyS[yypt-0].node, yyS[yypt-1].n}
		}
	case 14:
		{
			return 0
			yyVAL.node = &lsAttrNode{yyS[yypt-0].node, "heightu"}
		}
	case 15:
		{
			return 0
			yyVAL.node = &lsAttrNode{yyS[yypt-0].node, "slot"}
		}
	case 16:
		{
			return 0
			yyVAL.node = &getUNode{yyS[yypt-0].node, 0}
		}
	case 17:
		{
			return 0
			yyVAL.node = &getUNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 18:
		{
			return 0
			yyVAL.node = &getUNode{yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 19:
		{
			return 0
			yyVAL.node = &treeNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 20:
		{
			return 0
			yyVAL.node = &treeNode{yyS[yypt-0].node, 0}
		}
	case 21:
		{
			return 0
			yyVAL.node = &drawNode{yyS[yypt-0].node, 0}
		}
	case 22:
		{
			return 0
			yyVAL.node = &drawNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 23:
		{
			return 0
			yyVAL.node = &hierarchyNode{yyS[yypt-0].node, 1}
		}
	case 24:
		{
			return 0
			yyVAL.node = &hierarchyNode{yyS[yypt-1].node, yyS[yypt-0].n}
		}
	case 25:
		{
			return 0
			yyVAL.node = &unsetVarNode{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}
		}
	case 26:
		{
			return 0
			yyVAL.node = &isEntityDrawableNode{yyS[yypt-0].node}
		}
	case 27:
		{
			return 0
			yyVAL.node = &setEnvNode{yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 28:
		{
			return 0
			yyVAL.node = yyS[yypt-0].node
		}
	case 29:
		{
			return 0
			yyVAL.node = &deleteObjNode{yyS[yypt-0].node}
		}
	case 30:
		{
			return 0
			yyVAL.node = &deleteSelectionNode{}
		}
	case 31:
		{
			return 0
			yyVAL.node = &assignNode{yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 32:
		{
			return 0
			yyVAL.node = &loadNode{yyS[yypt-0].node}
		}
	case 33:
		{
			return 0
			yyVAL.node = &loadTemplateNode{yyS[yypt-0].node}
		}
	case 34:
		{
			return 0
			yyVAL.node = &selectNode{}
		}
	case 35:
		{
			return 0
			yyVAL.node = &linkObjectNode{[]interface{}{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 36:
		{
			return 0
			yyVAL.node = &linkObjectNode{[]interface{}{yyS[yypt-4].node, yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 37:
		{
			return 0
			yyVAL.node = &unlinkObjectNode{[]interface{}{yyS[yypt-0].node}}
		}
	case 38:
		{
			return 0
			yyVAL.node = &unlinkObjectNode{[]interface{}{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 39:
		{
			return 0
			yyVAL.node = &lenNode{yyS[yypt-1].s}
		}
	case 40:
		{
			return 0
			yyVAL.node = &clrNode{}
		}
	case 41:
		{
			return 0
			yyVAL.node = &grepNode{}
		}
	case 42:
		{
			return 0
			yyVAL.node = &printNode{yyS[yypt-0].node}
		}
	case 43:
		{
			return 0
			yyVAL.node = &lsogNode{}
		}
	case 44:
		{
			return 0
			yyVAL.node = &envNode{}
		}
	case 45:
		{
			return 0
			yyVAL.node = &pwdNode{}
		}
	case 46:
		{
			return 0
			yyVAL.node = &exitNode{}
		}
	case 47:
		{
			return 0
			yyVAL.node = &helpNode{yyS[yypt-0].s}
		}
	case 48:
		{
			return 0
			yyVAL.node = &helpNode{""}
		}
	case 49:
		{
			return 0
			yyVAL.node = &helpNode{yyS[yypt-0].s}
		}
	case 50:
		{
			return 0
			yyVAL.node = &pathNode{yyS[yypt-0].node, PHYSICAL}
		}
	case 51:
		{
			return 0
			yyVAL.node = &pathNode{yyS[yypt-0].node, STRAY_DEV}
		}
	case 52:
		{
			return 0
			yyVAL.node = &pathNode{yyS[yypt-0].node, STD}
		}
	case 53:
		{
			return 0
			yyVAL.node = &arrayReferenceNode{yyS[yypt-3].s, yyS[yypt-1].node}
		}
	case 54:
		{
			return 0
			yyVAL.node = yyS[yypt-2].node
		}
	case 55:
		{
			return 0
			yyVAL.node = yyS[yypt-2].boolNode
		}
	case 56:
		{
			return 0
			yyVAL.node = &intLeaf{yyS[yypt-0].n}
		}
	case 57:
		{
			return 0
			yyVAL.node = &floatLeaf{yyS[yypt-0].f}
		}
	case 58:
		{
			return 0
			yyVAL.node = &intLeaf{-yyS[yypt-0].n}
		}
	case 59:
		{
			return 0
			yyVAL.node = &floatLeaf{-yyS[yypt-0].f}
		}
	case 60:
		{
			return 0
			yyVAL.node = &boolLeaf{true}
		}
	case 61:
		{
			return 0
			yyVAL.node = &boolLeaf{false}
		}
	case 62:
		{
			return 0
			yyVAL.node = yyS[yypt-0].node
		}
	case 63:
		{
			return 0
			yyVAL.node = &arrNode{yyS[yypt-1].nodeArr}
		}
	case 64:
		{
			return 0
			yyVAL.node = yyS[yypt-0].node
		}
	case 65:
		{
			return 0
			yyVAL.node = &concatNode{[]node{yyS[yypt-1].node, yyS[yypt-0].node}}
		}
	case 66:
		{
			return 0
			yyVAL.node = &symbolReferenceNode{yyS[yypt-0].s}
		}
	case 67:
		{
			return 0
			yyVAL.node = &symbolReferenceNode{yyS[yypt-1].s}
		}
	case 68:
		{
			return 0
			yyVAL.node = &strLeaf{yyS[yypt-0].s}
		}
	case 69:
		{
			return 0
			yyVAL.node = &strLeaf{yyS[yypt-0].s}
		}
	case 70:
		{
			return 0
			yyVAL.node = &strLeaf{"/"}
		}
	case 71:
		{
			return 0
			yyVAL.boolNode = &logicalNode{"||", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 72:
		{
			return 0
			yyVAL.boolNode = &logicalNode{"&&", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 73:
		{
			return 0
			yyVAL.boolNode = &equalityNode{"==", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 74:
		{
			return 0
			yyVAL.boolNode = &equalityNode{"!=", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 75:
		{
			return 0
			yyVAL.boolNode = &comparatorNode{"<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 76:
		{
			return 0
			yyVAL.boolNode = &comparatorNode{"<=", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 77:
		{
			return 0
			yyVAL.boolNode = &comparatorNode{">=", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 78:
		{
			return 0
			yyVAL.boolNode = &comparatorNode{">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 79:
		{
			return 0
			yyVAL.boolNode = &negateNode{yyS[yypt-0].node}
		}
	case 80:
		{
			return 0
			yyVAL.boolNode = &boolLeaf{true}
		}
	case 81:
		{
			return 0
			yyVAL.boolNode = &boolLeaf{false}
		}
	case 82:
		{
			return 0
			yyVAL.node = &arithNode{"+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 83:
		{
			return 0
			yyVAL.node = &arithNode{"-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 84:
		{
			return 0
			yyVAL.node = &arithNode{"*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 85:
		{
			return 0
			yyVAL.node = &arithNode{"/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 86:
		{
			return 0
			yyVAL.node = &arithNode{"%", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 87:
		{
			return 0
			yyVAL.node = &intLeaf{-yyS[yypt-0].n}
		}
	case 88:
		{
			return 0
			yyVAL.node = &floatLeaf{-yyS[yypt-0].f}
		}
	case 89:
		{
			return 0
			yyVAL.node = &arithNode{"-", &floatLeaf{0}, yyS[yypt-0].node}
		}
	case 90:
		{
			return 0
			yyVAL.node = &arithNode{"-", &floatLeaf{0}, yyS[yypt-1].node}
		}
	case 91:
		{
			return 0
			yyVAL.node = &intLeaf{yyS[yypt-0].n}
		}
	case 92:
		{
			return 0
			yyVAL.node = &floatLeaf{yyS[yypt-0].f}
		}
	case 93:
		{
			return 0
			yyVAL.node = &symbolReferenceNode{yyS[yypt-1].s}
		}
	case 94:
		{
			return 0
			yyVAL.node = &arrayReferenceNode{yyS[yypt-4].s, yyS[yypt-2].node}
		}
	case 95:
		{
			x := []node{yyS[yypt-2].node}
			return 0
			yyVAL.nodeArr = append(x, yyS[yypt-0].nodeArr...)
		}
	case 96:
		{
			x := []node{yyS[yypt-0].node}
			return 0
			yyVAL.nodeArr = x
		}
	case 97:
		{
			x := []node{yyS[yypt-2].node}
			return 0
			yyVAL.nodeArr = append(x, yyS[yypt-0].nodeArr...)
		}
	case 98:
		{
			x := []node{yyS[yypt-0].node}
			return 0
			yyVAL.nodeArr = x
		}
	case 113:
		{
			return 0
			yyVAL.n = 0
		}
	case 114:
		{
			return 0
			yyVAL.n = 1
		}
	case 115:
		{
			return 0
			yyVAL.n = 2
		}
	case 116:
		{
			return 0
			yyVAL.n = 3
		}
	case 117:
		{
			return 0
			yyVAL.n = 4
		}
	case 118:
		{
			return 0
			yyVAL.n = 5
		}
	case 119:
		{
			return 0
			yyVAL.n = 6
		}
	case 120:
		{
			return 0
			yyVAL.n = 7
		}
	case 121:
		{
			return 0
			yyVAL.n = 8
		}
	case 122:
		{
			return 0
			yyVAL.n = 9
		}
	case 123:
		{
			return 0
			yyVAL.n = 10
		}
	case 124:
		{
			return 0
			yyVAL.s = "link"
		}
	case 125:
		{
			return 0
			yyVAL.s = "unlink"
		}
	case 126:
		{
			return 0
			yyVAL.s = "clear"
		}
	case 127:
		{
			return 0
			yyVAL.s = "ls"
		}
	case 128:
		{
			return 0
			yyVAL.s = "pwd"
		}
	case 129:
		{
			return 0
			yyVAL.s = "print"
		}
	case 130:
		{
			return 0
			yyVAL.s = "cd"
		}
	case 131:
		{
			return 0
			yyVAL.s = "camera"
		}
	case 132:
		{
			return 0
			yyVAL.s = "ui"
		}
	case 133:
		{
			return 0
			yyVAL.s = "get"
		}
	case 134:
		{
			return 0
			yyVAL.s = "hc"
		}
	case 135:
		{
			return 0
			yyVAL.s = "tree"
		}
	case 136:
		{
			return 0
			yyVAL.s = "draw"
		}
	case 137:
		{
			return 0
			yyVAL.s = "if"
		}
	case 138:
		{
			return 0
			yyVAL.s = "while"
		}
	case 139:
		{
			return 0
			yyVAL.s = "for"
		}
	case 140:
		{
			return 0
			yyVAL.s = "unset"
		}
	case 141:
		{
			return 0
			yyVAL.s = "select"
		}
	case 142:
		{
			return 0
			yyVAL.s = "lsog"
		}
	case 143:
		{
			return 0
			yyVAL.s = "env"
		}
	case 144:
		{
			return 0
			yyVAL.s = "lsten"
		}
	case 145:
		{
			return 0
			yyVAL.s = "lssite"
		}
	case 146:
		{
			return 0
			yyVAL.s = "lsbldg"
		}
	case 147:
		{
			return 0
			yyVAL.s = "lsroom"
		}
	case 148:
		{
			return 0
			yyVAL.s = "lsrack"
		}
	case 149:
		{
			return 0
			yyVAL.s = "lsdev"
		}
	case 150:
		{
			return 0
			yyVAL.s = "-"
		}
	case 151:
		{
			return 0
			yyVAL.s = ".template"
		}
	case 152:
		{
			return 0
			yyVAL.s = ".cmds"
		}
	case 153:
		{
			return 0
			yyVAL.s = ".var"
		}
	case 154:
		{
			return 0
			yyVAL.s = "+"
		}
	case 155:
		{
			return 0
			yyVAL.s = "="
		}
	case 156:
		{
			return 0
			yyVAL.s = ">"
		}
	case 157:
		{
			return 0
			yyVAL.s = "drawable"
		}
	case 158:
		{
			return 0
			yyVAL.s = "lsu"
		}
	case 159:
		{
			return 0
			yyVAL.s = "lsslot"
		}
	case 160:
		{
			return 0
			yyVAL.s = "getu"
		}
	case 161:
		{
			return 0
			yyVAL.s = "getslot"
		}
	case 162:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].node}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.TENANT, attributes}
		}
	case 163:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"orientation": &strLeaf{yyS[yypt-0].s}}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.SITE, attributes}
		}
	case 164:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "size": yyS[yypt-0].node}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-4].node, cmd.BLDG, attributes}
		}
	case 165:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-6].node, "size": yyS[yypt-4].node, "orientation": &strLeaf{yyS[yypt-2].s}, "floorUnit": yyS[yypt-0].node}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-8].node, cmd.ROOM, attributes}
		}
	case 166:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-4].node, "size": yyS[yypt-2].node, "orientation": &strLeaf{yyS[yypt-0].s}}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-6].node, cmd.ROOM, attributes}
		}
	case 167:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].node, "template": yyS[yypt-0].node}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-4].node, cmd.ROOM, attributes}
		}
	case 168:
		{
			return 0
			yyVAL.node = &createRackNode{yyS[yypt-6].node, [3]node{yyS[yypt-4].node, yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 169:
		{
			return 0
			yyVAL.node = &createDeviceNode{yyS[yypt-4].node, [3]node{yyS[yypt-2].node, yyS[yypt-0].node, nil}}
		}
	case 170:
		{
			return 0
			yyVAL.node = &createDeviceNode{yyS[yypt-6].node, [3]node{yyS[yypt-4].node, yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 171:
		{
			attributes := map[string]interface{}{"leftRack": yyS[yypt-5].node, "rightRack": yyS[yypt-3].node, "temperature": yyS[yypt-0].node}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-8].node, cmd.CORIDOR, attributes}
		}
	case 172:
		{
			attributes := map[string]interface{}{"leftRack": yyS[yypt-6].node, "rightRack": yyS[yypt-4].node, "temperature": yyS[yypt-0].node}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-9].node, cmd.CORIDOR, attributes}
		}
	case 173:
		{
			return 0
			yyVAL.node = &createGroupNode{yyS[yypt-4].node, yyS[yypt-1].nodeArr}
		}
	case 174:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"template": yyS[yypt-0].node}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.STRAY_DEV, attributes}
		}
	case 175:
		{
			attributes := map[string]interface{}{"attributes": map[string]interface{}{"template": yyS[yypt-0].node}}
			return 0
			yyVAL.node = &getOCAttrNode{yyS[yypt-2].node, cmd.STRAYSENSOR, attributes}
		}
	case 176:
		{
			return 0
			yyVAL.node = &easyPostNode{yyS[yypt-2].s, yyS[yypt-0].node}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
