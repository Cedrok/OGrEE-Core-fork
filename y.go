// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57427
	yyEofCode      = 57344
	TOK_AND        = 57415
	TOK_ATTR       = 57356
	TOK_ATTRSPEC   = 57390
	TOK_BASHTYPE   = 57365
	TOK_BLDG       = 57350
	TOK_BOOL       = 57359
	TOK_CD         = 57371
	TOK_CLR        = 57373
	TOK_CMDFLAG    = 57367
	TOK_CMDS       = 57401
	TOK_COL        = 57395
	TOK_COMMA      = 57399
	TOK_CREATE     = 57360
	TOK_DELETE     = 57363
	TOK_DEREF      = 57404
	TOK_DEVICE     = 57353
	TOK_DIV        = 57420
	TOK_DOC        = 57370
	TOK_DONE       = 57426
	TOK_DOT        = 57400
	TOK_ELSE       = 57409
	TOK_EQUAL      = 57366
	TOK_EXIT       = 57369
	TOK_FI         = 57425
	TOK_FOR        = 57407
	TOK_GET        = 57361
	TOK_GREATER    = 57422
	TOK_GREP       = 57374
	TOK_IF         = 57406
	TOK_IN         = 57416
	TOK_LBLOCK     = 57410
	TOK_LBRAC      = 57397
	TOK_LESS       = 57423
	TOK_LPAREN     = 57412
	TOK_LS         = 57375
	TOK_LSBLDG     = 57380
	TOK_LSDEV      = 57383
	TOK_LSOG       = 57377
	TOK_LSRACK     = 57382
	TOK_LSROOM     = 57381
	TOK_LSSITE     = 57379
	TOK_LSSUBDEV   = 57384
	TOK_LSSUBDEV1  = 57385
	TOK_LSTEN      = 57378
	TOK_MULT       = 57421
	TOK_NOT        = 57419
	TOK_NUM        = 57346
	TOK_OCBLDG     = 57386
	TOK_OCDEL      = 57358
	TOK_OCDEV      = 57387
	TOK_OCRACK     = 57388
	TOK_OCROOM     = 57389
	TOK_OCSDEV     = 57393
	TOK_OCSDEV1    = 57394
	TOK_OCSITE     = 57391
	TOK_OCTENANT   = 57392
	TOK_OR         = 57414
	TOK_PLUS       = 57357
	TOK_PRNT       = 57417
	TOK_PWD        = 57372
	TOK_QUOT       = 57418
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57411
	TOK_RBRAC      = 57398
	TOK_ROOM       = 57351
	TOK_RPAREN     = 57413
	TOK_SEARCH     = 57364
	TOK_SELECT     = 57396
	TOK_SEMICOL    = 57405
	TOK_SITE       = 57349
	TOK_SLASH      = 57368
	TOK_SUBDEVICE  = 57354
	TOK_SUBDEVICE1 = 57355
	TOK_TEMPLATE   = 57402
	TOK_TENANT     = 57348
	TOK_THEN       = 57424
	TOK_TREE       = 57376
	TOK_UPDATE     = 57362
	TOK_VAR        = 57403
	TOK_WHILE      = 57408
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -146
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57426: 0,   // TOK_DONE (157x)
		57425: 1,   // TOK_FI (153x)
		57344: 2,   // $end (152x)
		57409: 3,   // TOK_ELSE (151x)
		57405: 4,   // TOK_SEMICOL (151x)
		57413: 5,   // TOK_RPAREN (142x)
		57358: 6,   // TOK_OCDEL (125x)
		57347: 7,   // TOK_WORD (117x)
		57404: 8,   // TOK_DEREF (72x)
		57400: 9,   // TOK_DOT (66x)
		57346: 10,  // TOK_NUM (66x)
		57357: 11,  // TOK_PLUS (63x)
		57359: 12,  // TOK_BOOL (51x)
		57368: 13,  // TOK_SLASH (50x)
		57419: 14,  // TOK_NOT (48x)
		57390: 15,  // TOK_ATTRSPEC (47x)
		57366: 16,  // TOK_EQUAL (46x)
		57452: 17,  // P1 (43x)
		57451: 18,  // P (40x)
		57414: 19,  // TOK_OR (35x)
		57356: 20,  // TOK_ATTR (31x)
		57415: 21,  // TOK_AND (29x)
		57450: 22,  // ORIENTN (28x)
		57411: 23,  // TOK_RBLOCK (27x)
		57456: 24,  // WORDORNUM (27x)
		57412: 25,  // TOK_LPAREN (24x)
		57457: 26,  // factor (21x)
		57464: 27,  // unary (21x)
		57422: 28,  // TOK_GREATER (18x)
		57423: 29,  // TOK_LESS (18x)
		57420: 30,  // TOK_DIV (17x)
		57421: 31,  // TOK_MULT (17x)
		57463: 32,  // term (16x)
		57395: 33,  // TOK_COL (15x)
		57458: 34,  // nex (14x)
		57454: 35,  // REL (10x)
		57371: 36,  // TOK_CD (10x)
		57360: 37,  // TOK_CREATE (10x)
		57363: 38,  // TOK_DELETE (10x)
		57361: 39,  // TOK_GET (10x)
		57375: 40,  // TOK_LS (10x)
		57377: 41,  // TOK_LSOG (10x)
		57376: 42,  // TOK_TREE (10x)
		57362: 43,  // TOK_UPDATE (10x)
		57428: 44,  // BASH (9x)
		57436: 45,  // K (9x)
		57437: 46,  // NT_CREATE (9x)
		57438: 47,  // NT_DEL (9x)
		57439: 48,  // NT_GET (9x)
		57440: 49,  // NT_UPDATE (9x)
		57441: 50,  // OCCHOOSE (9x)
		57443: 51,  // OCDEL (9x)
		57444: 52,  // OCDOT (9x)
		57445: 53,  // OCGET (9x)
		57446: 54,  // OCLISYNTX (9x)
		57447: 55,  // OCSEL (9x)
		57448: 56,  // OCUPDATE (9x)
		57453: 57,  // Q (9x)
		57462: 58,  // stmnt (9x)
		57373: 59,  // TOK_CLR (9x)
		57370: 60,  // TOK_DOC (9x)
		57369: 61,  // TOK_EXIT (9x)
		57374: 62,  // TOK_GREP (9x)
		57380: 63,  // TOK_LSBLDG (9x)
		57383: 64,  // TOK_LSDEV (9x)
		57382: 65,  // TOK_LSRACK (9x)
		57381: 66,  // TOK_LSROOM (9x)
		57379: 67,  // TOK_LSSITE (9x)
		57384: 68,  // TOK_LSSUBDEV (9x)
		57385: 69,  // TOK_LSSUBDEV1 (9x)
		57378: 70,  // TOK_LSTEN (9x)
		57417: 71,  // TOK_PRNT (9x)
		57372: 72,  // TOK_PWD (9x)
		57418: 73,  // TOK_QUOT (9x)
		57396: 74,  // TOK_SELECT (9x)
		57429: 75,  // CTRL (8x)
		57431: 76,  // EQAL (8x)
		57449: 77,  // OPEN_STMT (8x)
		57460: 78,  // st2 (8x)
		57407: 79,  // TOK_FOR (8x)
		57406: 80,  // TOK_IF (8x)
		57408: 81,  // TOK_WHILE (8x)
		57435: 82,  // JOIN (7x)
		57432: 83,  // EXPR (6x)
		57433: 84,  // F (5x)
		57398: 85,  // TOK_RBRAC (4x)
		57350: 86,  // TOK_BLDG (3x)
		57353: 87,  // TOK_DEVICE (3x)
		57352: 88,  // TOK_RACK (3x)
		57351: 89,  // TOK_ROOM (3x)
		57349: 90,  // TOK_SITE (3x)
		57348: 91,  // TOK_TENANT (3x)
		57430: 92,  // E (2x)
		57434: 93,  // GETOBJS (2x)
		57455: 94,  // STRARG (2x)
		57397: 95,  // TOK_LBRAC (2x)
		57354: 96,  // TOK_SUBDEVICE (2x)
		57355: 97,  // TOK_SUBDEVICE1 (2x)
		57442: 98,  // OCCR (1x)
		57459: 99,  // opn (1x)
		57461: 100, // start (1x)
		57401: 101, // TOK_CMDS (1x)
		57399: 102, // TOK_COMMA (1x)
		57416: 103, // TOK_IN (1x)
		57410: 104, // TOK_LBLOCK (1x)
		57386: 105, // TOK_OCBLDG (1x)
		57387: 106, // TOK_OCDEV (1x)
		57388: 107, // TOK_OCRACK (1x)
		57389: 108, // TOK_OCROOM (1x)
		57391: 109, // TOK_OCSITE (1x)
		57392: 110, // TOK_OCTENANT (1x)
		57402: 111, // TOK_TEMPLATE (1x)
		57424: 112, // TOK_THEN (1x)
		57403: 113, // TOK_VAR (1x)
		57427: 114, // $default (0x)
		57345: 115, // error (0x)
		57365: 116, // TOK_BASHTYPE (0x)
		57367: 117, // TOK_CMDFLAG (0x)
		57393: 118, // TOK_OCSDEV (0x)
		57394: 119, // TOK_OCSDEV1 (0x)
		57364: 120, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_FI",
		"$end",
		"TOK_ELSE",
		"TOK_SEMICOL",
		"TOK_RPAREN",
		"TOK_OCDEL",
		"TOK_WORD",
		"TOK_DEREF",
		"TOK_DOT",
		"TOK_NUM",
		"TOK_PLUS",
		"TOK_BOOL",
		"TOK_SLASH",
		"TOK_NOT",
		"TOK_ATTRSPEC",
		"TOK_EQUAL",
		"P1",
		"P",
		"TOK_OR",
		"TOK_ATTR",
		"TOK_AND",
		"ORIENTN",
		"TOK_RBLOCK",
		"WORDORNUM",
		"TOK_LPAREN",
		"factor",
		"unary",
		"TOK_GREATER",
		"TOK_LESS",
		"TOK_DIV",
		"TOK_MULT",
		"term",
		"TOK_COL",
		"nex",
		"REL",
		"TOK_CD",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_GET",
		"TOK_LS",
		"TOK_LSOG",
		"TOK_TREE",
		"TOK_UPDATE",
		"BASH",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCDOT",
		"OCGET",
		"OCLISYNTX",
		"OCSEL",
		"OCUPDATE",
		"Q",
		"stmnt",
		"TOK_CLR",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GREP",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSSUBDEV",
		"TOK_LSSUBDEV1",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_QUOT",
		"TOK_SELECT",
		"CTRL",
		"EQAL",
		"OPEN_STMT",
		"st2",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"JOIN",
		"EXPR",
		"F",
		"TOK_RBRAC",
		"TOK_BLDG",
		"TOK_DEVICE",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"E",
		"GETOBJS",
		"STRARG",
		"TOK_LBRAC",
		"TOK_SUBDEVICE",
		"TOK_SUBDEVICE1",
		"OCCR",
		"opn",
		"start",
		"TOK_CMDS",
		"TOK_COMMA",
		"TOK_IN",
		"TOK_LBLOCK",
		"TOK_OCBLDG",
		"TOK_OCDEV",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"$default",
		"error",
		"TOK_BASHTYPE",
		"TOK_CMDFLAG",
		"TOK_OCSDEV",
		"TOK_OCSDEV1",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {100, 1},
		2:   {78, 2},
		3:   {78, 3},
		4:   {78, 1},
		5:   {99, 1},
		6:   {99, 0},
		7:   {58, 1},
		8:   {58, 1},
		9:   {58, 1},
		10:  {58, 0},
		11:  {75, 1},
		12:  {77, 7},
		13:  {77, 9},
		14:  {77, 6},
		15:  {77, 15},
		16:  {77, 7},
		17:  {77, 12},
		18:  {83, 3},
		19:  {83, 1},
		20:  {82, 3},
		21:  {82, 1},
		22:  {76, 4},
		23:  {76, 4},
		24:  {76, 1},
		25:  {35, 3},
		26:  {35, 4},
		27:  {35, 4},
		28:  {35, 3},
		29:  {35, 1},
		30:  {34, 3},
		31:  {34, 3},
		32:  {34, 1},
		33:  {32, 3},
		34:  {32, 3},
		35:  {32, 1},
		36:  {27, 2},
		37:  {27, 2},
		38:  {27, 1},
		39:  {26, 3},
		40:  {26, 1},
		41:  {26, 2},
		42:  {26, 1},
		43:  {26, 1},
		44:  {45, 1},
		45:  {45, 1},
		46:  {45, 1},
		47:  {45, 1},
		48:  {46, 3},
		49:  {46, 4},
		50:  {48, 2},
		51:  {48, 3},
		52:  {49, 3},
		53:  {47, 2},
		54:  {92, 1},
		55:  {92, 1},
		56:  {92, 1},
		57:  {92, 1},
		58:  {92, 1},
		59:  {92, 1},
		60:  {92, 1},
		61:  {92, 1},
		62:  {22, 1},
		63:  {22, 1},
		64:  {22, 0},
		65:  {24, 1},
		66:  {24, 1},
		67:  {24, 4},
		68:  {24, 1},
		69:  {84, 4},
		70:  {84, 3},
		71:  {18, 1},
		72:  {18, 2},
		73:  {17, 3},
		74:  {17, 1},
		75:  {17, 4},
		76:  {17, 1},
		77:  {17, 2},
		78:  {17, 1},
		79:  {17, 2},
		80:  {17, 0},
		81:  {57, 2},
		82:  {57, 2},
		83:  {57, 2},
		84:  {57, 2},
		85:  {57, 2},
		86:  {57, 2},
		87:  {57, 2},
		88:  {57, 2},
		89:  {57, 2},
		90:  {57, 2},
		91:  {57, 2},
		92:  {57, 2},
		93:  {57, 3},
		94:  {57, 1},
		95:  {44, 1},
		96:  {44, 1},
		97:  {44, 4},
		98:  {44, 1},
		99:  {44, 1},
		100: {44, 1},
		101: {44, 1},
		102: {44, 2},
		103: {44, 2},
		104: {44, 2},
		105: {44, 2},
		106: {44, 2},
		107: {44, 2},
		108: {44, 2},
		109: {44, 2},
		110: {44, 2},
		111: {54, 2},
		112: {54, 1},
		113: {54, 1},
		114: {54, 1},
		115: {54, 1},
		116: {54, 1},
		117: {54, 1},
		118: {98, 5},
		119: {98, 5},
		120: {98, 5},
		121: {98, 5},
		122: {98, 7},
		123: {98, 7},
		124: {98, 7},
		125: {98, 7},
		126: {98, 7},
		127: {98, 7},
		128: {98, 7},
		129: {98, 7},
		130: {51, 2},
		131: {56, 5},
		132: {53, 2},
		133: {93, 3},
		134: {93, 1},
		135: {50, 4},
		136: {52, 6},
		137: {52, 4},
		138: {52, 4},
		139: {52, 2},
		140: {52, 4},
		141: {52, 4},
		142: {55, 1},
		143: {55, 5},
		144: {94, 2},
		145: {94, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [326][]uint16{
		// 0
		{2: 136, 4: 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 148, 157, 155, 156, 100: 147},
		{2: 146},
		{2: 145},
		{140, 140, 140, 140, 470, 99: 469},
		{142, 142, 142, 142},
		// 5
		{139, 139, 139, 139, 139, 139},
		{138, 138, 138, 138, 138, 138},
		{137, 137, 137, 137, 137, 137},
		{135, 135, 135, 135},
		{104: 460},
		// 10
		{25: 455},
		{7: 427, 25: 426},
		{102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100},
		// 15
		{99, 99, 99, 99, 99, 99},
		{86: 415, 418, 417, 416, 414, 413, 422, 96: 419, 420},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 411, 86: 415, 418, 417, 416, 414, 413, 412, 96: 419, 420},
		{6: 206, 168, 207, 205, 13: 167, 17: 166, 405, 20: 66},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 404},
		// 20
		{75, 75, 75, 75, 75, 75, 9: 75, 75, 15: 75, 20: 75},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 66, 15: 66, 17: 403, 20: 66},
		{72, 72, 72, 72, 72, 72, 9: 72, 72, 13: 401, 15: 72, 20: 72},
		{9: 216, 101: 391, 111: 392, 113: 390},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 389},
		// 25
		{7: 336},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 335},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 334},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 333},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 332},
		// 30
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 331},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 330},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 329},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 328},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 327},
		// 35
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 326},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 323, 13: 167, 17: 166, 324},
		{52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50},
		// 40
		{73: 318},
		{48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 7: 315, 36: 310, 311, 314, 312, 309, 317, 316, 313},
		// 45
		{86: 238, 244, 242, 240, 236, 234, 98: 232, 105: 237, 243, 241, 239, 235, 233},
		{34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33},
		{32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31},
		// 50
		{30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29},
		{9: 219},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 208, 95: 209},
		{4, 4, 4, 4, 4, 4, 9: 201},
		// 55
		{20: 202},
		{16: 203},
		{7: 204},
		{3, 3, 3, 3, 3, 3},
		{9: 216},
		// 60
		{68, 68, 68, 68, 68, 68, 9: 68, 68, 15: 68, 20: 68},
		{7: 215},
		{14, 14, 14, 14, 14, 14},
		{7: 210, 93: 211},
		{85: 12, 102: 213},
		// 65
		{85: 212},
		{11, 11, 11, 11, 11, 11},
		{7: 210, 93: 214},
		{85: 13},
		{67, 67, 67, 67, 67, 67, 9: 67, 67, 15: 67, 20: 67},
		// 70
		{69, 69, 69, 69, 69, 69, 9: 69, 69, 13: 217, 15: 69, 20: 69},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 66, 15: 66, 17: 218, 20: 66},
		{71, 71, 71, 71, 71, 71, 9: 71, 71, 15: 71, 20: 71},
		{20: 220},
		{16: 221},
		// 75
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 228},
		{7: 84},
		{7: 83},
		{81, 81, 81, 81, 81, 81, 81, 81, 10: 81, 81, 81, 15: 81, 20: 81, 73: 81},
		{80, 80, 80, 80, 80, 80, 80, 80, 10: 80, 80, 80, 15: 80, 20: 80, 73: 80},
		// 80
		{7: 229},
		{78, 78, 78, 78, 78, 78, 78, 78, 10: 78, 78, 78, 15: 78, 20: 78, 73: 78},
		{15, 15, 15, 15, 15, 15},
		{6: 223, 82, 11: 222, 22: 230},
		{7: 231},
		// 85
		{79, 79, 79, 79, 79, 79, 79, 79, 10: 79, 79, 79, 15: 79, 20: 79, 73: 79},
		{35, 35, 35, 35, 35, 35},
		{33: 305},
		{33: 301},
		{33: 297},
		// 90
		{33: 293},
		{33: 287},
		{33: 281},
		{33: 275},
		{33: 269},
		// 95
		{33: 263},
		{33: 257},
		{33: 251},
		{33: 245},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 246},
		// 100
		{15: 247},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 248},
		{15: 249},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 250},
		{17, 17, 17, 17, 17, 17},
		// 105
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 252},
		{15: 253},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 254},
		{15: 255},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 256},
		// 110
		{18, 18, 18, 18, 18, 18},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 258},
		{15: 259},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 260},
		{15: 261},
		// 115
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 262},
		{19, 19, 19, 19, 19, 19},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 264},
		{15: 265},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 266},
		// 120
		{15: 267},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 268},
		{20, 20, 20, 20, 20, 20},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 270},
		{15: 271},
		// 125
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 272},
		{15: 273},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 274},
		{21, 21, 21, 21, 21, 21},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 276},
		// 130
		{15: 277},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 278},
		{15: 279},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 280},
		{22, 22, 22, 22, 22, 22},
		// 135
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 282},
		{15: 283},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 284},
		{15: 285},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 286},
		// 140
		{23, 23, 23, 23, 23, 23},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 288},
		{15: 289},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 290},
		{15: 291},
		// 145
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 292},
		{24, 24, 24, 24, 24, 24},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 294},
		{15: 295},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 296},
		// 150
		{25, 25, 25, 25, 25, 25},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 298},
		{15: 299},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 300},
		{26, 26, 26, 26, 26, 26},
		// 155
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 302},
		{15: 303},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 304},
		{27, 27, 27, 27, 27, 27},
		{6: 206, 168, 207, 205, 13: 167, 15: 66, 17: 166, 306},
		// 160
		{15: 307},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 308},
		{28, 28, 28, 28, 28, 28},
		{44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43},
		// 165
		{42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38},
		// 170
		{37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 320, 73: 1, 94: 319},
		{73: 322},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 320, 73: 1, 94: 321},
		// 175
		{73: 2},
		{49, 49, 49, 49, 49, 49},
		{55, 55, 55, 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 10: 325},
		{53, 53, 53, 53, 53, 53},
		// 180
		{56, 56, 56, 56, 56, 56},
		{57, 57, 57, 57, 57, 57},
		{58, 58, 58, 58, 58, 58},
		{59, 59, 59, 59, 59, 59},
		{60, 60, 60, 60, 60, 60},
		// 185
		{61, 61, 61, 61, 61, 61},
		{62, 62, 62, 62, 62, 62},
		{63, 63, 63, 63, 63, 63},
		{64, 64, 64, 64, 64, 64},
		{65, 65, 65, 65, 65, 65},
		// 190
		{7, 7, 7, 7, 7, 7, 9: 67, 16: 337},
		{6: 346, 351, 350, 10: 349, 222, 352, 14: 345, 22: 226, 24: 353, 348, 347, 344, 32: 343, 34: 342, 341, 76: 340, 82: 339, 338},
		{5, 5, 5, 5, 5, 5, 19: 361},
		{127, 127, 127, 127, 127, 127, 19: 127, 21: 364, 23: 127},
		{125, 125, 125, 125, 125, 125, 14: 367, 16: 366, 19: 125, 21: 125, 23: 125},
		// 195
		{122, 122, 122, 122, 122, 122, 14: 122, 16: 122, 19: 122, 21: 122, 23: 122},
		{117, 117, 117, 117, 117, 117, 380, 11: 379, 14: 117, 16: 117, 19: 117, 21: 117, 23: 117, 28: 378, 377},
		{114, 114, 114, 114, 114, 114, 114, 11: 114, 14: 114, 16: 114, 19: 114, 21: 114, 23: 114, 28: 114, 114, 374, 373},
		{111, 111, 111, 111, 111, 111, 111, 11: 111, 14: 111, 16: 111, 19: 111, 21: 111, 23: 111, 28: 111, 111, 111, 111},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 372},
		// 200
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 360},
		{108, 108, 108, 108, 108, 108, 108, 11: 108, 14: 108, 16: 108, 19: 108, 21: 108, 23: 108, 28: 108, 108, 108, 108},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 341, 76: 340, 82: 339, 355},
		{106, 106, 106, 106, 106, 106, 106, 11: 106, 14: 106, 16: 106, 19: 106, 21: 106, 28: 106, 106, 106, 106},
		{7: 354},
		// 205
		{104, 104, 104, 104, 104, 104, 104, 11: 104, 14: 104, 16: 104, 19: 104, 21: 104, 28: 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 11: 103, 14: 103, 16: 103, 19: 103, 21: 103, 28: 103, 103, 103, 103},
		{6, 6, 6, 6, 6, 6},
		{105, 105, 105, 105, 105, 105, 105, 11: 105, 14: 105, 16: 105, 19: 105, 21: 105, 23: 105, 28: 105, 105, 105, 105},
		{5: 362, 19: 361},
		// 210
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 360},
		{106, 106, 106, 106, 106, 106, 106, 11: 106, 14: 106, 16: 106, 19: 106, 21: 106, 23: 106, 28: 106, 106, 106, 106},
		{104, 104, 104, 104, 104, 104, 104, 11: 104, 14: 104, 16: 104, 19: 104, 21: 104, 23: 104, 28: 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 11: 103, 14: 103, 16: 103, 19: 103, 21: 103, 23: 103, 28: 103, 103, 103, 103},
		{109, 109, 109, 109, 109, 109, 109, 11: 109, 14: 109, 16: 109, 19: 109, 21: 109, 23: 109, 28: 109, 109, 109, 109},
		// 215
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 341, 76: 340, 82: 363},
		{107, 107, 107, 107, 107, 107, 107, 11: 107, 14: 107, 16: 107, 19: 107, 21: 107, 23: 107, 28: 107, 107, 107, 107},
		{128, 128, 128, 128, 128, 128, 19: 128, 21: 364, 23: 128},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 341, 76: 365},
		{126, 126, 126, 126, 126, 126, 14: 367, 16: 366, 19: 126, 21: 126, 23: 126},
		// 220
		{16: 370},
		{16: 368},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 369},
		{123, 123, 123, 123, 123, 123, 14: 123, 16: 123, 19: 123, 21: 123, 23: 123},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 371},
		// 225
		{124, 124, 124, 124, 124, 124, 14: 124, 16: 124, 19: 124, 21: 124, 23: 124},
		{110, 110, 110, 110, 110, 110, 110, 11: 110, 14: 110, 16: 110, 19: 110, 21: 110, 23: 110, 28: 110, 110, 110, 110},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 376},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 375},
		{112, 112, 112, 112, 112, 112, 112, 11: 112, 14: 112, 16: 112, 19: 112, 21: 112, 23: 112, 28: 112, 112, 112, 112},
		// 230
		{113, 113, 113, 113, 113, 113, 113, 11: 113, 14: 113, 16: 113, 19: 113, 21: 113, 23: 113, 28: 113, 113, 113, 113},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 16: 387, 25: 348, 347, 344, 32: 343, 34: 386},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 16: 383, 25: 348, 347, 344, 32: 343, 34: 384},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 382},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 381},
		// 235
		{115, 115, 115, 115, 115, 115, 115, 11: 115, 14: 115, 16: 115, 19: 115, 21: 115, 23: 115, 28: 115, 115, 374, 373},
		{116, 116, 116, 116, 116, 116, 116, 11: 116, 14: 116, 16: 116, 19: 116, 21: 116, 23: 116, 28: 116, 116, 374, 373},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 385},
		{118, 118, 118, 118, 118, 118, 380, 11: 379, 14: 118, 16: 118, 19: 118, 21: 118, 23: 118},
		{119, 119, 119, 119, 119, 119, 380, 11: 379, 14: 119, 16: 119, 19: 119, 21: 119, 23: 119},
		// 240
		{121, 121, 121, 121, 121, 121, 380, 11: 379, 14: 121, 16: 121, 19: 121, 21: 121, 23: 121},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 388},
		{120, 120, 120, 120, 120, 120, 380, 11: 379, 14: 120, 16: 120, 19: 120, 21: 120, 23: 120},
		{16, 16, 16, 16, 16, 16},
		{33: 397},
		// 245
		{33: 395},
		{33: 393},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 394},
		{8, 8, 8, 8, 8, 8},
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 13: 167, 17: 166, 396},
		// 250
		{9, 9, 9, 9, 9, 9},
		{7: 398},
		{16: 399},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 400},
		{10, 10, 10, 10, 10, 10},
		// 255
		{66, 66, 66, 66, 66, 66, 206, 168, 207, 205, 66, 15: 66, 17: 402, 20: 66},
		{73, 73, 73, 73, 73, 73, 9: 73, 73, 15: 73, 20: 73},
		{74, 74, 74, 74, 74, 74, 9: 74, 74, 15: 74, 20: 74},
		{93, 93, 93, 93, 93, 93},
		{20: 407, 84: 406},
		// 260
		{94, 94, 94, 94, 94, 94},
		{16: 408},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 409},
		{76, 76, 76, 76, 76, 76, 20: 407, 84: 410},
		{77, 77, 77, 77, 77, 77},
		// 265
		{96, 96, 96, 96, 96, 96},
		{20: 407, 84: 421},
		{6: 92, 92, 92, 92, 13: 92, 20: 92},
		{6: 91, 91, 91, 91, 13: 91, 20: 91},
		{6: 90, 90, 90, 90, 13: 90, 20: 90},
		// 270
		{6: 89, 89, 89, 89, 13: 89, 20: 89},
		{6: 88, 88, 88, 88, 13: 88, 20: 88},
		{6: 87, 87, 87, 87, 13: 87, 20: 87},
		{6: 86, 86, 86, 86, 13: 86, 20: 86},
		{6: 85, 85, 85, 85, 13: 85, 20: 85},
		// 275
		{95, 95, 95, 95, 95, 95},
		{6: 206, 168, 207, 205, 13: 167, 17: 166, 424, 20: 407, 84: 423},
		{98, 98, 98, 98, 98, 98},
		{20: 407, 84: 425},
		{97, 97, 97, 97, 97, 97},
		// 280
		{25: 442},
		{103: 428},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 341, 76: 340, 82: 339, 429, 95: 430},
		{4: 439, 19: 361},
		{10: 431},
		// 285
		{9: 432},
		{9: 433},
		{10: 434},
		{85: 435},
		{4: 436},
		// 290
		{136, 4: 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 437, 157, 155, 156},
		{438},
		{129, 129, 129, 129},
		{136, 4: 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 440, 157, 155, 156},
		{441},
		// 295
		{130, 130, 130, 130},
		{7: 443},
		{16: 444},
		{6: 223, 224, 10: 225, 222, 227, 22: 226, 24: 445},
		{4: 446},
		// 300
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 341, 76: 340, 82: 339, 447},
		{4: 448, 19: 361},
		{5: 136, 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 449, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200},
		{5: 450},
		{5: 451},
		// 305
		{4: 452},
		{136, 4: 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 453, 157, 155, 156},
		{454},
		{131, 131, 131, 131},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 341, 76: 340, 82: 339, 456},
		// 310
		{5: 457, 19: 361},
		{136, 4: 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 458, 157, 155, 156},
		{459},
		{132, 132, 132, 132},
		{6: 356, 358, 350, 10: 357, 12: 359, 14: 345, 25: 348, 347, 344, 32: 343, 34: 342, 341, 76: 340, 82: 339, 461},
		// 315
		{19: 361, 23: 462},
		{112: 463},
		{1: 136, 3: 136, 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 464, 157, 155, 156},
		{1: 465, 3: 466},
		{134, 134, 134, 134},
		// 320
		{1: 136, 4: 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 467, 157, 155, 156},
		{1: 468},
		{133, 133, 133, 133},
		{144, 144, 144, 144},
		{141, 141, 141, 141, 136, 6: 170, 168, 171, 169, 11: 191, 13: 167, 16: 199, 166, 198, 36: 172, 162, 165, 163, 173, 187, 182, 164, 183, 151, 158, 161, 159, 160, 195, 192, 196, 194, 153, 197, 193, 152, 149, 184, 190, 189, 185, 176, 179, 178, 177, 175, 180, 181, 174, 186, 188, 74: 200, 150, 77: 154, 471, 157, 155, 156},
		// 325
		{143, 143, 143, 143},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 115

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-1].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 10:
		{
			yyVAL.node = nil
		}
	case 11:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil}
		}
	case 13:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-6].node, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 15:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 16:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 17:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 21:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 22:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 23:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 24:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 30:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 36:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 37:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 38:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 39:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 40:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 41:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s}
		}
	case 42:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s}
		}
	case 43:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 44:
		{
			println("@State start")
		}
	case 48:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-1].s), yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 49:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s)}}
		}
	case 50:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 51:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 52:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 53:
		{
			println("@State NT_DEL")
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 62:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 63:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 64:
		{
			yyVAL.s = ""
		}
	case 65:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 66:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 67:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 68:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 69:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 70:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 72:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 73:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 74:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 75:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 76:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 77:
		{
			yyVAL.s = ".."
		}
	case 78:
		{
			yyVAL.s = "-"
		}
	case 79:
		{
			yyVAL.s = ""
		}
	case 80:
		{
			yyVAL.s = ""
		}
	case 81:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 82:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 83:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 84:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 85:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 86:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 87:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 88:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 89:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 90:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 91:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{"", yyS[yypt-0].n}}
		}
	case 92:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 93:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 94:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 95:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 96:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 97:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", []interface{}{yyS[yypt-1].s}}
		}
	case 98:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 99:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 100:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 101:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 111:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 112:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 113:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 114:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 115:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 116:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 117:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 131:
		{
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val)}}
			println("Attribute Acquired")
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 133:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 134:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 136:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, dCatchNodePtr}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 139:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s}
		}
	case 140:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s}
			yyVAL.node = &assignNode{ASSIGN, n, dCatchNodePtr}
		}
	case 141:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 143:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{resMap(&x)}}
		}
	case 144:
		{
			yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
		}
	case 145:
		{
			yyVAL.s = ""
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
