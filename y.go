// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strings"
)

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

type yySymType struct {
	yys int
	//n int
	s string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault        = 57372
	yyEofCode        = 57344
	TOKEN_ATTR       = 57355
	TOKEN_BASHTYPE   = 57361
	TOKEN_BLDG       = 57349
	TOKEN_CD         = 57367
	TOKEN_CLR        = 57369
	TOKEN_CMDFLAG    = 57363
	TOKEN_CREATE     = 57356
	TOKEN_DELETE     = 57359
	TOKEN_DEVICE     = 57352
	TOKEN_DOC        = 57366
	TOKEN_EQUAL      = 57362
	TOKEN_EXIT       = 57365
	TOKEN_GET        = 57357
	TOKEN_GREP       = 57370
	TOKEN_LS         = 57371
	TOKEN_PWD        = 57368
	TOKEN_RACK       = 57351
	TOKEN_ROOM       = 57350
	TOKEN_SEARCH     = 57360
	TOKEN_SITE       = 57348
	TOKEN_SLASH      = 57364
	TOKEN_SUBDEVICE  = 57353
	TOKEN_SUBDEVICE1 = 57354
	TOKEN_TENANT     = 57347
	TOKEN_UPDATE     = 57358
	TOKEN_WORD       = 57346
	yyErrCode        = 57345

	yyMaxDepth = 200
	yyTabOfs   = -47
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57344: 0,  // $end (44x)
		57355: 1,  // TOKEN_ATTR (20x)
		57346: 2,  // TOKEN_WORD (18x)
		57364: 3,  // TOKEN_SLASH (17x)
		57381: 4,  // P1 (8x)
		57375: 5,  // F (6x)
		57380: 6,  // P (6x)
		57374: 7,  // E (2x)
		57349: 8,  // TOKEN_BLDG (2x)
		57367: 9,  // TOKEN_CD (2x)
		57363: 10, // TOKEN_CMDFLAG (2x)
		57356: 11, // TOKEN_CREATE (2x)
		57359: 12, // TOKEN_DELETE (2x)
		57352: 13, // TOKEN_DEVICE (2x)
		57357: 14, // TOKEN_GET (2x)
		57371: 15, // TOKEN_LS (2x)
		57351: 16, // TOKEN_RACK (2x)
		57350: 17, // TOKEN_ROOM (2x)
		57348: 18, // TOKEN_SITE (2x)
		57353: 19, // TOKEN_SUBDEVICE (2x)
		57354: 20, // TOKEN_SUBDEVICE1 (2x)
		57347: 21, // TOKEN_TENANT (2x)
		57358: 22, // TOKEN_UPDATE (2x)
		57373: 23, // BASH (1x)
		57376: 24, // NT_CREATE (1x)
		57377: 25, // NT_DEL (1x)
		57378: 26, // NT_GET (1x)
		57379: 27, // NT_UPDATE (1x)
		57382: 28, // Q (1x)
		57383: 29, // start (1x)
		57369: 30, // TOKEN_CLR (1x)
		57366: 31, // TOKEN_DOC (1x)
		57362: 32, // TOKEN_EQUAL (1x)
		57365: 33, // TOKEN_EXIT (1x)
		57370: 34, // TOKEN_GREP (1x)
		57368: 35, // TOKEN_PWD (1x)
		57372: 36, // $default (0x)
		57345: 37, // error (0x)
		57361: 38, // TOKEN_BASHTYPE (0x)
		57360: 39, // TOKEN_SEARCH (0x)
	}

	yySymNames = []string{
		"$end",
		"TOKEN_ATTR",
		"TOKEN_WORD",
		"TOKEN_SLASH",
		"P1",
		"F",
		"P",
		"E",
		"TOKEN_BLDG",
		"TOKEN_CD",
		"TOKEN_CMDFLAG",
		"TOKEN_CREATE",
		"TOKEN_DELETE",
		"TOKEN_DEVICE",
		"TOKEN_GET",
		"TOKEN_LS",
		"TOKEN_RACK",
		"TOKEN_ROOM",
		"TOKEN_SITE",
		"TOKEN_SUBDEVICE",
		"TOKEN_SUBDEVICE1",
		"TOKEN_TENANT",
		"TOKEN_UPDATE",
		"BASH",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"Q",
		"start",
		"TOKEN_CLR",
		"TOKEN_DOC",
		"TOKEN_EQUAL",
		"TOKEN_EXIT",
		"TOKEN_GREP",
		"TOKEN_PWD",
		"$default",
		"error",
		"TOKEN_BASHTYPE",
		"TOKEN_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {29, 1},
		2:  {29, 1},
		3:  {29, 1},
		4:  {29, 1},
		5:  {29, 1},
		6:  {24, 3},
		7:  {24, 4},
		8:  {26, 1},
		9:  {26, 2},
		10: {26, 3},
		11: {27, 2},
		12: {27, 3},
		13: {25, 2},
		14: {7, 1},
		15: {7, 1},
		16: {7, 1},
		17: {7, 1},
		18: {7, 1},
		19: {7, 1},
		20: {7, 1},
		21: {7, 1},
		22: {5, 4},
		23: {5, 3},
		24: {6, 1},
		25: {6, 2},
		26: {4, 3},
		27: {4, 1},
		28: {4, 0},
		29: {28, 3},
		30: {28, 2},
		31: {28, 2},
		32: {28, 2},
		33: {28, 3},
		34: {28, 1},
		35: {23, 1},
		36: {23, 1},
		37: {23, 1},
		38: {23, 1},
		39: {23, 1},
		40: {23, 2},
		41: {23, 2},
		42: {23, 2},
		43: {23, 2},
		44: {23, 2},
		45: {23, 2},
		46: {23, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [61][]uint8{
		// 0
		{9: 58, 11: 54, 57, 14: 55, 59, 22: 56, 60, 49, 52, 50, 51, 53, 48, 61, 65, 33: 64, 62, 63},
		{47},
		{46},
		{45},
		{44},
		// 5
		{43},
		{42},
		{7: 104, 97, 13: 100, 16: 99, 98, 96, 101, 102, 95},
		{39, 2: 79, 74, 73, 6: 93, 94, 97, 13: 100, 16: 99, 98, 96, 101, 102, 95},
		{1: 88, 79, 74, 73, 86, 87},
		// 10
		{19, 2: 79, 74, 73, 6: 85},
		{19, 2: 82, 74, 73, 6: 83},
		{19, 2: 75, 74, 73, 6: 76},
		{13},
		{12},
		// 15
		{11},
		{10},
		{9},
		{8, 2: 72, 9: 67, 11: 68, 71, 14: 69, 66, 22: 70},
		{7},
		// 20
		{6},
		{5},
		{4},
		{3},
		{2},
		// 25
		{1},
		{23, 23},
		{19, 19, 79, 4: 81},
		{20, 3: 77, 10: 78},
		{15},
		// 30
		{19, 19, 79, 4: 80},
		{14},
		{20, 20, 3: 77},
		{21, 21},
		{22, 22},
		// 35
		{20, 3: 77, 10: 84},
		{16},
		{18},
		{34},
		{36},
		// 40
		{1: 88, 5: 92},
		{32: 89},
		{2: 90},
		{24, 88, 5: 91},
		{25},
		// 45
		{35},
		{38},
		{1: 88, 5: 103},
		{1: 33, 33, 33},
		{1: 32, 32, 32},
		// 50
		{1: 31, 31, 31},
		{1: 30, 30, 30},
		{1: 29, 29, 29},
		{1: 28, 28, 28},
		{1: 27, 27, 27},
		// 55
		{1: 26, 26, 26},
		{37},
		{1: 88, 79, 74, 73, 105, 106},
		{41},
		{1: 88, 5: 107},
		// 60
		{40},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 37

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			println("@State start")
		}
	case 6:
		{
			cmd.PostObj(yyS[yypt-1].s, "", resMap(&yyS[yypt-0].s)) /*println("@State NT_CR");*/
		}
	case 7:
		{
			yyVAL.s = yyS[yypt-0].s /*println("Finally: "+$$);*/
			cmd.Disp(resMap(&yyS[yypt-0].s))
			cmd.PostObj(yyS[yypt-2].s, yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 8:
		{
			println("@State NT_GET")
			cmd.GetObject("")
		}
	case 9:
		{
			cmd.GetObject(yyS[yypt-0].s)
		}
	case 10:
		{ /*cmd.Disp(resMap(&$4)); */
			cmd.SearchObjects(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 11:
		{
			println("@State NT_UPD")
			cmd.UpdateObj("", resMap(&yyS[yypt-0].s))
		}
	case 12:
		{
			yyVAL.s = yyS[yypt-0].s /*cmd.Disp(resMap(&$4));*/
			cmd.UpdateObj(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 13:
		{
			println("@State NT_DEL")
			cmd.DeleteObj(yyS[yypt-0].s)
		}
	case 22:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 23:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 25:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 26:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 27:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 28:
		{
			yyVAL.s = ""
		}
	case 30:
		{
			cmd.CD(yyS[yypt-0].s)
		}
	case 31:
		{
			cmd.CD(yyS[yypt-0].s)
		}
	case 32:
		{
			cmd.LS(yyS[yypt-0].s)
		}
	case 34:
		{
			cmd.Execute()
		}
	case 37:
		{
			cmd.PWD()
		}
	case 38:
		{
			cmd.Exit()
		}
	case 39:
		{
			cmd.Help("")
		}
	case 40:
		{
			cmd.Help("ls")
		}
	case 41:
		{
			cmd.Help("cd")
		}
	case 42:
		{
			cmd.Help("create")
		}
	case 43:
		{
			cmd.Help("gt")
		}
	case 44:
		{
			cmd.Help("update")
		}
	case 45:
		{
			cmd.Help("delete")
		}
	case 46:
		{
			cmd.Help(yyS[yypt-0].s)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
