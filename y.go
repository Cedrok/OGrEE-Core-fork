// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

type yySymType struct {
	yys  int
	n    int
	s    string
	sarr []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault        = 57405
	yyEofCode        = 57344
	TOKEN_ATTR       = 57356
	TOKEN_ATTRSPEC   = 57389
	TOKEN_BASHTYPE   = 57364
	TOKEN_BLDG       = 57350
	TOKEN_CD         = 57370
	TOKEN_CLR        = 57372
	TOKEN_CMDFLAG    = 57366
	TOKEN_CMDS       = 57400
	TOKEN_COMMA      = 57398
	TOKEN_CREATE     = 57359
	TOKEN_DELETE     = 57362
	TOKEN_DEREF      = 57403
	TOKEN_DEVICE     = 57353
	TOKEN_DOC        = 57369
	TOKEN_DOT        = 57399
	TOKEN_EQUAL      = 57365
	TOKEN_EXIT       = 57368
	TOKEN_GET        = 57360
	TOKEN_GREP       = 57373
	TOKEN_LBRAC      = 57396
	TOKEN_LS         = 57374
	TOKEN_LSBLDG     = 57379
	TOKEN_LSDEV      = 57382
	TOKEN_LSOG       = 57376
	TOKEN_LSRACK     = 57381
	TOKEN_LSROOM     = 57380
	TOKEN_LSSITE     = 57378
	TOKEN_LSSUBDEV   = 57383
	TOKEN_LSSUBDEV1  = 57384
	TOKEN_LSTEN      = 57377
	TOKEN_NUM        = 57346
	TOKEN_OCBLDG     = 57385
	TOKEN_OCDEL      = 57358
	TOKEN_OCDEV      = 57386
	TOKEN_OCPSPEC    = 57394
	TOKEN_OCRACK     = 57387
	TOKEN_OCROOM     = 57388
	TOKEN_OCSDEV     = 57392
	TOKEN_OCSDEV1    = 57393
	TOKEN_OCSITE     = 57390
	TOKEN_OCTENANT   = 57391
	TOKEN_PLUS       = 57357
	TOKEN_PWD        = 57371
	TOKEN_RACK       = 57352
	TOKEN_RBRAC      = 57397
	TOKEN_ROOM       = 57351
	TOKEN_SEARCH     = 57363
	TOKEN_SELECT     = 57395
	TOKEN_SITE       = 57349
	TOKEN_SLASH      = 57367
	TOKEN_STMNT      = 57404
	TOKEN_SUBDEVICE  = 57354
	TOKEN_SUBDEVICE1 = 57355
	TOKEN_TEMPLATE   = 57401
	TOKEN_TENANT     = 57348
	TOKEN_TREE       = 57375
	TOKEN_UPDATE     = 57361
	TOKEN_VAR        = 57402
	TOKEN_WORD       = 57347
	yyErrCode        = 57345

	yyMaxDepth = 200
	yyTabOfs   = -103
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57347: 0,  // TOKEN_WORD (161x)
		57399: 1,  // TOKEN_DOT (131x)
		57358: 2,  // TOKEN_OCDEL (130x)
		57357: 3,  // TOKEN_PLUS (130x)
		57367: 4,  // TOKEN_SLASH (128x)
		57365: 5,  // TOKEN_EQUAL (110x)
		57344: 6,  // $end (107x)
		57404: 7,  // TOKEN_STMNT (107x)
		57370: 8,  // TOKEN_CD (106x)
		57372: 9,  // TOKEN_CLR (106x)
		57359: 10, // TOKEN_CREATE (106x)
		57362: 11, // TOKEN_DELETE (106x)
		57403: 12, // TOKEN_DEREF (106x)
		57369: 13, // TOKEN_DOC (106x)
		57368: 14, // TOKEN_EXIT (106x)
		57360: 15, // TOKEN_GET (106x)
		57373: 16, // TOKEN_GREP (106x)
		57374: 17, // TOKEN_LS (106x)
		57379: 18, // TOKEN_LSBLDG (106x)
		57382: 19, // TOKEN_LSDEV (106x)
		57376: 20, // TOKEN_LSOG (106x)
		57381: 21, // TOKEN_LSRACK (106x)
		57380: 22, // TOKEN_LSROOM (106x)
		57378: 23, // TOKEN_LSSITE (106x)
		57383: 24, // TOKEN_LSSUBDEV (106x)
		57384: 25, // TOKEN_LSSUBDEV1 (106x)
		57377: 26, // TOKEN_LSTEN (106x)
		57371: 27, // TOKEN_PWD (106x)
		57395: 28, // TOKEN_SELECT (106x)
		57375: 29, // TOKEN_TREE (106x)
		57361: 30, // TOKEN_UPDATE (106x)
		57389: 31, // TOKEN_ATTRSPEC (44x)
		57425: 32, // P1 (36x)
		57346: 33, // TOKEN_NUM (34x)
		57424: 34, // P (33x)
		57356: 35, // TOKEN_ATTR (28x)
		57423: 36, // ORIENTN (24x)
		57427: 37, // WORDORNUM (23x)
		57394: 38, // TOKEN_OCPSPEC (15x)
		57408: 39, // F (5x)
		57397: 40, // TOKEN_RBRAC (4x)
		57350: 41, // TOKEN_BLDG (3x)
		57353: 42, // TOKEN_DEVICE (3x)
		57352: 43, // TOKEN_RACK (3x)
		57351: 44, // TOKEN_ROOM (3x)
		57349: 45, // TOKEN_SITE (3x)
		57348: 46, // TOKEN_TENANT (3x)
		57406: 47, // BASH (2x)
		57407: 48, // E (2x)
		57409: 49, // GETOBJS (2x)
		57410: 50, // K (2x)
		57411: 51, // NT_CREATE (2x)
		57412: 52, // NT_DEL (2x)
		57413: 53, // NT_GET (2x)
		57414: 54, // NT_UPDATE (2x)
		57415: 55, // OCCHOOSE (2x)
		57417: 56, // OCDEL (2x)
		57418: 57, // OCDOT (2x)
		57419: 58, // OCGET (2x)
		57420: 59, // OCLISYNTX (2x)
		57421: 60, // OCSEL (2x)
		57422: 61, // OCUPDATE (2x)
		57426: 62, // Q (2x)
		57429: 63, // stmnt (2x)
		57396: 64, // TOKEN_LBRAC (2x)
		57354: 65, // TOKEN_SUBDEVICE (2x)
		57355: 66, // TOKEN_SUBDEVICE1 (2x)
		57416: 67, // OCCR (1x)
		57428: 68, // start (1x)
		57430: 69, // stmnts (1x)
		57400: 70, // TOKEN_CMDS (1x)
		57398: 71, // TOKEN_COMMA (1x)
		57385: 72, // TOKEN_OCBLDG (1x)
		57386: 73, // TOKEN_OCDEV (1x)
		57387: 74, // TOKEN_OCRACK (1x)
		57388: 75, // TOKEN_OCROOM (1x)
		57390: 76, // TOKEN_OCSITE (1x)
		57391: 77, // TOKEN_OCTENANT (1x)
		57401: 78, // TOKEN_TEMPLATE (1x)
		57402: 79, // TOKEN_VAR (1x)
		57405: 80, // $default (0x)
		57345: 81, // error (0x)
		57364: 82, // TOKEN_BASHTYPE (0x)
		57366: 83, // TOKEN_CMDFLAG (0x)
		57392: 84, // TOKEN_OCSDEV (0x)
		57393: 85, // TOKEN_OCSDEV1 (0x)
		57363: 86, // TOKEN_SEARCH (0x)
	}

	yySymNames = []string{
		"TOKEN_WORD",
		"TOKEN_DOT",
		"TOKEN_OCDEL",
		"TOKEN_PLUS",
		"TOKEN_SLASH",
		"TOKEN_EQUAL",
		"$end",
		"TOKEN_STMNT",
		"TOKEN_CD",
		"TOKEN_CLR",
		"TOKEN_CREATE",
		"TOKEN_DELETE",
		"TOKEN_DEREF",
		"TOKEN_DOC",
		"TOKEN_EXIT",
		"TOKEN_GET",
		"TOKEN_GREP",
		"TOKEN_LS",
		"TOKEN_LSBLDG",
		"TOKEN_LSDEV",
		"TOKEN_LSOG",
		"TOKEN_LSRACK",
		"TOKEN_LSROOM",
		"TOKEN_LSSITE",
		"TOKEN_LSSUBDEV",
		"TOKEN_LSSUBDEV1",
		"TOKEN_LSTEN",
		"TOKEN_PWD",
		"TOKEN_SELECT",
		"TOKEN_TREE",
		"TOKEN_UPDATE",
		"TOKEN_ATTRSPEC",
		"P1",
		"TOKEN_NUM",
		"P",
		"TOKEN_ATTR",
		"ORIENTN",
		"WORDORNUM",
		"TOKEN_OCPSPEC",
		"F",
		"TOKEN_RBRAC",
		"TOKEN_BLDG",
		"TOKEN_DEVICE",
		"TOKEN_RACK",
		"TOKEN_ROOM",
		"TOKEN_SITE",
		"TOKEN_TENANT",
		"BASH",
		"E",
		"GETOBJS",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCDOT",
		"OCGET",
		"OCLISYNTX",
		"OCSEL",
		"OCUPDATE",
		"Q",
		"stmnt",
		"TOKEN_LBRAC",
		"TOKEN_SUBDEVICE",
		"TOKEN_SUBDEVICE1",
		"OCCR",
		"start",
		"stmnts",
		"TOKEN_CMDS",
		"TOKEN_COMMA",
		"TOKEN_OCBLDG",
		"TOKEN_OCDEV",
		"TOKEN_OCRACK",
		"TOKEN_OCROOM",
		"TOKEN_OCSITE",
		"TOKEN_OCTENANT",
		"TOKEN_TEMPLATE",
		"TOKEN_VAR",
		"$default",
		"error",
		"TOKEN_BASHTYPE",
		"TOKEN_CMDFLAG",
		"TOKEN_OCSDEV",
		"TOKEN_OCSDEV1",
		"TOKEN_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {68, 1},
		2:   {69, 3},
		3:   {69, 1},
		4:   {69, 0},
		5:   {63, 1},
		6:   {63, 1},
		7:   {63, 1},
		8:   {63, 0},
		9:   {50, 1},
		10:  {50, 1},
		11:  {50, 1},
		12:  {50, 1},
		13:  {51, 3},
		14:  {51, 4},
		15:  {53, 2},
		16:  {53, 3},
		17:  {54, 3},
		18:  {52, 2},
		19:  {48, 1},
		20:  {48, 1},
		21:  {48, 1},
		22:  {48, 1},
		23:  {48, 1},
		24:  {48, 1},
		25:  {48, 1},
		26:  {48, 1},
		27:  {36, 1},
		28:  {36, 1},
		29:  {36, 0},
		30:  {37, 1},
		31:  {37, 1},
		32:  {37, 4},
		33:  {39, 4},
		34:  {39, 3},
		35:  {34, 1},
		36:  {34, 2},
		37:  {32, 3},
		38:  {32, 1},
		39:  {32, 4},
		40:  {32, 1},
		41:  {32, 2},
		42:  {32, 0},
		43:  {62, 2},
		44:  {62, 2},
		45:  {62, 2},
		46:  {62, 2},
		47:  {62, 2},
		48:  {62, 2},
		49:  {62, 2},
		50:  {62, 2},
		51:  {62, 2},
		52:  {62, 2},
		53:  {62, 2},
		54:  {62, 2},
		55:  {62, 3},
		56:  {62, 1},
		57:  {47, 1},
		58:  {47, 1},
		59:  {47, 1},
		60:  {47, 1},
		61:  {47, 1},
		62:  {47, 1},
		63:  {47, 2},
		64:  {47, 2},
		65:  {47, 2},
		66:  {47, 2},
		67:  {47, 2},
		68:  {47, 2},
		69:  {47, 2},
		70:  {47, 2},
		71:  {47, 2},
		72:  {59, 2},
		73:  {59, 1},
		74:  {59, 1},
		75:  {59, 1},
		76:  {59, 1},
		77:  {59, 1},
		78:  {59, 1},
		79:  {67, 5},
		80:  {67, 5},
		81:  {67, 5},
		82:  {67, 5},
		83:  {67, 7},
		84:  {67, 7},
		85:  {67, 7},
		86:  {67, 7},
		87:  {67, 7},
		88:  {67, 7},
		89:  {67, 7},
		90:  {67, 7},
		91:  {56, 2},
		92:  {61, 5},
		93:  {58, 2},
		94:  {49, 3},
		95:  {49, 1},
		96:  {55, 4},
		97:  {57, 6},
		98:  {57, 4},
		99:  {57, 4},
		100: {57, 4},
		101: {60, 1},
		102: {60, 5},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [217][]uint16{
		// 0
		{120, 121, 147, 140, 119, 149, 99, 99, 122, 134, 114, 117, 150, 139, 138, 115, 135, 123, 126, 129, 136, 128, 127, 125, 130, 131, 124, 137, 151, 132, 116, 32: 118, 34: 148, 47: 133, 50: 107, 110, 113, 111, 112, 144, 141, 145, 143, 109, 146, 142, 108, 106, 68: 104, 105},
		{6: 103},
		{120, 121, 147, 140, 119, 149, 102, 95, 122, 134, 114, 117, 150, 139, 138, 115, 135, 123, 126, 129, 136, 128, 127, 125, 130, 131, 124, 137, 151, 132, 116, 32: 118, 34: 148, 47: 133, 50: 107, 110, 113, 111, 112, 144, 141, 145, 143, 109, 146, 142, 108, 318},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		// 5
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		// 10
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{41: 307, 310, 309, 308, 306, 305, 48: 314, 65: 311, 312},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 303, 41: 307, 310, 309, 308, 306, 305, 48: 304, 65: 311, 312},
		{120, 159, 4: 119, 32: 118, 34: 297, 61},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 296},
		// 15
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 33: 68, 35: 68},
		{120, 159, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 295, 61, 35: 61},
		{65, 65, 65, 65, 293, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 33: 65, 35: 65},
		{1: 167, 70: 283, 78: 284, 282},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 281},
		// 20
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 280},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 279},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 278},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 277},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 276},
		// 25
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 275},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 274},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 273},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 272},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 269, 270},
		// 30
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		// 35
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{266, 41, 41, 41, 41, 41, 41, 41, 261, 41, 262, 265, 41, 41, 41, 263, 41, 260, 41, 41, 268, 41, 41, 41, 41, 41, 41, 41, 41, 267, 264},
		{41: 189, 195, 193, 191, 187, 185, 67: 183, 72: 188, 194, 192, 190, 186, 184},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		// 40
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 182},
		// 45
		{1: 170},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 160, 64: 161},
		{64: 156},
		{2, 152, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{35: 153},
		// 50
		{5: 154},
		{155},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{157},
		{40: 158},
		// 55
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{1: 167},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{162, 49: 163},
		{40: 8, 71: 165},
		// 60
		{40: 164},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{162, 49: 166},
		{40: 9},
		{62, 62, 62, 62, 168, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 33: 62, 35: 62},
		// 65
		{120, 159, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 169, 61, 35: 61},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 33: 64, 35: 64},
		{35: 171},
		{5: 172},
		{175, 2: 174, 173, 33: 176, 36: 177, 178},
		// 70
		{76},
		{75},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 35: 73},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 35: 72},
		{179},
		// 75
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{74, 2: 174, 173, 36: 180},
		{181},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 35: 71},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		// 80
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{38: 256},
		{38: 252},
		{38: 248},
		{38: 244},
		// 85
		{38: 238},
		{38: 232},
		{38: 226},
		{38: 220},
		{38: 214},
		// 90
		{38: 208},
		{38: 202},
		{38: 196},
		{120, 159, 4: 119, 31: 61, 118, 34: 197},
		{31: 198},
		// 95
		{175, 2: 174, 173, 33: 176, 36: 177, 199},
		{31: 200},
		{175, 2: 174, 173, 33: 176, 36: 177, 201},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{120, 159, 4: 119, 31: 61, 118, 34: 203},
		// 100
		{31: 204},
		{175, 2: 174, 173, 33: 176, 36: 177, 205},
		{31: 206},
		{175, 2: 174, 173, 33: 176, 36: 177, 207},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		// 105
		{120, 159, 4: 119, 31: 61, 118, 34: 209},
		{31: 210},
		{175, 2: 174, 173, 33: 176, 36: 177, 211},
		{31: 212},
		{175, 2: 174, 173, 33: 176, 36: 177, 213},
		// 110
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{120, 159, 4: 119, 31: 61, 118, 34: 215},
		{31: 216},
		{175, 2: 174, 173, 33: 176, 36: 177, 217},
		{31: 218},
		// 115
		{175, 2: 174, 173, 33: 176, 36: 177, 219},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{120, 159, 4: 119, 31: 61, 118, 34: 221},
		{31: 222},
		{175, 2: 174, 173, 33: 176, 36: 177, 223},
		// 120
		{31: 224},
		{175, 2: 174, 173, 33: 176, 36: 177, 225},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{120, 159, 4: 119, 31: 61, 118, 34: 227},
		{31: 228},
		// 125
		{175, 2: 174, 173, 33: 176, 36: 177, 229},
		{31: 230},
		{175, 2: 174, 173, 33: 176, 36: 177, 231},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{120, 159, 4: 119, 31: 61, 118, 34: 233},
		// 130
		{31: 234},
		{175, 2: 174, 173, 33: 176, 36: 177, 235},
		{31: 236},
		{175, 2: 174, 173, 33: 176, 36: 177, 237},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		// 135
		{120, 159, 4: 119, 31: 61, 118, 34: 239},
		{31: 240},
		{175, 2: 174, 173, 33: 176, 36: 177, 241},
		{31: 242},
		{175, 2: 174, 173, 33: 176, 36: 177, 243},
		// 140
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{120, 159, 4: 119, 31: 61, 118, 34: 245},
		{31: 246},
		{175, 2: 174, 173, 33: 176, 36: 177, 247},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		// 145
		{120, 159, 4: 119, 31: 61, 118, 34: 249},
		{31: 250},
		{175, 2: 174, 173, 33: 176, 36: 177, 251},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{120, 159, 4: 119, 31: 61, 118, 34: 253},
		// 150
		{31: 254},
		{175, 2: 174, 173, 33: 176, 36: 177, 255},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{120, 159, 4: 119, 31: 61, 118, 34: 257},
		{31: 258},
		// 155
		{175, 2: 174, 173, 33: 176, 36: 177, 259},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		// 160
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		// 165
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 33: 271},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		// 170
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 175
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{38: 289},
		// 180
		{38: 287},
		{38: 285},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 286},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{120, 159, 61, 61, 119, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32: 118, 34: 288},
		// 185
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{290},
		{5: 291},
		{175, 2: 174, 173, 33: 176, 36: 177, 292},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 190
		{120, 159, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 294, 61, 35: 61},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 33: 66, 35: 66},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 33: 67, 35: 67},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{35: 299, 39: 298},
		// 195
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{5: 300},
		{175, 2: 174, 173, 33: 176, 36: 177, 301},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 35: 299, 39: 302},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		// 200
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{35: 299, 39: 313},
		{84, 84, 4: 84, 35: 84},
		{83, 83, 4: 83, 35: 83},
		{82, 82, 4: 82, 35: 82},
		// 205
		{81, 81, 4: 81, 35: 81},
		{80, 80, 4: 80, 35: 80},
		{79, 79, 4: 79, 35: 79},
		{78, 78, 4: 78, 35: 78},
		{77, 77, 4: 77, 35: 77},
		// 210
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{120, 159, 4: 119, 32: 118, 34: 316, 299, 39: 315},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{35: 299, 39: 317},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		// 215
		{7: 319},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 81

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 9:
		{
			println("@State start")
		}
	case 13:
		{
			cmd.PostObj(cmd.EntityStrToInt(yyS[yypt-1].s), yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 14:
		{
			yyVAL.s = yyS[yypt-0].s
			cmd.Disp(resMap(&yyS[yypt-0].s))
			cmd.PostObj(cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s))
		}
	case 15:
		{
			cmd.GetObject(yyS[yypt-0].s)
		}
	case 16:
		{ /*cmd.Disp(resMap(&$4)); */
			cmd.SearchObjects(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 17:
		{
			yyVAL.s = yyS[yypt-0].s /*cmd.Disp(resMap(&$4));*/
			cmd.UpdateObj(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 18:
		{
			println("@State NT_DEL")
			cmd.DeleteObj(yyS[yypt-0].s)
		}
	case 27:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 28:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 29:
		{
			yyVAL.s = ""
		}
	case 30:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 31:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
		}
	case 32:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
		}
	case 33:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 34:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 36:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 37:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 38:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 39:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 40:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 41:
		{
			yyVAL.s = ".."
		}
	case 42:
		{
			yyVAL.s = ""
		}
	case 43:
		{
			cmd.CD(yyS[yypt-0].s)
		}
	case 44:
		{
			cmd.LS(yyS[yypt-0].s)
		}
	case 45:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 0)
		}
	case 46:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 1)
		}
	case 47:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 2)
		}
	case 48:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 3)
		}
	case 49:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 4)
		}
	case 50:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 5)
		}
	case 51:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 6)
		}
	case 52:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 7)
		}
	case 53:
		{
			cmd.Tree("", yyS[yypt-0].n)
		}
	case 54:
		{
			cmd.Tree(yyS[yypt-0].s, 0)
		}
	case 55:
		{
			cmd.Tree(yyS[yypt-1].s, yyS[yypt-0].n)
		}
	case 56:
		{
			cmd.Execute()
		}
	case 59:
		{
			cmd.LSOG()
		}
	case 60:
		{
			cmd.PWD()
		}
	case 61:
		{
			cmd.Exit()
		}
	case 62:
		{
			cmd.Help("")
		}
	case 63:
		{
			cmd.Help("ls")
		}
	case 64:
		{
			cmd.Help("cd")
		}
	case 65:
		{
			cmd.Help("create")
		}
	case 66:
		{
			cmd.Help("gt")
		}
	case 67:
		{
			cmd.Help("update")
		}
	case 68:
		{
			cmd.Help("delete")
		}
	case 69:
		{
			cmd.Help(yyS[yypt-0].s)
		}
	case 70:
		{
			cmd.Help("tree")
		}
	case 71:
		{
			cmd.Help("lsog")
		}
	case 79:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr)
		}
	case 80:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr)
		}
	case 81:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr)
		}
	case 82:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr)
		}
	case 83:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 84:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 85:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 86:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 87:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 88:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr)
		}
	case 89:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr)
		}
	case 90:
		{
			cmd.GetOCLIAtrributes(cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr)
		}
	case 91:
		{
			cmd.DeleteObj(replaceOCLICurrPath(yyS[yypt-0].s))
		}
	case 92:
		{
			println("Attribute Acquired")
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			cmd.UpdateObj(replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val))
		}
	case 93:
		{
			cmd.GetObject(replaceOCLICurrPath(yyS[yypt-0].s))
		}
	case 94:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 95:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 96:
		{
			cmd.State.ClipBoard = &yyS[yypt-1].sarr
			println("Selection made!")
		}
	case 97:
		{
			println("You want to assign", yyS[yypt-2].s, "with value of", yyS[yypt-0].s)
		}
	case 98:
		{
			cmd.LoadFile(yyS[yypt-0].s)
		}
	case 99:
		{
			cmd.LoadFile(yyS[yypt-0].s)
		}
	case 100:
		{
			println("So You want the value")
		}
	case 101:
		{
			cmd.ShowClipBoard()
		}
	case 102:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			cmd.UpdateSelection(resMap(&x))
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
