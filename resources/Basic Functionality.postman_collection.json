{
	"info": {
		"_postman_id": "ecb848e4-262f-4c9e-a04c-7564edbf9573",
		"name": "Basic Functionality (MDB)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Populate DB 1",
			"item": [
				{
					"name": "Create Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"pm.environment.set(\"TenantID\", data[\"data\"][\"id\"])",
									"console.log(\"The ID is: \", data[\"data\"][\"id\"])",
									"pm.environment.set(\"TenantJSON\", data)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"DEMO\",\n  \"id\": null,\n  \"parentId\": null,\n  \"category\": \"tenant\",\n  \"description\": [],\n  \"domain\": \"DEMO\",\n  \"attributes\": {\n    \"color\": \"FFFFFF\",\n    \"mainContact\": \"Ced\",\n    \"mainPhone\": \"0612345678\",\n    \"mainEmail\": \"ced@ogree3D.com\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/tenants",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"var OGdata = pm.environment.get(\"TenantJSON\");",
									"",
									"function isEqual(x, y) {",
									"    // if both are function",
									"    if (x instanceof Function) {",
									"        if (y instanceof Function) {",
									"            return x.toString() === y.toString();",
									"        }",
									"        return false;",
									"    }",
									"    if (x === null || x === undefined || y === null || y === undefined) { return x === y; }",
									"    if (x === y || x.valueOf() === y.valueOf()) { return true; }",
									"",
									"    // if one of them is date, they must had equal valueOf",
									"    if (x instanceof Date) { return false; }",
									"    if (y instanceof Date) { return false; }",
									"",
									"    // if they are not function or strictly equal, they both need to be Objects",
									"    if (!(x instanceof Object)) { return false; }",
									"    if (!(y instanceof Object)) { return false; }",
									"",
									"    var p = Object.keys(x);",
									"    return Object.keys(y).every(function (i) { return p.indexOf(i) !== -1; }) ?",
									"            p.every(function (i) { return isEqual(x[i], y[i]); }) : false;",
									"}",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    const obj1Keys = Object.keys(obj1);",
									"    const obj2Keys = Object.keys(obj2);",
									"",
									"    if(obj1Keys.length !== obj2Keys.length) {",
									"        return false;",
									"    }",
									"",
									"    for (let objKey of obj1Keys) {",
									"        if (obj1[objKey] !== obj2[objKey]) {",
									"            if(typeof obj1[objKey] == \"object\" && typeof obj2[objKey] == \"object\") {",
									"                if(!isEqual(obj1[objKey], obj2[objKey])) {",
									"                    return false;",
									"                }",
									"            } ",
									"            else {",
									"                return false;",
									"            }",
									"        }",
									"    }",
									"",
									"    return true;",
									"}",
									"",
									"",
									"",
									"/*var locjson = {",
									"    \"data\": {",
									"            \"attributes\": {",
									"            \"color\": \"FFFFFF\",",
									"            \"mainContact\": \"Ced\",",
									"            \"mainEmail\": \"ced@ogree3D.com\",",
									"            \"mainPhone\": \"0612345678\"",
									"        },",
									"        \"category\": \"tenant\",",
									"        \"description\": [],",
									"        \"domain\": \"DEMO\",",
									"        \"_id\": pm.environment.get(\"TenantID\"),",
									"        \"name\": \"DEMO\",",
									"        \"parentId\": null",
									"    },",
									"    \"message\": \"success\",",
									"    \"status\": true",
									"};*/",
									"",
									"/*function isEqualsJson(obj1, obj2) {",
									"    return JSON.stringify(obj1) == JSON.stringify(obj2)",
									"}*/",
									"",
									"",
									"tests[\"Successful Create & Get Request\"] = isEqualsJson(data, OGdata) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/tenants/{{TenantID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"tenants",
								"{{TenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"pm.environment.set(\"SiteID\", data[\"data\"][\"id\"])",
									"pm.environment.set(\"SiteJSONStr\", JSON.stringify(data));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ALPHA\",\n    \"id\": null,\n    \"parentId\": \"{{TenantID}}\",\n    \"category\": \"site\",\n    \"description\": [\n        \"This is a demo...\"\n    ],\n    \"domain\": \"DEMO\",\n    \"attributes\": {\n        \"orientation\": \"NW\",\n        \"usableColor\": \"5BDCFF\",\n        \"reservedColor\": \"AAAAAA\",\n        \"technicalColor\": \"D0FF78\",\n        \"address\": \"1 rue bidule\",\n        \"zipcode\": \"42000\",\n        \"city\": \"Truc\",\n        \"country\": \"FRANCE\",\n        \"gps\": \"[1,2,0]\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/sites",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"sites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Site",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var jsonData =  pm.response.json();",
									"",
									"var locjson = {",
									"    \"data\": {",
									"        \"id\": \"649654546428854273\",",
									"        \"name\": \"ALPHA\",",
									"        \"category\": \"site\",",
									"        \"domain\": \"DEMO\",",
									"        \"parentId\": \"649654546050613249\",",
									"        \"description\": [",
									"            \"This is a demo...\"",
									"        ],",
									"        \"attributes\": {",
									"            \"orientation\": \"NW\",",
									"            \"usableColor\": \"5BDCFF\",",
									"            \"reservedColor\": \"AAAAAA\",",
									"            \"technicalColor\": \"D0FF78\",",
									"            \"address\": \"1 rue bidule\",",
									"            \"zipcode\": \"42000\",",
									"            \"city\": \"Truc\",",
									"            \"country\": \"FRANCE\",",
									"            \"gps\": \"[1,2,0]\"",
									"        }",
									"    },",
									"    \"message\": \"success\",",
									"    \"status\": true",
									"};",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    return JSON.stringify(obj1) == JSON.stringify(obj2)",
									"}",
									"",
									"",
									"tests[\"Successful Create & Get Request\"] = locjson,jsonData == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/sites/{{SiteID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"sites",
								"{{SiteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Building",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"pm.environment.set(\"BuildingID\", data[\"data\"][\"id\"])",
									"pm.environment.set(\"BldgJSONStr\", JSON.stringify(data[\"building\"]))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"B\",\n    \"id\": null,\n    \"parentId\": \"{{SiteID}}\",\n    \"category\": \"building\",\n    \"description\": [\n        \"Building B\"\n    ],\n    \"domain\": \"DEMO\",\n    \"attributes\": {\n        \"posXY\": \"{\\\"x\\\":-30.0,\\\"y\\\":0.0}\",\n        \"posXYUnit\": \"m\",\n        \"posZ\": \"10\",\n        \"posZUnit\": \"m\",\n        \"size\": \"{\\\"x\\\":25.0,\\\"y\\\":29.399999618530275}\",\n        \"sizeUnit\": \"m\",\n        \"height\": \"0\",\n        \"heightUnit\": \"m\",\n        \"nbFloors\": \"1\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/buildings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"buildings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Building",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"",
									"locjson = pm.environment.get(\"BldgJSONStr\")",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    return obj1 == obj2",
									"}",
									"",
									"console.log(\"The loc is: \", JSON.stringify(locjson))",
									"console.log(\"The received response is: \", JSON.stringify(data))",
									"tests[\"Successful Create & Get Request\"] = isEqualsJson(JSON.stringify(data[\"data\"]), locjson) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/buildings/{{BuildingID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"buildings",
								"{{BuildingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"pm.environment.set(\"RoomID\", data[\"data\"][\"id\"])",
									"pm.environment.set(\"RoomJSONStr\", JSON.stringify(data[\"room\"]))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"R1\",\n    \"id\": null,\n    \"parentId\": \"{{BuildingID}}\",\n    \"category\": \"room\",\n    \"description\": [\n        \"First room\"\n    ],\n    \"domain\": \"DEMO\",\n    \"attributes\": {\n        \"posXY\": \"{\\\"x\\\":0.0,\\\"y\\\":0.0}\",\n        \"posXYUnit\": \"m\",\n        \"posZ\": \"0\",\n        \"posZUnit\": \"m\",\n        \"template\": \"demo.R1\",\n        \"orientation\": \"+N+W\",\n        \"size\": \"{\\\"x\\\":22.799999237060548,\\\"y\\\":19.799999237060548}\",\n        \"sizeUnit\": \"m\",\n        \"height\": \"3\",\n        \"heightUnit\": \"m\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/rooms",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rooms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Room",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"",
									"locjson = pm.environment.get(\"RoomJSONStr\")",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    return obj1 == obj2",
									"}",
									"",
									"console.log(\"The loc is: \", JSON.stringify(locjson))",
									"console.log(\"The received response is: \", JSON.stringify(data))",
									"tests[\"Successful Create & Get Request\"] = isEqualsJson(JSON.stringify(data[\"data\"]), locjson) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/rooms/{{RoomID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rooms",
								"{{RoomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create AC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody)",
									"//console.log(\"Here is what we got: \", data[\"tenant\"][\"id\"])",
									"",
									"var ID = data[\"data\"][\"id\"]",
									"pm.environment.set(\"ACID\", ID)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"TCL 2021\",\n    \"id\": null,\n    \"parentId\": \"{{RoomID}}\",\n    \"category\": \"ac\",\n    \"description\": [\n        \"TCL\"\n    ],\n    \"domain\": \"AC DOMAIN\",\n    \"attributes\": {\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/acs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"acs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create AC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"",
									"locjson = pm.environment.get(\"RoomJSONStr\")",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    return obj1 == obj2",
									"}",
									"",
									"console.log(\"The loc is: \", JSON.stringify(locjson))",
									"console.log(\"The received response is: \", JSON.stringify(data))",
									"tests[\"Successful Create & Get Request\"] = isEqualsJson(JSON.stringify(data[\"data\"]), locjson) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/rooms/{{RoomID}}/acs/{{ACID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rooms",
								"{{RoomID}}",
								"acs",
								"{{ACID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Wall",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody)",
									"//console.log(\"Here is what we got: \", data[\"tenant\"][\"id\"])",
									"",
									"var ID = data[\"data\"][\"id\"]",
									"pm.environment.set(\"WallID\", ID)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Undercover\",\n    \"id\": null,\n    \"parentId\": \"{{RoomID}}\",\n    \"category\": \"wall\",\n    \"description\": [\n        \"2008\"\n    ],\n    \"domain\": \"Wall DOMAIN\",\n    \"attributes\": {\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/walls",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"walls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Wall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/rooms/{{RoomID}}/walls/{{WallID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rooms",
								"{{RoomID}}",
								"walls",
								"{{WallID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Panel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody)",
									"//console.log(\"Here is what we got: \", data[\"tenant\"][\"id\"])",
									"",
									"var ID = data[\"data\"][\"id\"]",
									"pm.environment.set(\"PanelID\", ID)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Panel A\",\n    \"id\": null,\n    \"parentId\": \"{{RoomID}}\",\n    \"category\": \"powerpanel\",\n    \"description\": [\n        \"YINGLI\"\n    ],\n    \"domain\": \"Panel DOMAIN\",\n    \"attributes\": {\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/panels",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"panels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Panel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/rooms/{{RoomID}}/panels/{{PanelID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rooms",
								"{{RoomID}}",
								"panels",
								"{{PanelID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Rack",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"pm.environment.set(\"RackID\", data[\"data\"][\"id\"])",
									"pm.environment.set(\"RackJSONStr\", JSON.stringify(data[\"rack\"]))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"A01\",\n    \"id\": null,\n    \"parentId\": \"{{RoomID}}\",\n    \"category\": \"rack\",\n    \"description\": [\n        \"Rack A01\",\n        \"The original one\",\n        \"-3/-5\\\\nA0-Z9\"\n    ],\n    \"domain\": \"DEMO\",\n    \"attributes\": {\n        \"posXY\": \"{\\\"x\\\":10.0,\\\"y\\\":0.0}\",\n        \"posXYUnit\": \"tile\",\n        \"size\": \"{\\\"x\\\":60.0,\\\"y\\\":120.0}\",\n        \"sizeUnit\": \"cm\",\n        \"posZ\": \"Some position\",\n        \"posZUnit\": \"cm\",\n        \"height\": \"42\",\n        \"heightUnit\": \"U\",\n        \"template\": \"Some template\",\n        \"orientation\": \"front\",\n        \"vendor\": \"someVendor\",\n        \"type\": \"someType\",\n        \"model\": \"someModel\",\n        \"serial\": \"someSerial\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/racks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"racks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Rack",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/racks/{{RackID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"racks",
								"{{RackID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 201;",
									"",
									"pm.environment.set(\"DeviceID\", data[\"data\"][\"id\"])",
									"pm.environment.set(\"DeviceJSONStr\", JSON.stringify(data[\"device\"]))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DeviceA\",\n    \"id\": null,\n    \"parentId\": \"{{RackID}}\",\n    \"category\": \"device\",\n    \"description\": [\n        \"Rack A01\",\n        \"The original one\",\n        \"-3/-5\\\\nA0-Z9\"\n    ],\n    \"domain\": \"Device DOMAIN\",\n    \"attributes\": {\n        \"posXY\": \"{\\\"x\\\":10.0,\\\"y\\\":0.0}\",\n        \"posXYUnit\": \"tile\",\n        \"posZ\": \"{\\\"x\\\":10.0,\\\"y\\\":0.0}\",\n        \"posZUnit\": \"tile\",\n        \"size\": \"{\\\"x\\\":60.0,\\\"y\\\":120.0}\",\n        \"sizeUnit\": \"cm\",\n        \"height\": \"42\",\n        \"heightUnit\": \"U\",\n        \"template\": \"Some template\",\n        \"orientation\": \"front\",\n        \"vendor\": \"someVendor\",\n        \"type\": \"someType\",\n        \"model\": \"someModel\",\n        \"serial\": \"someSerial\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/devices",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Create Device",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"",
									"locjson = pm.environment.get(\"DeviceJSONStr\")",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    return obj1 == obj2",
									"}",
									"",
									"console.log(\"The loc is: \", JSON.stringify(locjson))",
									"console.log(\"The received response is: \", JSON.stringify(data))",
									"tests[\"Successful Create & Get Request\"] = isEqualsJson(JSON.stringify(data[\"data\"]), locjson) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/devices/{{DeviceID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"devices",
								"{{DeviceID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update DB",
			"item": [
				{
					"name": "Update Tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 200;",
									"",
									"pm.environment.set(\"TenantUpdateStr\", JSON.stringify(JSON.parse(request.data)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"FISHER\",\n  \"id\": null,\n  \"parentId\": null,\n  \"description\": [\"Some Forsaken Joint\", \"Rotten Apple\"],\n  \"domain\": \"999999\",\n  \"attributes\": {\n    \"color\": \"99\",\n    \"mainContact\": \"99\",\n    \"mainPhone\": \"999\",\n    \"mainEmail\": \"ghetto@ogree3D.com\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/user/tenants/{{TenantID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"tenants",
								"{{TenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update Tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"var input = JSON.parse(pm.environment.get(\"TenantUpdateStr\"))",
									"",
									"input[\"id\"] = data[\"data\"][\"id\"]",
									"input[\"parentId\"] = data[\"data\"][\"parentId\"]",
									"input[\"category\"] = data[\"data\"][\"category\"]",
									"",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    for (let i in obj1) {",
									"        //console.log(obj2[i])",
									"        //console.log(obj1[i])",
									"        if (obj1[i] !== obj2[i]) {",
									"            console.log(\"Failed at: \", obj1[i])",
									"            ",
									"            for (let idx in obj1[i]) {",
									"                if (obj1[i][idx] !== obj2[i][idx]) {",
									"                    console.log(\"Bad News: \", obj1[i][idx])",
									"                    return false",
									"                }",
									"            }",
									"        }",
									"      }",
									"      return true",
									"}",
									"",
									"",
									"",
									"//console.log(\"Input: \", input)",
									"//onsole.log(\"response: \", data[\"data\"])",
									"",
									"tests[\"Successful Update & Get Request\"] = isEqualsJson(data[\"data\"], input) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/user/tenants/{{TenantID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"tenants",
								"{{TenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 200;",
									"",
									"pm.environment.set(\"SiteUpdateStr\", JSON.stringify(JSON.parse(request.data)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"SiteA\",\n    \"id\": null,\n    \"parentId\": \"{{TID}}\",\n    \"category\": \"site\",\n    \"description\": [\n        \"guess whos back\"\n    ],\n    \"domain\": \"DERELICT\",\n    \"attributes\": {\n        \"orientation\": \"NW\",\n        \"usableColor\": \"99\",\n        \"reservedColor\": \"99\",\n        \"technicalColor\": \"99\",\n        \"address\": \"99\",\n        \"zipcode\": \"99\",\n        \"city\": \"99\",\n        \"country\": \"99\",\n        \"gps\": \"99\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/user/sites/{{SiteID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"sites",
								"{{SiteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"var input = JSON.parse(pm.environment.get(\"SiteUpdateStr\"))",
									"",
									"input[\"id\"] = data[\"data\"][\"id\"]",
									"input[\"parentId\"] = data[\"data\"][\"parentId\"]",
									"input[\"category\"] = data[\"data\"][\"category\"]",
									"",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    for (let i in obj1) {",
									"        //console.log(obj2[i])",
									"        //console.log(obj1[i])",
									"        if (obj1[i] !== obj2[i]) {",
									"            console.log(\"Failed at: \", obj1[i])",
									"            ",
									"            for (let idx in obj1[i]) {",
									"                if (obj1[i][idx] !== obj2[i][idx]) {",
									"                    console.log(\"Bad News: \", obj1[i][idx])",
									"                    return false",
									"                }",
									"            }",
									"        }",
									"      }",
									"      return true",
									"}",
									"",
									"",
									"",
									"//console.log(\"Input: \", input)",
									"//onsole.log(\"response: \", data[\"data\"])",
									"",
									"tests[\"Successful Update & Get Request\"] = isEqualsJson(data[\"data\"], input) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/user/sites/{{SiteID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"sites",
								"{{SiteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Building",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 200;",
									"",
									"pm.environment.set(\"BuildingUpdateStr\", JSON.stringify(JSON.parse(request.data)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Abandoned Building\",\n    \"id\": null,\n    \"parentId\": \"{{SID}}\",\n    \"category\": \"999\",\n    \"description\": [\n        \"Wassup yo\",\n        \"Guess whos back\"\n    ],\n    \"domain\": \"999\",\n    \"attributes\": {\n        \"posXY\": \"999\",\n        \"posXYUnit\": \"m\",\n        \"posZ\": \"999\",\n        \"posZUnit\": \"m\",\n        \"size\": \"999\",\n        \"sizeUnit\": \"m\",\n        \"height\": \"0\",\n        \"heightUnit\": \"m\",\n        \"nbFloors\": \"99\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/user/buildings/{{BuildingID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"buildings",
								"{{BuildingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update Building",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"var input = JSON.parse(pm.environment.get(\"BuildingUpdateStr\"))",
									"",
									"input[\"id\"] = data[\"data\"][\"id\"]",
									"input[\"parentId\"] = data[\"data\"][\"parentId\"]",
									"input[\"category\"] = data[\"data\"][\"category\"]",
									"",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    for (let i in obj1) {",
									"        //console.log(obj2[i])",
									"        //console.log(obj1[i])",
									"        if (obj1[i] !== obj2[i]) {",
									"            console.log(\"Failed at: \", obj1[i])",
									"            ",
									"            for (let idx in obj1[i]) {",
									"                if (obj1[i][idx] !== obj2[i][idx]) {",
									"                    console.log(\"Bad News: \", obj1[i][idx])",
									"                    return false",
									"                }",
									"            }",
									"        }",
									"      }",
									"      return true",
									"}",
									"",
									"",
									"",
									"//console.log(\"Input: \", input)",
									"//onsole.log(\"response: \", data[\"data\"])",
									"",
									"tests[\"Successful Update & Get Request\"] = isEqualsJson(data[\"data\"], input) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/user/buildings/{{BuildingID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"buildings",
								"{{BuildingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 200;",
									"",
									"pm.environment.set(\"RoomUpdateStr\", JSON.stringify(JSON.parse(request.data)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Abandoned Room\",\n    \"id\": null,\n    \"parentId\": \"{{BID}}\",\n    \"category\": \"999\",\n    \"description\": [\n        \"999\"\n    ],\n    \"domain\": \"999\",\n    \"attributes\": {\n        \"posXY\": \"999\",\n        \"posXYUnit\": \"m\",\n        \"posZ\": \"999\",\n        \"posZUnit\": \"m\",\n        \"template\": \"999\",\n        \"orientation\": \"-N-W\",\n        \"size\": \"999\",\n        \"sizeUnit\": \"m\",\n        \"height\": \"999\",\n        \"heightUnit\": \"m\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/user/rooms/{{RoomID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"rooms",
								"{{RoomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"var input = JSON.parse(pm.environment.get(\"RoomUpdateStr\"))",
									"",
									"input[\"id\"] = data[\"data\"][\"id\"]",
									"input[\"parentId\"] = data[\"data\"][\"parentId\"]",
									"input[\"category\"] = data[\"data\"][\"category\"]",
									"",
									"console.log(\"The response: \", data)",
									"console.log(\"The input: \", input)",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    for (let i in obj1) {",
									"        //console.log(obj2[i])",
									"        //console.log(obj1[i])",
									"        if (obj1[i] !== obj2[i]) {",
									"            console.log(\"Failed at: \", obj1[i])",
									"            ",
									"            for (let idx in obj1[i]) {",
									"                if (obj1[i][idx] !== obj2[i][idx] && obj2[i][idx] !== undefined) {",
									"                    console.log(\"The iter: \", i, \"and the inner: \", idx)",
									"                    console.log(\"Bad News: \", obj1[i][idx])",
									"                    console.log(\"Here is what was already in there: \", i, \" and \", idx)",
									"                    console.log(\"The contents: \", obj2[i][idx])",
									"                    return false",
									"                }",
									"            }",
									"        }",
									"      }",
									"      return true",
									"}",
									"",
									"",
									"",
									"//console.log(\"Input: \", input)",
									"//onsole.log(\"response: \", data[\"data\"])",
									"",
									"tests[\"Successful Update & Get Request\"] = isEqualsJson(data[\"data\"], input) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/user/rooms/{{RoomID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"rooms",
								"{{RoomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Rack",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 200;",
									"",
									"pm.environment.set(\"RackUpdateStr\", JSON.stringify(JSON.parse(request.data)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Abandoned Rack\",\n    \"id\": null,\n    \"parentId\": \"{{RID}}\",\n    \"category\": \"rack\",\n    \"description\": [\n        \"99\",\n        \"999\",\n        \"9999\"\n    ],\n    \"domain\": \"Abandoned Rack\",\n    \"attributes\": {\n        \"posXY\": \"999\",\n        \"posXYUnit\": \"tile\",\n        \"size\": \"99\",\n        \"sizeUnit\": \"cm\",\n        \"height\": \"999\",\n        \"heightUnit\": \"U\",\n        \"template\": \"\",\n        \"orientation\": \"front\",\n        \"vendor\": \"999\",\n        \"type\": \"999\",\n        \"model\": \"999\",\n        \"serial\": \"999\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/user/racks/{{RackID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"racks",
								"{{RackID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update Rack",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"var input = JSON.parse(pm.environment.get(\"RackUpdateStr\"))",
									"",
									"input[\"id\"] = data[\"data\"][\"id\"]",
									"input[\"parentId\"] = data[\"data\"][\"parentId\"]",
									"input[\"category\"] = data[\"data\"][\"category\"]",
									"",
									"console.log(\"The response: \", data)",
									"console.log(\"The input: \", input)",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    for (let i in obj1) {",
									"        //console.log(obj2[i])",
									"        //console.log(obj1[i])",
									"        if (obj1[i] !== obj2[i]) {",
									"            console.log(\"Failed at: \", obj1[i])",
									"            ",
									"            for (let idx in obj1[i]) {",
									"                if (obj1[i][idx] !== obj2[i][idx] && (obj2[i][idx] !== undefined && obj2[i][idx] !== \"\")) {",
									"                    console.log(\"The iter: \", i, \"and the inner: \", idx)",
									"                    console.log(\"Bad News: \", obj1[i][idx])",
									"",
									"                    console.log(\"The contents that was already present: \", obj2[i][idx])",
									"                    return false",
									"                }",
									"            }",
									"        }",
									"      }",
									"      return true",
									"}",
									"",
									"",
									"",
									"//console.log(\"Input: \", input)",
									"//onsole.log(\"response: \", data[\"data\"])",
									"",
									"tests[\"Successful Update & Get Request\"] = isEqualsJson(data[\"data\"], input) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/user/racks/{{RackID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"racks",
								"{{RackID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"tests[\"Successful POST Request\"] = responseCode.code === 200;",
									"",
									"pm.environment.set(\"DeviceUpdateStr\", JSON.stringify(JSON.parse(request.data)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Abandoned Device\",\n    \"id\": null,\n    \"parentId\": \"{{RackID}}\",\n    \"category\": \"999\",\n    \"description\": [\n        \"Rack A01\",\n        \"The original one\",\n        \"-3/-5\\\\nA0-Z9\"\n    ],\n    \"domain\": \"99\",\n    \"attributes\": {\n        \"posXY\": \"99\",\n        \"posXYUnit\": \"tile\",\n        \"size\": \"99\",\n        \"sizeUnit\": \"cm\",\n        \"height\": \"99\",\n        \"heightUnit\": \"U\",\n        \"template\": \"\",\n        \"orientation\": \"front\",\n        \"vendor\": \"99\",\n        \"type\": \"99\",\n        \"model\": \"99\",\n        \"serial\": \"99\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/user/devices/{{DeviceID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"devices",
								"{{DeviceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									"var data =  pm.response.json();",
									"var input = JSON.parse(pm.environment.get(\"DeviceUpdateStr\"))",
									"",
									"input[\"id\"] = data[\"data\"][\"id\"]",
									"input[\"parentId\"] = data[\"data\"][\"parentId\"]",
									"input[\"category\"] = data[\"data\"][\"category\"]",
									"",
									"console.log(\"The response: \", data)",
									"console.log(\"The input: \", input)",
									"",
									"function isEqualsJson(obj1, obj2) {",
									"    for (let i in obj1) {",
									"        //console.log(obj2[i])",
									"        //console.log(obj1[i])",
									"        if (obj1[i] !== obj2[i] && obj2.hasOwnProperty(i) == true) {",
									"            console.log(\"Failed at: \", obj1[i])",
									"            ",
									"            for (let idx in obj1[i]) {",
									"                if (obj1[i][idx] !== obj2[i][idx] && (obj2[i][idx] !== undefined && obj2[i][idx] !== \"\")) {",
									"                    console.log(\"The iter: \", i, \"and the inner: \", idx)",
									"                    console.log(\"Bad News: \", obj1[i][idx])",
									"",
									"                    console.log(\"The contents that was already present: \", obj2[i][idx])",
									"                    return false",
									"                }",
									"            }",
									"        }",
									"      }",
									"      return true",
									"}",
									"",
									"",
									"",
									"//console.log(\"Input: \", input)",
									"//onsole.log(\"response: \", data[\"data\"])",
									"",
									"tests[\"Successful Update & Get Request\"] = isEqualsJson(data[\"data\"], input) == true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/user/devices/{{DeviceID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"user",
								"devices",
								"{{DeviceID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete DB",
			"item": [
				{
					"name": "Delete Tenant & Hierarchy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful DELETE Request\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/tenants/{{TenantID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"tenants",
								"{{TenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Delete Tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful DELETE & GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/tenants/{{TenantID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"tenants",
								"{{TenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Delete Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful DELETE & GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/sites/{{SiteID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"sites",
								"{{SiteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Delete Building",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful DELETE & GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/buildings/{{BuildingID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"buildings",
								"{{BuildingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Delete Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful DELETE & GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/rooms/{{RoomID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rooms",
								"{{RoomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Delete Rack",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful DELETE & GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/racks/{{RackID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"racks",
								"{{RackID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Delete Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful DELETE & GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/devices/{{DeviceID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"devices",
								"{{DeviceID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify DB is Empty",
			"item": [
				{
					"name": "Verify Tentants Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/tenants",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Sites Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/sites",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"sites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Buildings Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/buildings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"buildings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Rooms Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/rooms",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rooms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Racks Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/racks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"racks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Devices Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Successful GET Request\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/devices",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"devices"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}