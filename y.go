// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		if input[idx].(string) == "false" {
			x := map[int]interface{}{0: &boolNode{BOOL, false}}
			res = append(res, x)
		} else if input[idx].(string) == "true" {
			x := map[int]interface{}{0: &boolNode{BOOL, true}}
			res = append(res, x)
		} else if v, e := strconv.Atoi(input[idx].(string)); e == nil {
			x := map[int]interface{}{0: &numNode{NUM, v}}
			res = append(res, x)
		} else {
			x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
			res = append(res, x)
		}
	}
	return res
}

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57430
	yyEofCode      = 57344
	TOK_AND        = 57415
	TOK_ATTR       = 57356
	TOK_ATTRSPEC   = 57390
	TOK_BASHTYPE   = 57365
	TOK_BLDG       = 57350
	TOK_BOOL       = 57359
	TOK_CD         = 57371
	TOK_CLR        = 57373
	TOK_CMDFLAG    = 57367
	TOK_CMDS       = 57401
	TOK_COL        = 57395
	TOK_COMMA      = 57399
	TOK_CREATE     = 57360
	TOK_DELETE     = 57363
	TOK_DEREF      = 57404
	TOK_DEVICE     = 57353
	TOK_DIV        = 57420
	TOK_DO         = 57429
	TOK_DOC        = 57370
	TOK_DONE       = 57426
	TOK_DOT        = 57400
	TOK_ELIF       = 57428
	TOK_ELSE       = 57409
	TOK_EQUAL      = 57366
	TOK_EXIT       = 57369
	TOK_FI         = 57425
	TOK_FOR        = 57407
	TOK_GET        = 57361
	TOK_GREATER    = 57422
	TOK_GREP       = 57374
	TOK_IF         = 57406
	TOK_IN         = 57416
	TOK_LBLOCK     = 57410
	TOK_LBRAC      = 57397
	TOK_LESS       = 57423
	TOK_LPAREN     = 57412
	TOK_LS         = 57375
	TOK_LSBLDG     = 57380
	TOK_LSDEV      = 57383
	TOK_LSOG       = 57377
	TOK_LSRACK     = 57382
	TOK_LSROOM     = 57381
	TOK_LSSITE     = 57379
	TOK_LSSUBDEV   = 57384
	TOK_LSSUBDEV1  = 57385
	TOK_LSTEN      = 57378
	TOK_MULT       = 57421
	TOK_NOT        = 57419
	TOK_NUM        = 57346
	TOK_OCBLDG     = 57386
	TOK_OCDEL      = 57358
	TOK_OCDEV      = 57387
	TOK_OCRACK     = 57388
	TOK_OCROOM     = 57389
	TOK_OCSDEV     = 57393
	TOK_OCSDEV1    = 57394
	TOK_OCSITE     = 57391
	TOK_OCTENANT   = 57392
	TOK_OR         = 57414
	TOK_PLUS       = 57357
	TOK_PRNT       = 57417
	TOK_PWD        = 57372
	TOK_QUOT       = 57418
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57411
	TOK_RBRAC      = 57398
	TOK_ROOM       = 57351
	TOK_RPAREN     = 57413
	TOK_SEARCH     = 57364
	TOK_SELECT     = 57396
	TOK_SEMICOL    = 57405
	TOK_SITE       = 57349
	TOK_SLASH      = 57368
	TOK_SUBDEVICE  = 57354
	TOK_SUBDEVICE1 = 57355
	TOK_TEMPLATE   = 57402
	TOK_TENANT     = 57348
	TOK_THEN       = 57424
	TOK_TREE       = 57376
	TOK_UNSET      = 57427
	TOK_UPDATE     = 57362
	TOK_VAR        = 57403
	TOK_WHILE      = 57408
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -160
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57426: 0,   // TOK_DONE (173x)
		57409: 1,   // TOK_ELSE (169x)
		57398: 2,   // TOK_RBRAC (169x)
		57405: 3,   // TOK_SEMICOL (168x)
		57428: 4,   // TOK_ELIF (167x)
		57425: 5,   // TOK_FI (167x)
		57344: 6,   // $end (166x)
		57413: 7,   // TOK_RPAREN (163x)
		57358: 8,   // TOK_OCDEL (141x)
		57347: 9,   // TOK_WORD (137x)
		57346: 10,  // TOK_NUM (79x)
		57404: 11,  // TOK_DEREF (78x)
		57400: 12,  // TOK_DOT (75x)
		57357: 13,  // TOK_PLUS (75x)
		57359: 14,  // TOK_BOOL (61x)
		57368: 15,  // TOK_SLASH (58x)
		57429: 16,  // TOK_DO (54x)
		57390: 17,  // TOK_ATTRSPEC (51x)
		57366: 18,  // TOK_EQUAL (50x)
		57456: 19,  // P1 (48x)
		57419: 20,  // TOK_NOT (48x)
		57455: 21,  // P (45x)
		57418: 22,  // TOK_QUOT (43x)
		57414: 23,  // TOK_OR (36x)
		57356: 24,  // TOK_ATTR (35x)
		57411: 25,  // TOK_RBLOCK (32x)
		57461: 26,  // WORDORNUM (32x)
		57415: 27,  // TOK_AND (28x)
		57412: 28,  // TOK_LPAREN (27x)
		57462: 29,  // factor (22x)
		57468: 30,  // unary (22x)
		57467: 31,  // term (18x)
		57422: 32,  // TOK_GREATER (17x)
		57423: 33,  // TOK_LESS (17x)
		57463: 34,  // nex (16x)
		57420: 35,  // TOK_DIV (16x)
		57421: 36,  // TOK_MULT (16x)
		57371: 37,  // TOK_CD (15x)
		57395: 38,  // TOK_COL (15x)
		57375: 39,  // TOK_LS (15x)
		57377: 40,  // TOK_LSOG (15x)
		57376: 41,  // TOK_TREE (15x)
		57431: 42,  // BASH (14x)
		57457: 43,  // Q (14x)
		57373: 44,  // TOK_CLR (14x)
		57360: 45,  // TOK_CREATE (14x)
		57363: 46,  // TOK_DELETE (14x)
		57370: 47,  // TOK_DOC (14x)
		57369: 48,  // TOK_EXIT (14x)
		57361: 49,  // TOK_GET (14x)
		57374: 50,  // TOK_GREP (14x)
		57380: 51,  // TOK_LSBLDG (14x)
		57383: 52,  // TOK_LSDEV (14x)
		57382: 53,  // TOK_LSRACK (14x)
		57381: 54,  // TOK_LSROOM (14x)
		57379: 55,  // TOK_LSSITE (14x)
		57384: 56,  // TOK_LSSUBDEV (14x)
		57385: 57,  // TOK_LSSUBDEV1 (14x)
		57378: 58,  // TOK_LSTEN (14x)
		57417: 59,  // TOK_PRNT (14x)
		57372: 60,  // TOK_PWD (14x)
		57427: 61,  // TOK_UNSET (14x)
		57362: 62,  // TOK_UPDATE (14x)
		57441: 63,  // K (13x)
		57442: 64,  // NT_CREATE (13x)
		57443: 65,  // NT_DEL (13x)
		57444: 66,  // NT_GET (13x)
		57445: 67,  // NT_UPDATE (13x)
		57446: 68,  // OCCHOOSE (13x)
		57448: 69,  // OCDEL (13x)
		57449: 70,  // OCDOT (13x)
		57450: 71,  // OCGET (13x)
		57451: 72,  // OCLISYNTX (13x)
		57452: 73,  // OCSEL (13x)
		57453: 74,  // OCUPDATE (13x)
		57396: 75,  // TOK_SELECT (13x)
		57438: 76,  // FUNC (12x)
		57458: 77,  // REL (12x)
		57466: 78,  // stmnt (12x)
		57432: 79,  // CTRL (11x)
		57454: 80,  // OPEN_STMT (11x)
		57464: 81,  // st2 (11x)
		57407: 82,  // TOK_FOR (11x)
		57406: 83,  // TOK_IF (11x)
		57408: 84,  // TOK_WHILE (11x)
		57435: 85,  // EQAL (10x)
		57440: 86,  // JOIN (9x)
		57436: 87,  // EXPR (8x)
		57437: 88,  // F (4x)
		57459: 89,  // STRARG (4x)
		57350: 90,  // TOK_BLDG (4x)
		57353: 91,  // TOK_DEVICE (4x)
		57410: 92,  // TOK_LBLOCK (4x)
		57352: 93,  // TOK_RACK (4x)
		57351: 94,  // TOK_ROOM (4x)
		57349: 95,  // TOK_SITE (4x)
		57348: 96,  // TOK_TENANT (4x)
		57397: 97,  // TOK_LBRAC (3x)
		57460: 98,  // WNARG (3x)
		57433: 99,  // E (2x)
		57434: 100, // EIF (2x)
		57439: 101, // GETOBJS (2x)
		57447: 102, // OCCR (2x)
		57386: 103, // TOK_OCBLDG (2x)
		57387: 104, // TOK_OCDEV (2x)
		57388: 105, // TOK_OCRACK (2x)
		57389: 106, // TOK_OCROOM (2x)
		57391: 107, // TOK_OCSITE (2x)
		57392: 108, // TOK_OCTENANT (2x)
		57354: 109, // TOK_SUBDEVICE (2x)
		57355: 110, // TOK_SUBDEVICE1 (2x)
		57424: 111, // TOK_THEN (2x)
		57465: 112, // start (1x)
		57401: 113, // TOK_CMDS (1x)
		57399: 114, // TOK_COMMA (1x)
		57416: 115, // TOK_IN (1x)
		57402: 116, // TOK_TEMPLATE (1x)
		57403: 117, // TOK_VAR (1x)
		57430: 118, // $default (0x)
		57345: 119, // error (0x)
		57365: 120, // TOK_BASHTYPE (0x)
		57367: 121, // TOK_CMDFLAG (0x)
		57393: 122, // TOK_OCSDEV (0x)
		57394: 123, // TOK_OCSDEV1 (0x)
		57364: 124, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_ELSE",
		"TOK_RBRAC",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"$end",
		"TOK_RPAREN",
		"TOK_OCDEL",
		"TOK_WORD",
		"TOK_NUM",
		"TOK_DEREF",
		"TOK_DOT",
		"TOK_PLUS",
		"TOK_BOOL",
		"TOK_SLASH",
		"TOK_DO",
		"TOK_ATTRSPEC",
		"TOK_EQUAL",
		"P1",
		"TOK_NOT",
		"P",
		"TOK_QUOT",
		"TOK_OR",
		"TOK_ATTR",
		"TOK_RBLOCK",
		"WORDORNUM",
		"TOK_AND",
		"TOK_LPAREN",
		"factor",
		"unary",
		"term",
		"TOK_GREATER",
		"TOK_LESS",
		"nex",
		"TOK_DIV",
		"TOK_MULT",
		"TOK_CD",
		"TOK_COL",
		"TOK_LS",
		"TOK_LSOG",
		"TOK_TREE",
		"BASH",
		"Q",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSSUBDEV",
		"TOK_LSSUBDEV1",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_UNSET",
		"TOK_UPDATE",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCDOT",
		"OCGET",
		"OCLISYNTX",
		"OCSEL",
		"OCUPDATE",
		"TOK_SELECT",
		"FUNC",
		"REL",
		"stmnt",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"EQAL",
		"JOIN",
		"EXPR",
		"F",
		"STRARG",
		"TOK_BLDG",
		"TOK_DEVICE",
		"TOK_LBLOCK",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"TOK_LBRAC",
		"WNARG",
		"E",
		"EIF",
		"GETOBJS",
		"OCCR",
		"TOK_OCBLDG",
		"TOK_OCDEV",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_SUBDEVICE",
		"TOK_SUBDEVICE1",
		"TOK_THEN",
		"start",
		"TOK_CMDS",
		"TOK_COMMA",
		"TOK_IN",
		"TOK_TEMPLATE",
		"TOK_VAR",
		"$default",
		"error",
		"TOK_BASHTYPE",
		"TOK_CMDFLAG",
		"TOK_OCSDEV",
		"TOK_OCSDEV1",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {112, 1},
		2:   {81, 1},
		3:   {81, 3},
		4:   {81, 1},
		5:   {78, 1},
		6:   {78, 1},
		7:   {78, 1},
		8:   {78, 1},
		9:   {78, 0},
		10:  {79, 1},
		11:  {80, 7},
		12:  {80, 10},
		13:  {80, 6},
		14:  {80, 15},
		15:  {80, 7},
		16:  {80, 12},
		17:  {80, 8},
		18:  {100, 7},
		19:  {100, 0},
		20:  {87, 3},
		21:  {87, 1},
		22:  {86, 3},
		23:  {86, 1},
		24:  {85, 4},
		25:  {85, 4},
		26:  {85, 1},
		27:  {77, 3},
		28:  {77, 4},
		29:  {77, 4},
		30:  {77, 3},
		31:  {77, 1},
		32:  {34, 3},
		33:  {34, 3},
		34:  {34, 1},
		35:  {31, 3},
		36:  {31, 3},
		37:  {31, 1},
		38:  {30, 2},
		39:  {30, 2},
		40:  {30, 1},
		41:  {29, 3},
		42:  {29, 1},
		43:  {29, 2},
		44:  {29, 5},
		45:  {29, 1},
		46:  {29, 3},
		47:  {29, 1},
		48:  {63, 1},
		49:  {63, 1},
		50:  {63, 1},
		51:  {63, 1},
		52:  {64, 4},
		53:  {66, 2},
		54:  {66, 3},
		55:  {67, 3},
		56:  {65, 2},
		57:  {99, 1},
		58:  {99, 1},
		59:  {99, 1},
		60:  {99, 1},
		61:  {99, 1},
		62:  {99, 1},
		63:  {99, 1},
		64:  {99, 1},
		65:  {26, 1},
		66:  {26, 1},
		67:  {26, 4},
		68:  {26, 4},
		69:  {26, 4},
		70:  {26, 4},
		71:  {26, 1},
		72:  {88, 4},
		73:  {88, 3},
		74:  {21, 1},
		75:  {21, 2},
		76:  {19, 3},
		77:  {19, 1},
		78:  {19, 4},
		79:  {19, 3},
		80:  {19, 2},
		81:  {19, 1},
		82:  {19, 2},
		83:  {19, 0},
		84:  {43, 2},
		85:  {43, 2},
		86:  {43, 2},
		87:  {43, 2},
		88:  {43, 2},
		89:  {43, 2},
		90:  {43, 2},
		91:  {43, 2},
		92:  {43, 2},
		93:  {43, 2},
		94:  {43, 2},
		95:  {43, 3},
		96:  {43, 4},
		97:  {43, 1},
		98:  {42, 1},
		99:  {42, 1},
		100: {42, 4},
		101: {42, 1},
		102: {42, 1},
		103: {42, 1},
		104: {42, 1},
		105: {42, 2},
		106: {42, 2},
		107: {42, 2},
		108: {42, 2},
		109: {42, 2},
		110: {42, 2},
		111: {42, 2},
		112: {42, 2},
		113: {42, 2},
		114: {72, 2},
		115: {72, 1},
		116: {72, 1},
		117: {72, 1},
		118: {72, 1},
		119: {72, 1},
		120: {72, 1},
		121: {102, 5},
		122: {102, 5},
		123: {102, 5},
		124: {102, 5},
		125: {102, 7},
		126: {102, 7},
		127: {102, 7},
		128: {102, 7},
		129: {102, 7},
		130: {102, 7},
		131: {102, 7},
		132: {102, 7},
		133: {69, 2},
		134: {74, 5},
		135: {71, 2},
		136: {101, 3},
		137: {101, 1},
		138: {68, 4},
		139: {70, 6},
		140: {70, 8},
		141: {70, 8},
		142: {70, 4},
		143: {70, 4},
		144: {70, 6},
		145: {70, 6},
		146: {70, 6},
		147: {70, 2},
		148: {70, 5},
		149: {70, 7},
		150: {70, 4},
		151: {73, 1},
		152: {73, 5},
		153: {89, 2},
		154: {89, 0},
		155: {98, 2},
		156: {98, 4},
		157: {98, 0},
		158: {76, 6},
		159: {76, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [380][]uint16{
		// 0
		{3: 151, 6: 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 162, 172, 170, 171, 112: 161},
		{6: 160},
		{6: 159},
		{158, 158, 158, 538, 158, 158, 158},
		{156, 156, 156, 4: 156, 156, 156},
		// 5
		{155, 155, 155, 155, 155, 155, 155, 155},
		{154, 154, 154, 154, 154, 154, 154, 154},
		{153, 153, 153, 153, 153, 153, 153, 153},
		{152, 152, 152, 152, 152, 152, 152, 152},
		{150, 150, 150, 4: 150, 150, 150},
		// 10
		{92: 521},
		{28: 516},
		{9: 483, 28: 482},
		{112, 112, 112, 112, 112, 112, 112, 112},
		{111, 111, 111, 111, 111, 111, 111, 111},
		// 15
		{110, 110, 110, 110, 110, 110, 110, 110},
		{109, 109, 109, 109, 109, 109, 109, 109},
		{90: 472, 475, 93: 474, 473, 471, 470, 99: 479, 109: 476, 477},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 468, 90: 472, 475, 93: 474, 473, 471, 470, 99: 469, 109: 476, 477},
		{8: 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 462, 24: 77},
		// 20
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 461},
		{86, 86, 86, 86, 86, 86, 86, 86, 10: 86, 12: 86, 16: 86, 86, 24: 86},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 77, 224, 222, 16: 77, 77, 19: 460, 24: 77},
		{1, 1, 1, 1, 1, 1, 1, 1, 12: 237, 15: 236, 28: 455},
		{12: 233, 113: 426, 116: 427, 425},
		// 25
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 424},
		{9: 365},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 364},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 363},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 362},
		// 30
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 361},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 360},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 359},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 358},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 357},
		// 35
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 356},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 77, 19: 181, 21: 355},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 77, 224, 222, 15: 182, 77, 19: 181, 21: 353},
		{8: 350},
		{63, 63, 63, 63, 63, 63, 63, 63, 16: 63},
		// 40
		{62, 62, 62, 62, 62, 62, 62, 62, 16: 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 16: 61},
		{22: 345},
		{59, 59, 59, 59, 59, 59, 59, 59, 16: 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 16: 58},
		// 45
		{57, 57, 57, 57, 57, 57, 57, 57, 16: 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 9: 342, 16: 56, 37: 337, 39: 336, 344, 343, 45: 338, 341, 49: 339, 62: 340},
		{90: 265, 271, 93: 269, 267, 263, 261, 102: 259, 264, 270, 268, 266, 262, 260},
		{45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44},
		// 50
		{43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40},
		{12: 240},
		// 55
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 225, 97: 226},
		{9, 9, 9, 9, 9, 9, 9, 9, 12: 217},
		{24: 218},
		{18: 219},
		{9: 220},
		// 60
		{8, 8, 8, 8, 8, 8, 8, 8},
		{83, 83, 83, 83, 83, 83, 83, 83, 10: 83, 12: 237, 15: 236, 83, 83, 24: 83},
		{12: 233},
		{79, 79, 79, 79, 79, 79, 79, 79, 10: 79, 12: 79, 16: 79, 79, 24: 79},
		{9: 232},
		// 65
		{25, 25, 25, 25, 25, 25, 25, 25},
		{9: 227, 101: 228},
		{2: 23, 114: 230},
		{2: 229},
		{22, 22, 22, 22, 22, 22, 22, 22},
		// 70
		{9: 227, 101: 231},
		{2: 24},
		{78, 78, 78, 78, 78, 78, 78, 78, 10: 78, 12: 78, 16: 78, 78, 24: 78},
		{80, 80, 80, 80, 80, 80, 80, 80, 10: 80, 12: 80, 15: 234, 80, 80, 24: 80},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 77, 224, 222, 16: 77, 77, 19: 235, 24: 77},
		// 75
		{82, 82, 82, 82, 82, 82, 82, 82, 10: 82, 12: 82, 16: 82, 82, 24: 82},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 77, 224, 222, 16: 77, 77, 19: 239, 24: 77},
		{9: 238},
		{81, 81, 81, 81, 81, 81, 81, 81, 10: 81, 12: 81, 16: 81, 81, 24: 81},
		{84, 84, 84, 84, 84, 84, 84, 84, 10: 84, 12: 84, 16: 84, 84, 24: 84},
		// 80
		{24: 241},
		{18: 242},
		{8: 246, 243, 244, 13: 245, 247, 26: 248},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 13: 95, 95, 17: 95, 22: 95, 24: 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 13: 94, 94, 17: 94, 22: 94, 24: 94},
		// 85
		{9: 254},
		{9: 249},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 13: 89, 89, 17: 89, 22: 89, 24: 89},
		{26, 26, 26, 26, 26, 26, 26, 26},
		{8: 250, 13: 251},
		// 90
		{9: 253},
		{9: 252},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 13: 90, 90, 17: 90, 22: 90, 24: 90},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 13: 91, 91, 17: 91, 22: 91, 24: 91},
		{8: 256, 13: 255},
		// 95
		{9: 258},
		{9: 257},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 13: 92, 92, 17: 92, 22: 92, 24: 92},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 13: 93, 93, 17: 93, 22: 93, 24: 93},
		{46, 46, 46, 46, 46, 46, 46, 46},
		// 100
		{38: 332},
		{38: 328},
		{38: 324},
		{38: 320},
		{38: 314},
		// 105
		{38: 308},
		{38: 302},
		{38: 296},
		{38: 290},
		{38: 284},
		// 110
		{38: 278},
		{38: 272},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 273},
		{17: 274},
		{8: 246, 243, 244, 13: 245, 247, 26: 275},
		// 115
		{17: 276},
		{8: 246, 243, 244, 13: 245, 247, 26: 277},
		{28, 28, 28, 28, 28, 28, 28, 28},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 279},
		{17: 280},
		// 120
		{8: 246, 243, 244, 13: 245, 247, 26: 281},
		{17: 282},
		{8: 246, 243, 244, 13: 245, 247, 26: 283},
		{29, 29, 29, 29, 29, 29, 29, 29},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 285},
		// 125
		{17: 286},
		{8: 246, 243, 244, 13: 245, 247, 26: 287},
		{17: 288},
		{8: 246, 243, 244, 13: 245, 247, 26: 289},
		{30, 30, 30, 30, 30, 30, 30, 30},
		// 130
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 291},
		{17: 292},
		{8: 246, 243, 244, 13: 245, 247, 26: 293},
		{17: 294},
		{8: 246, 243, 244, 13: 245, 247, 26: 295},
		// 135
		{31, 31, 31, 31, 31, 31, 31, 31},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 297},
		{17: 298},
		{8: 246, 243, 244, 13: 245, 247, 26: 299},
		{17: 300},
		// 140
		{8: 246, 243, 244, 13: 245, 247, 26: 301},
		{32, 32, 32, 32, 32, 32, 32, 32},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 303},
		{17: 304},
		{8: 246, 243, 244, 13: 245, 247, 26: 305},
		// 145
		{17: 306},
		{8: 246, 243, 244, 13: 245, 247, 26: 307},
		{33, 33, 33, 33, 33, 33, 33, 33},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 309},
		{17: 310},
		// 150
		{8: 246, 243, 244, 13: 245, 247, 26: 311},
		{17: 312},
		{8: 246, 243, 244, 13: 245, 247, 26: 313},
		{34, 34, 34, 34, 34, 34, 34, 34},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 315},
		// 155
		{17: 316},
		{8: 246, 243, 244, 13: 245, 247, 26: 317},
		{17: 318},
		{8: 246, 243, 244, 13: 245, 247, 26: 319},
		{35, 35, 35, 35, 35, 35, 35, 35},
		// 160
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 321},
		{17: 322},
		{8: 246, 243, 244, 13: 245, 247, 26: 323},
		{36, 36, 36, 36, 36, 36, 36, 36},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 325},
		// 165
		{17: 326},
		{8: 246, 243, 244, 13: 245, 247, 26: 327},
		{37, 37, 37, 37, 37, 37, 37, 37},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 329},
		{17: 330},
		// 170
		{8: 246, 243, 244, 13: 245, 247, 26: 331},
		{38, 38, 38, 38, 38, 38, 38, 38},
		{8: 223, 221, 11: 224, 222, 15: 182, 17: 77, 19: 181, 21: 333},
		{17: 334},
		{8: 246, 243, 244, 13: 245, 247, 26: 335},
		// 175
		{39, 39, 39, 39, 39, 39, 39, 39},
		{55, 55, 55, 55, 55, 55, 55, 55, 16: 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 16: 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 16: 53},
		{52, 52, 52, 52, 52, 52, 52, 52, 16: 52},
		// 180
		{51, 51, 51, 51, 51, 51, 51, 51, 16: 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 16: 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 16: 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 16: 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 16: 47},
		// 185
		{8: 246, 243, 244, 13: 245, 247, 22: 6, 26: 347, 89: 346},
		{22: 349},
		{8: 246, 243, 244, 13: 245, 247, 22: 6, 26: 347, 89: 348},
		{22: 7},
		{60, 60, 60, 60, 60, 60, 60, 60, 16: 60},
		// 190
		{9: 351},
		{9: 352},
		{64, 64, 64, 64, 64, 64, 64, 64, 16: 64},
		{66, 66, 66, 66, 66, 66, 66, 66, 10: 354, 16: 66},
		{65, 65, 65, 65, 65, 65, 65, 65, 16: 65},
		// 195
		{67, 67, 67, 67, 67, 67, 67, 67, 16: 67},
		{68, 68, 68, 68, 68, 68, 68, 68, 16: 68},
		{69, 69, 69, 69, 69, 69, 69, 69, 16: 69},
		{70, 70, 70, 70, 70, 70, 70, 70, 16: 70},
		{71, 71, 71, 71, 71, 71, 71, 71, 16: 71},
		// 200
		{72, 72, 72, 72, 72, 72, 72, 72, 16: 72},
		{73, 73, 73, 73, 73, 73, 73, 73, 16: 73},
		{74, 74, 74, 74, 74, 74, 74, 74, 16: 74},
		{75, 75, 75, 75, 75, 75, 75, 75, 16: 75},
		{76, 76, 76, 76, 76, 76, 76, 76, 16: 76},
		// 205
		{13, 13, 13, 13, 13, 13, 13, 13, 12: 78, 18: 367, 92: 366},
		{10: 420},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 368},
		{10, 10, 10, 10, 10, 10, 10, 10, 23: 391},
		{139, 139, 139, 139, 139, 139, 139, 139, 23: 139, 25: 139, 27: 394},
		// 210
		{137, 137, 137, 137, 137, 137, 137, 137, 18: 396, 20: 397, 23: 137, 25: 137, 27: 137},
		{134, 134, 134, 134, 134, 134, 134, 134, 18: 134, 20: 134, 23: 134, 25: 134, 27: 134},
		{129, 129, 129, 129, 129, 129, 129, 129, 411, 13: 410, 18: 129, 20: 129, 23: 129, 25: 129, 27: 129, 32: 409, 408},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 13: 126, 18: 126, 20: 126, 23: 126, 25: 126, 27: 126, 32: 126, 126, 35: 405, 404},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 13: 123, 18: 123, 20: 123, 23: 123, 25: 123, 27: 123, 32: 123, 123, 35: 123, 123},
		// 215
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 403},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 402},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 13: 120, 18: 120, 20: 120, 23: 120, 25: 120, 27: 120, 32: 120, 120, 35: 120, 120},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 390},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 13: 118, 18: 118, 20: 118, 23: 118, 25: 118, 27: 118, 32: 118, 118, 35: 118, 118},
		// 220
		{9: 386},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 13: 115, 18: 115, 20: 115, 23: 115, 25: 115, 27: 115, 32: 115, 115, 35: 115, 115},
		{8: 246, 243, 244, 13: 245, 247, 22: 6, 26: 347, 89: 384},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 13: 113, 18: 113, 20: 113, 23: 113, 25: 113, 27: 113, 32: 113, 113, 35: 113, 113},
		{22: 385},
		// 225
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 13: 114, 18: 114, 20: 114, 23: 114, 25: 114, 27: 114, 32: 114, 114, 35: 114, 114},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 13: 117, 18: 117, 20: 117, 23: 117, 25: 117, 27: 117, 32: 117, 117, 35: 117, 117, 92: 387},
		{10: 388},
		{25: 389},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 13: 116, 18: 116, 20: 116, 23: 116, 25: 116, 27: 116, 32: 116, 116, 35: 116, 116},
		// 230
		{7: 392, 23: 391},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 393},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 13: 119, 18: 119, 20: 119, 23: 119, 25: 119, 27: 119, 32: 119, 119, 35: 119, 119},
		{140, 140, 140, 140, 140, 140, 140, 140, 23: 140, 25: 140, 27: 394},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 395},
		// 235
		{138, 138, 138, 138, 138, 138, 138, 138, 18: 396, 20: 397, 23: 138, 25: 138, 27: 138},
		{18: 400},
		{18: 398},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 399},
		{135, 135, 135, 135, 135, 135, 135, 135, 18: 135, 20: 135, 23: 135, 25: 135, 27: 135},
		// 240
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 401},
		{136, 136, 136, 136, 136, 136, 136, 136, 18: 136, 20: 136, 23: 136, 25: 136, 27: 136},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 18: 121, 20: 121, 23: 121, 25: 121, 27: 121, 32: 121, 121, 35: 121, 121},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 18: 122, 20: 122, 23: 122, 25: 122, 27: 122, 32: 122, 122, 35: 122, 122},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 407},
		// 245
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 406},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 13: 124, 18: 124, 20: 124, 23: 124, 25: 124, 27: 124, 32: 124, 124, 35: 124, 124},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 13: 125, 18: 125, 20: 125, 23: 125, 25: 125, 27: 125, 32: 125, 125, 35: 125, 125},
		{8: 376, 381, 379, 380, 14: 383, 18: 418, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 417},
		{8: 376, 381, 379, 380, 14: 383, 18: 414, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 415},
		// 250
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 413},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 412},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 13: 127, 18: 127, 20: 127, 23: 127, 25: 127, 27: 127, 32: 127, 127, 35: 405, 404},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 13: 128, 18: 128, 20: 128, 23: 128, 25: 128, 27: 128, 32: 128, 128, 35: 405, 404},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 416},
		// 255
		{130, 130, 130, 130, 130, 130, 130, 130, 411, 13: 410, 18: 130, 20: 130, 23: 130, 25: 130, 27: 130},
		{131, 131, 131, 131, 131, 131, 131, 131, 411, 13: 410, 18: 131, 20: 131, 23: 131, 25: 131, 27: 131},
		{133, 133, 133, 133, 133, 133, 133, 133, 411, 13: 410, 18: 133, 20: 133, 23: 133, 25: 133, 27: 133},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 419},
		{132, 132, 132, 132, 132, 132, 132, 132, 411, 13: 410, 18: 132, 20: 132, 23: 132, 25: 132, 27: 132},
		// 260
		{25: 421},
		{12, 12, 12, 12, 12, 12, 12, 12, 18: 422},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 423},
		{11, 11, 11, 11, 11, 11, 11, 11, 23: 391},
		{27, 27, 27, 27, 27, 27, 27, 27},
		// 265
		{38: 432},
		{38: 430},
		{38: 428},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 429},
		{17, 17, 17, 17, 17, 17, 17, 17},
		// 270
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 431},
		{18, 18, 18, 18, 18, 18, 18, 18},
		{9: 433},
		{18: 434},
		{8: 437, 435, 244, 186, 184, 436, 247, 182, 18: 215, 181, 21: 214, 439, 26: 438, 28: 440, 37: 187, 39: 188, 203, 197, 199, 441, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 442, 173, 176, 174, 175, 211, 208, 212, 210, 443, 213, 209, 216},
		// 275
		{95, 95, 95, 95, 95, 95, 95, 95, 12: 237, 15: 236},
		{9: 254, 90: 265, 271, 93: 269, 267, 263, 261, 102: 259, 264, 270, 268, 266, 262, 260},
		{77, 77, 77, 77, 77, 77, 77, 77, 223, 454, 11: 224, 222, 15: 182, 19: 181, 21: 424},
		{21, 21, 21, 21, 21, 21, 21, 21},
		{8: 246, 243, 244, 13: 245, 247, 22: 6, 26: 347, 89: 452},
		// 280
		{7: 3, 246, 243, 244, 13: 245, 247, 22: 446, 26: 445, 98: 444},
		{16, 16, 16, 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14},
		{7: 451},
		// 285
		{7: 3, 246, 243, 244, 13: 245, 247, 22: 446, 26: 445, 98: 450},
		{8: 246, 243, 244, 13: 245, 247, 26: 447},
		{22: 448},
		{7: 3, 246, 243, 244, 13: 245, 247, 22: 446, 26: 445, 98: 449},
		{7: 4},
		// 290
		{7: 5},
		{19, 19, 19, 19, 19, 19, 19, 19},
		{22: 453},
		{20, 20, 20, 20, 20, 20, 20, 20},
		{83, 83, 83, 83, 83, 83, 83, 83, 250, 12: 237, 251, 15: 236},
		// 295
		{7: 456},
		{97: 457},
		{2: 151, 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 458, 172, 170, 171},
		{2: 459},
		{2, 2, 2, 2, 2, 2, 2, 2},
		// 300
		{85, 85, 85, 85, 85, 85, 85, 85, 10: 85, 12: 85, 16: 85, 85, 24: 85},
		{104, 104, 104, 104, 104, 104, 104, 104},
		{24: 464, 88: 463},
		{105, 105, 105, 105, 105, 105, 105, 105},
		{18: 465},
		// 305
		{8: 246, 243, 244, 13: 245, 247, 26: 466},
		{87, 87, 87, 87, 87, 87, 87, 87, 24: 464, 88: 467},
		{88, 88, 88, 88, 88, 88, 88, 88},
		{107, 107, 107, 107, 107, 107, 107, 107},
		{24: 464, 88: 478},
		// 310
		{8: 103, 103, 11: 103, 103, 15: 103, 24: 103},
		{8: 102, 102, 11: 102, 102, 15: 102, 24: 102},
		{8: 101, 101, 11: 101, 101, 15: 101, 24: 101},
		{8: 100, 100, 11: 100, 100, 15: 100, 24: 100},
		{8: 99, 99, 11: 99, 99, 15: 99, 24: 99},
		// 315
		{8: 98, 98, 11: 98, 98, 15: 98, 24: 98},
		{8: 97, 97, 11: 97, 97, 15: 97, 24: 97},
		{8: 96, 96, 11: 96, 96, 15: 96, 24: 96},
		{106, 106, 106, 106, 106, 106, 106, 106},
		{8: 223, 221, 11: 224, 222, 15: 182, 19: 181, 21: 480, 24: 77},
		// 320
		{24: 464, 88: 481},
		{108, 108, 108, 108, 108, 108, 108, 108},
		{28: 503},
		{115: 484},
		{8: 376, 381, 379, 487, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 485, 97: 486},
		// 325
		{3: 500, 23: 391},
		{10: 492},
		{9: 386, 37: 187, 39: 188, 203, 197, 199, 488, 200, 47: 206, 205, 50: 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198},
		{16: 489},
		{151, 3: 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 490, 172, 170, 171},
		// 330
		{491},
		{143, 143, 143, 4: 143, 143, 143},
		{12: 493},
		{12: 494},
		{10: 495},
		// 335
		{2: 496},
		{3: 497},
		{151, 3: 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 498, 172, 170, 171},
		{499},
		{144, 144, 144, 4: 144, 144, 144},
		// 340
		{151, 3: 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 501, 172, 170, 171},
		{502},
		{145, 145, 145, 4: 145, 145, 145},
		{9: 504},
		{18: 505},
		// 345
		{8: 246, 243, 244, 13: 245, 247, 26: 506},
		{3: 507},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 508},
		{3: 509, 23: 391},
		{7: 151, 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 510},
		// 350
		{7: 511},
		{7: 512},
		{3: 513},
		{151, 3: 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 514, 172, 170, 171},
		{515},
		// 355
		{146, 146, 146, 4: 146, 146, 146},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 517},
		{7: 518, 23: 391},
		{151, 3: 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 519, 172, 170, 171},
		{520},
		// 360
		{147, 147, 147, 4: 147, 147, 147},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 522},
		{23: 391, 25: 523},
		{111: 524},
		{1: 151, 3: 151, 151, 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 525, 172, 170, 171},
		// 365
		{1: 141, 4: 528, 526, 100: 527},
		{149, 149, 149, 4: 149, 149, 149},
		{1: 535},
		{92: 529},
		{8: 376, 381, 379, 380, 14: 383, 20: 375, 22: 382, 28: 378, 377, 374, 373, 34: 372, 77: 371, 85: 370, 369, 530},
		// 370
		{23: 391, 25: 531},
		{111: 532},
		{1: 151, 3: 151, 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 533, 172, 170, 171},
		{1: 141, 4: 528, 100: 534},
		{1: 142},
		// 375
		{3: 151, 5: 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 536, 172, 170, 171},
		{5: 537},
		{148, 148, 148, 4: 148, 148, 148},
		{151, 151, 151, 151, 151, 151, 151, 8: 185, 183, 11: 186, 184, 207, 15: 182, 18: 215, 181, 21: 214, 37: 187, 39: 188, 203, 197, 199, 166, 200, 177, 180, 206, 205, 178, 201, 191, 194, 193, 192, 190, 195, 196, 189, 202, 204, 198, 179, 165, 173, 176, 174, 175, 211, 208, 212, 210, 167, 213, 209, 216, 168, 78: 163, 164, 169, 539, 172, 170, 171},
		{157, 157, 157, 4: 157, 157, 157},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 119

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			internalIter := &assignNode{ASSIGN, "_internalIdx", &numNode{NUM, 0}}
			arr := yyS[yypt-3].node
			qRes := &assignNode{ASSIGN, "_internalRes", arr.execute()}
			varIter := &assignNode{ASSIGN, yyS[yypt-6].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}}}
			end := &assignNode{ASSIGN, "_internalEnd", &numNode{NUM, arr.execute().(array).getLength()}}
			init := &ast{ASSIGN, []node{internalIter, qRes, varIter, end}}

			cond := &comparatorNode{COMPARATOR, "<",
				&symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}},
				&symbolReferenceNode{REFERENCE, "_internalEnd", &numNode{NUM, 0}}}

			iterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}},
				&arithNode{ARITHMETIC, "+",
					&symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}},
					&numNode{NUM, 1}}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-6].s, &numNode{NUM, 0}},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset}}

			incr := &ast{ASSIGN, []node{varIterAssign, iterAssign}}

			yyVAL.node = &forNode{FOR, init, cond, incr, yyS[yypt-1].node}
		}
	case 18:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 19:
		{
			yyVAL.elifArr = nil
		}
	case 23:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 24:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 27:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 32:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 35:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 38:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 39:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 40:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 41:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 42:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 43:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}}
		}
	case 44:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &numNode{NUM, yyS[yypt-1].n}}
		}
	case 45:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}}
		}
	case 46:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-1].s}
		}
	case 47:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 48:
		{
			println("@State start")
		}
	case 52:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s)}}
		}
	case 53:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 54:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 55:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s)}}
		}
	case 56:
		{
			println("@State NT_DEL")
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 65:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 66:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 67:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 68:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 69:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 70:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 71:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 72:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 73:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 75:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 76:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 77:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 78:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 79:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 80:
		{
			yyVAL.s = ".."
		}
	case 81:
		{
			yyVAL.s = "-"
		}
	case 82:
		{
			yyVAL.s = ""
		}
	case 83:
		{
			yyVAL.s = ""
		}
	case 84:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 85:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 86:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 87:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 88:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 89:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 90:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 91:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 92:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 93:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 94:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 95:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 96:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}}
		}
	case 97:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 98:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 99:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 100:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", []interface{}{yyS[yypt-1].s}}
		}
	case 101:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 114:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 115:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 116:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 117:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 118:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 119:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 120:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 134:
		{
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val)}}
			println("Attribute Acquired")
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 136:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 137:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 139:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, dCatchNodePtr}
		}
	case 140:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &strNode{STR, yyS[yypt-1].s}}
		}
	case 141:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 143:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 144:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 145:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 146:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 147:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}}
		}
	case 148:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &numNode{NUM, yyS[yypt-1].n}}
		}
	case 149:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, yyS[yypt-3].n}}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 150:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 151:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 152:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{resMap(&x)}}
		}
	case 153:
		{
			if yyS[yypt-0].s != "" {
				yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
			} else {
				yyVAL.s = yyS[yypt-1].s
			}
		}
	case 154:
		{
			yyVAL.s = ""
		}
	case 155:
		{
			x := []interface{}{yyS[yypt-1].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 156:
		{
			x := []interface{}{yyS[yypt-2].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 157:
		{
			yyVAL.arr = nil
		}
	case 158:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 159:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
