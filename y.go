// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

func resMap(x *string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch resarr[i] {
			case "id", "name", "category", "parentID",
				"description", "domain", "parentid", "parentId":
				res[resarr[i]] = resarr[i+1]

			default:
				attrs[resarr[i]] = resarr[i+1]
			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

type yySymType struct {
	yys int
	n   int
	s   string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault        = 57395
	yyEofCode        = 57344
	TOKEN_ATTR       = 57356
	TOKEN_ATTRSPEC   = 57389
	TOKEN_BASHTYPE   = 57364
	TOKEN_BLDG       = 57350
	TOKEN_CD         = 57370
	TOKEN_CLR        = 57372
	TOKEN_CMDFLAG    = 57366
	TOKEN_CREATE     = 57359
	TOKEN_DELETE     = 57362
	TOKEN_DEVICE     = 57353
	TOKEN_DOC        = 57369
	TOKEN_EQUAL      = 57365
	TOKEN_EXIT       = 57368
	TOKEN_GET        = 57360
	TOKEN_GREP       = 57373
	TOKEN_LS         = 57374
	TOKEN_LSBLDG     = 57379
	TOKEN_LSDEV      = 57382
	TOKEN_LSOG       = 57376
	TOKEN_LSRACK     = 57381
	TOKEN_LSROOM     = 57380
	TOKEN_LSSITE     = 57378
	TOKEN_LSSUBDEV   = 57383
	TOKEN_LSSUBDEV1  = 57384
	TOKEN_LSTEN      = 57377
	TOKEN_NUM        = 57346
	TOKEN_OCBLDG     = 57385
	TOKEN_OCDEL      = 57358
	TOKEN_OCDEV      = 57386
	TOKEN_OCPSPEC    = 57394
	TOKEN_OCRACK     = 57387
	TOKEN_OCROOM     = 57388
	TOKEN_OCSDEV     = 57392
	TOKEN_OCSDEV1    = 57393
	TOKEN_OCSITE     = 57390
	TOKEN_OCTENANT   = 57391
	TOKEN_PLUS       = 57357
	TOKEN_PWD        = 57371
	TOKEN_RACK       = 57352
	TOKEN_ROOM       = 57351
	TOKEN_SEARCH     = 57363
	TOKEN_SITE       = 57349
	TOKEN_SLASH      = 57367
	TOKEN_SUBDEVICE  = 57354
	TOKEN_SUBDEVICE1 = 57355
	TOKEN_TENANT     = 57348
	TOKEN_TREE       = 57375
	TOKEN_UPDATE     = 57361
	TOKEN_WORD       = 57347
	yyErrCode        = 57345

	yyMaxDepth = 200
	yyTabOfs   = -82
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57344: 0,  // $end (86x)
		57347: 1,  // TOKEN_WORD (65x)
		57389: 2,  // TOKEN_ATTRSPEC (38x)
		57367: 3,  // TOKEN_SLASH (38x)
		57409: 4,  // P1 (30x)
		57408: 5,  // P (28x)
		57356: 6,  // TOKEN_ATTR (23x)
		57394: 7,  // TOKEN_OCPSPEC (12x)
		57346: 8,  // TOKEN_NUM (9x)
		57398: 9,  // F (6x)
		57350: 10, // TOKEN_BLDG (3x)
		57353: 11, // TOKEN_DEVICE (3x)
		57358: 12, // TOKEN_OCDEL (3x)
		57357: 13, // TOKEN_PLUS (3x)
		57352: 14, // TOKEN_RACK (3x)
		57351: 15, // TOKEN_ROOM (3x)
		57349: 16, // TOKEN_SITE (3x)
		57348: 17, // TOKEN_TENANT (3x)
		57397: 18, // E (2x)
		57407: 19, // ORIENTN (2x)
		57370: 20, // TOKEN_CD (2x)
		57359: 21, // TOKEN_CREATE (2x)
		57362: 22, // TOKEN_DELETE (2x)
		57360: 23, // TOKEN_GET (2x)
		57374: 24, // TOKEN_LS (2x)
		57376: 25, // TOKEN_LSOG (2x)
		57354: 26, // TOKEN_SUBDEVICE (2x)
		57355: 27, // TOKEN_SUBDEVICE1 (2x)
		57375: 28, // TOKEN_TREE (2x)
		57361: 29, // TOKEN_UPDATE (2x)
		57396: 30, // BASH (1x)
		57399: 31, // K (1x)
		57400: 32, // NT_CREATE (1x)
		57401: 33, // NT_DEL (1x)
		57402: 34, // NT_GET (1x)
		57403: 35, // NT_UPDATE (1x)
		57404: 36, // OCCR (1x)
		57405: 37, // OCDEL (1x)
		57406: 38, // OCLISYNTX (1x)
		57410: 39, // Q (1x)
		57412: 40, // start (1x)
		57372: 41, // TOKEN_CLR (1x)
		57366: 42, // TOKEN_CMDFLAG (1x)
		57369: 43, // TOKEN_DOC (1x)
		57365: 44, // TOKEN_EQUAL (1x)
		57368: 45, // TOKEN_EXIT (1x)
		57373: 46, // TOKEN_GREP (1x)
		57379: 47, // TOKEN_LSBLDG (1x)
		57382: 48, // TOKEN_LSDEV (1x)
		57381: 49, // TOKEN_LSRACK (1x)
		57380: 50, // TOKEN_LSROOM (1x)
		57378: 51, // TOKEN_LSSITE (1x)
		57383: 52, // TOKEN_LSSUBDEV (1x)
		57384: 53, // TOKEN_LSSUBDEV1 (1x)
		57377: 54, // TOKEN_LSTEN (1x)
		57385: 55, // TOKEN_OCBLDG (1x)
		57386: 56, // TOKEN_OCDEV (1x)
		57387: 57, // TOKEN_OCRACK (1x)
		57388: 58, // TOKEN_OCROOM (1x)
		57390: 59, // TOKEN_OCSITE (1x)
		57391: 60, // TOKEN_OCTENANT (1x)
		57371: 61, // TOKEN_PWD (1x)
		57411: 62, // WORDORNUM (1x)
		57395: 63, // $default (0x)
		57345: 64, // error (0x)
		57364: 65, // TOKEN_BASHTYPE (0x)
		57392: 66, // TOKEN_OCSDEV (0x)
		57393: 67, // TOKEN_OCSDEV1 (0x)
		57363: 68, // TOKEN_SEARCH (0x)
	}

	yySymNames = []string{
		"$end",
		"TOKEN_WORD",
		"TOKEN_ATTRSPEC",
		"TOKEN_SLASH",
		"P1",
		"P",
		"TOKEN_ATTR",
		"TOKEN_OCPSPEC",
		"TOKEN_NUM",
		"F",
		"TOKEN_BLDG",
		"TOKEN_DEVICE",
		"TOKEN_OCDEL",
		"TOKEN_PLUS",
		"TOKEN_RACK",
		"TOKEN_ROOM",
		"TOKEN_SITE",
		"TOKEN_TENANT",
		"E",
		"ORIENTN",
		"TOKEN_CD",
		"TOKEN_CREATE",
		"TOKEN_DELETE",
		"TOKEN_GET",
		"TOKEN_LS",
		"TOKEN_LSOG",
		"TOKEN_SUBDEVICE",
		"TOKEN_SUBDEVICE1",
		"TOKEN_TREE",
		"TOKEN_UPDATE",
		"BASH",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCR",
		"OCDEL",
		"OCLISYNTX",
		"Q",
		"start",
		"TOKEN_CLR",
		"TOKEN_CMDFLAG",
		"TOKEN_DOC",
		"TOKEN_EQUAL",
		"TOKEN_EXIT",
		"TOKEN_GREP",
		"TOKEN_LSBLDG",
		"TOKEN_LSDEV",
		"TOKEN_LSRACK",
		"TOKEN_LSROOM",
		"TOKEN_LSSITE",
		"TOKEN_LSSUBDEV",
		"TOKEN_LSSUBDEV1",
		"TOKEN_LSTEN",
		"TOKEN_OCBLDG",
		"TOKEN_OCDEV",
		"TOKEN_OCRACK",
		"TOKEN_OCROOM",
		"TOKEN_OCSITE",
		"TOKEN_OCTENANT",
		"TOKEN_PWD",
		"WORDORNUM",
		"$default",
		"error",
		"TOKEN_BASHTYPE",
		"TOKEN_OCSDEV",
		"TOKEN_OCSDEV1",
		"TOKEN_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {40, 1},
		2:  {40, 1},
		3:  {40, 1},
		4:  {31, 1},
		5:  {31, 1},
		6:  {31, 1},
		7:  {31, 1},
		8:  {32, 3},
		9:  {32, 4},
		10: {34, 1},
		11: {34, 2},
		12: {34, 3},
		13: {35, 2},
		14: {35, 3},
		15: {33, 2},
		16: {18, 1},
		17: {18, 1},
		18: {18, 1},
		19: {18, 1},
		20: {18, 1},
		21: {18, 1},
		22: {18, 1},
		23: {18, 1},
		24: {19, 1},
		25: {19, 1},
		26: {19, 0},
		27: {62, 1},
		28: {62, 1},
		29: {62, 4},
		30: {9, 4},
		31: {9, 3},
		32: {5, 1},
		33: {5, 2},
		34: {4, 3},
		35: {4, 1},
		36: {4, 0},
		37: {39, 3},
		38: {39, 2},
		39: {39, 2},
		40: {39, 2},
		41: {39, 2},
		42: {39, 2},
		43: {39, 2},
		44: {39, 2},
		45: {39, 2},
		46: {39, 2},
		47: {39, 2},
		48: {39, 2},
		49: {39, 2},
		50: {39, 3},
		51: {39, 1},
		52: {30, 1},
		53: {30, 1},
		54: {30, 1},
		55: {30, 1},
		56: {30, 1},
		57: {30, 1},
		58: {30, 2},
		59: {30, 2},
		60: {30, 2},
		61: {30, 2},
		62: {30, 2},
		63: {30, 2},
		64: {30, 2},
		65: {30, 2},
		66: {30, 2},
		67: {38, 2},
		68: {38, 1},
		69: {36, 5},
		70: {36, 5},
		71: {36, 5},
		72: {36, 5},
		73: {36, 7},
		74: {36, 7},
		75: {36, 7},
		76: {36, 7},
		77: {36, 7},
		78: {36, 7},
		79: {36, 7},
		80: {36, 7},
		81: {37, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [173][]uint16{
		// 0
		{12: 115, 113, 20: 95, 91, 94, 92, 96, 109, 28: 105, 93, 106, 84, 87, 90, 88, 89, 37: 114, 86, 85, 83, 107, 43: 112, 45: 111, 108, 99, 102, 101, 100, 98, 103, 104, 97, 61: 110},
		{82},
		{81},
		{80},
		{79},
		// 5
		{78},
		{77},
		{76},
		{75},
		{10: 244, 247, 14: 246, 245, 243, 242, 251, 26: 248, 249},
		// 10
		{72, 118, 3: 117, 116, 240, 10: 244, 247, 14: 246, 245, 243, 242, 241, 26: 248, 249},
		{1: 118, 3: 117, 116, 226, 227, 9: 225},
		{46, 118, 3: 117, 116, 224},
		{46, 221, 3: 117, 116, 222},
		{46, 118, 3: 117, 116, 220},
		// 15
		{46, 118, 3: 117, 116, 219},
		{46, 118, 3: 117, 116, 218},
		{46, 118, 3: 117, 116, 217},
		{46, 118, 3: 117, 116, 216},
		{46, 118, 3: 117, 116, 215},
		// 20
		{46, 118, 3: 117, 116, 214},
		{46, 118, 3: 117, 116, 213},
		{46, 118, 3: 117, 116, 212},
		{46, 118, 3: 117, 116, 210, 8: 209},
		{31},
		// 25
		{30},
		{29},
		{28},
		{27},
		{26},
		// 30
		{25, 206, 20: 201, 202, 205, 203, 200, 208, 28: 207, 204},
		{10: 129, 135, 14: 133, 131, 127, 125, 36: 123, 55: 128, 134, 132, 130, 126, 124},
		{14},
		{46, 118, 3: 117, 116, 119},
		{50, 2: 50, 6: 50, 8: 50},
		// 35
		{46, 118, 46, 4: 122, 6: 46, 8: 46},
		{47, 2: 47, 120, 6: 47, 8: 47},
		{1},
		{46, 118, 46, 4: 121, 6: 46, 8: 46},
		{48, 2: 48, 6: 48, 8: 48},
		// 40
		{49, 2: 49, 6: 49, 8: 49},
		{15},
		{7: 196},
		{7: 192},
		{7: 188},
		// 45
		{7: 184},
		{7: 178},
		{7: 172},
		{7: 166},
		{7: 160},
		// 50
		{7: 154},
		{7: 148},
		{7: 142},
		{7: 136},
		{1: 118, 46, 117, 116, 137},
		// 55
		{2: 138},
		{1: 139},
		{2: 140},
		{1: 141},
		{2},
		// 60
		{1: 118, 46, 117, 116, 143},
		{2: 144},
		{1: 145},
		{2: 146},
		{1: 147},
		// 65
		{3},
		{1: 118, 46, 117, 116, 149},
		{2: 150},
		{1: 151},
		{2: 152},
		// 70
		{1: 153},
		{4},
		{1: 118, 46, 117, 116, 155},
		{2: 156},
		{1: 157},
		// 75
		{2: 158},
		{1: 159},
		{5},
		{1: 118, 46, 117, 116, 161},
		{2: 162},
		// 80
		{1: 163},
		{2: 164},
		{1: 165},
		{6},
		{1: 118, 46, 117, 116, 167},
		// 85
		{2: 168},
		{1: 169},
		{2: 170},
		{1: 171},
		{7},
		// 90
		{1: 118, 46, 117, 116, 173},
		{2: 174},
		{1: 175},
		{2: 176},
		{1: 177},
		// 95
		{8},
		{1: 118, 46, 117, 116, 179},
		{2: 180},
		{1: 181},
		{2: 182},
		// 100
		{1: 183},
		{9},
		{1: 118, 46, 117, 116, 185},
		{2: 186},
		{1: 187},
		// 105
		{10},
		{1: 118, 46, 117, 116, 189},
		{2: 190},
		{1: 191},
		{11},
		// 110
		{1: 118, 46, 117, 116, 193},
		{2: 194},
		{1: 195},
		{12},
		{1: 118, 46, 117, 116, 197},
		// 115
		{2: 198},
		{1: 199},
		{13},
		{24},
		{23},
		// 120
		{22},
		{21},
		{20},
		{19},
		{18},
		// 125
		{17},
		{16},
		{34},
		{33, 8: 211},
		{32},
		// 130
		{35},
		{36},
		{37},
		{38},
		{39},
		// 135
		{40},
		{41},
		{42},
		{43},
		{47, 3: 120, 42: 223},
		// 140
		{44},
		{45},
		{67},
		{69},
		{6: 227, 9: 239},
		// 145
		{44: 228},
		{1: 231, 8: 232, 12: 230, 229, 19: 233, 62: 234},
		{1: 58},
		{1: 57},
		{55, 6: 55},
		// 150
		{54, 6: 54},
		{1: 236},
		{51, 6: 227, 9: 235},
		{52},
		{1: 56, 12: 230, 229, 19: 237},
		// 155
		{1: 238},
		{53, 6: 53},
		{68},
		{71},
		{6: 227, 9: 250},
		// 160
		{1: 66, 3: 66, 6: 66},
		{1: 65, 3: 65, 6: 65},
		{1: 64, 3: 64, 6: 64},
		{1: 63, 3: 63, 6: 63},
		{1: 62, 3: 62, 6: 62},
		// 165
		{1: 61, 3: 61, 6: 61},
		{1: 60, 3: 60, 6: 60},
		{1: 59, 3: 59, 6: 59},
		{70},
		{1: 118, 3: 117, 116, 253, 227, 9: 252},
		// 170
		{74},
		{6: 227, 9: 254},
		{73},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 64

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 4:
		{
			println("@State start")
		}
	case 8:
		{
			cmd.PostObj(yyS[yypt-1].s, "", resMap(&yyS[yypt-0].s)) /*println("@State NT_CR");*/
		}
	case 9:
		{
			yyVAL.s = yyS[yypt-0].s /*println("Finally: "+$$);*/
			cmd.Disp(resMap(&yyS[yypt-0].s))
			cmd.PostObj(yyS[yypt-2].s, yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 10:
		{
			println("@State NT_GET")
			cmd.GetObject("")
		}
	case 11:
		{
			cmd.GetObject(yyS[yypt-0].s)
		}
	case 12:
		{ /*cmd.Disp(resMap(&$4)); */
			cmd.SearchObjects(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 13:
		{
			println("@State NT_UPD")
			cmd.UpdateObj("", resMap(&yyS[yypt-0].s))
		}
	case 14:
		{
			yyVAL.s = yyS[yypt-0].s /*cmd.Disp(resMap(&$4));*/
			cmd.UpdateObj(yyS[yypt-1].s, resMap(&yyS[yypt-0].s))
		}
	case 15:
		{
			println("@State NT_DEL")
			cmd.DeleteObj(yyS[yypt-0].s)
		}
	case 24:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 25:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 26:
		{
			yyVAL.s = ""
		}
	case 27:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 28:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
		}
	case 29:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
		}
	case 30:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			println("So we got: ", yyVAL.s)
		}
	case 31:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 33:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 34:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 35:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 36:
		{
			yyVAL.s = ""
		}
	case 38:
		{
			cmd.CD(yyS[yypt-0].s)
		}
	case 39:
		{
			cmd.LS(yyS[yypt-0].s)
		}
	case 40:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 0)
		}
	case 41:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 1)
		}
	case 42:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 2)
		}
	case 43:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 3)
		}
	case 44:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 4)
		}
	case 45:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 5)
		}
	case 46:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 6)
		}
	case 47:
		{
			cmd.LSOBJECT(yyS[yypt-0].s, 7)
		}
	case 48:
		{
			cmd.Tree("", yyS[yypt-0].n)
		}
	case 49:
		{
			cmd.Tree(yyS[yypt-0].s, 0)
		}
	case 50:
		{
			cmd.Tree(yyS[yypt-1].s, yyS[yypt-0].n)
		}
	case 51:
		{
			cmd.Execute()
		}
	case 54:
		{
			cmd.LSOG()
		}
	case 55:
		{
			cmd.PWD()
		}
	case 56:
		{
			cmd.Exit()
		}
	case 57:
		{
			cmd.Help("")
		}
	case 58:
		{
			cmd.Help("ls")
		}
	case 59:
		{
			cmd.Help("cd")
		}
	case 60:
		{
			cmd.Help("create")
		}
	case 61:
		{
			cmd.Help("gt")
		}
	case 62:
		{
			cmd.Help("update")
		}
	case 63:
		{
			cmd.Help("delete")
		}
	case 64:
		{
			cmd.Help(yyS[yypt-0].s)
		}
	case 65:
		{
			cmd.Help("tree")
		}
	case 66:
		{
			cmd.Help("lsog")
		}
	case 69:
		{
			println("You need to give more attrs")
		}
	case 70:
		{
			println("You need to give more attrs")
		}
	case 71:
		{
			println("You need to give more attrs")
		}
	case 72:
		{
			println("You need to give more attrs")
		}
	case 73:
		{
			println("You need to give more attrs")
		}
	case 74:
		{
			println("You need to give more attrs")
		}
	case 75:
		{
			println("You need to give more attrs")
		}
	case 76:
		{
			println("You need to give more attrs")
		}
	case 77:
		{
			println("You need to give more attrs")
		}
	case 78:
		{
			println("You need to give more attrs")
		}
	case 79:
		{
			println("You need to give more attrs")
		}
	case 80:
		{
			println("You need to give more attrs")
		}
	case 81:
		{
			println()
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
