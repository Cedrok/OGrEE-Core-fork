// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		if input[idx].(string) == "false" {
			x := map[int]interface{}{0: &boolNode{BOOL, false}}
			res = append(res, x)
		} else if input[idx].(string) == "true" {
			x := map[int]interface{}{0: &boolNode{BOOL, true}}
			res = append(res, x)
		} else if v, e := strconv.Atoi(input[idx].(string)); e == nil {
			x := map[int]interface{}{0: &numNode{NUM, v}}
			res = append(res, x)
		} else {
			x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
			res = append(res, x)
		}
	}
	return res
}

//This func helps to build the correct map[str]interface{}
//based on the input string x
func retMapInf(x string, y interface{}) map[string]interface{} {
	switch x {
	case "id", "name", "category", "parentID",
		"description", "domain", "parentid", "parentId":
		return map[string]interface{}{x: y}

	default:
		return map[string]interface{}{
			"attributes": map[string]interface{}{x: y}}
	}
}

func resMap(x *string, ent string) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if i+1 < len(resarr) {
			switch ent {
			case "sensor", "group":
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "type",
					"parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "room_template":
				switch resarr[i] {
				case "id", "slug", "orientation", "separators",
					"tiles", "colors", "aisles", "sizeWDHm",
					"technicalArea", "reservedArea":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "obj_template":
				switch resarr[i] {
				case "id", "slug", "description", "category",
					"slots", "colors", "components", "sizeWDHmm",
					"fbxModel":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			default:
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			}
			i += 2
		}
	}
	res["attributes"] = attrs
	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_", cmd.State.CurrPath, 1)
}

func auxGetNode(path string) string {
	stk := cmd.StrToStack(path)
	nd := cmd.FindNodeInTree(&cmd.State.TreeHierarchy, stk)
	if nd != nil {
		return cmd.EntityToString((*nd).Entity)
	} else {
		println("Error while finding object in path")
	}
	return ""
}

//Gets node from Tree Hierarchy using a map[string]interface
func getNodeFromMapInf(x map[string]interface{}) *cmd.Node {
	ent := x["category"]
	pid, _ := x["parentId"].(string)
	id, _ := x["id"].(string)

	entNum := cmd.EntityStrToInt(ent.(string))
	nodes := cmd.GetNodes(&cmd.State.TreeHierarchy, entNum)
	for i := range nodes {
		if nodes[i].PID == pid && nodes[i].ID == id {
			return nodes[i]
		}
	}
	return nil
}

func genNodeFromCommonRes(x node) node {
	val := x.execute()
	switch val.(type) {
	case string:
		return &strNode{STR, val.(string)}

	case []map[string]interface{}:
		return &jsonObjArrNode{JSONND,
			len(val.([]map[string]interface{})), val.([]map[string]interface{})}
	}
	return nil
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault     = 57438
	yyEofCode     = 57344
	TOK_AC        = 57357
	TOK_AISLE     = 57360
	TOK_AND       = 57419
	TOK_ATTRSPEC  = 57396
	TOK_BASHTYPE  = 57373
	TOK_BLDG      = 57350
	TOK_BOOL      = 57367
	TOK_CABINET   = 57358
	TOK_CD        = 57379
	TOK_CLR       = 57381
	TOK_CMDFLAG   = 57375
	TOK_CMDS      = 57405
	TOK_COL       = 57399
	TOK_COMMA     = 57403
	TOK_CORIDOR   = 57354
	TOK_CREATE    = 57368
	TOK_DELETE    = 57371
	TOK_DEREF     = 57408
	TOK_DEVICE    = 57353
	TOK_DIV       = 57424
	TOK_DO        = 57433
	TOK_DOC       = 57378
	TOK_DONE      = 57430
	TOK_DOT       = 57404
	TOK_ELIF      = 57432
	TOK_ELSE      = 57413
	TOK_EQUAL     = 57374
	TOK_EXIT      = 57377
	TOK_FI        = 57429
	TOK_FOR       = 57411
	TOK_GET       = 57369
	TOK_GREATER   = 57426
	TOK_GREP      = 57382
	TOK_GROUP     = 57355
	TOK_IF        = 57410
	TOK_IN        = 57420
	TOK_LBLOCK    = 57414
	TOK_LBRAC     = 57401
	TOK_LEN       = 57434
	TOK_LESS      = 57427
	TOK_LPAREN    = 57416
	TOK_LS        = 57383
	TOK_LSBLDG    = 57388
	TOK_LSDEV     = 57391
	TOK_LSOG      = 57385
	TOK_LSRACK    = 57390
	TOK_LSROOM    = 57389
	TOK_LSSITE    = 57387
	TOK_LSTEN     = 57386
	TOK_MULT      = 57425
	TOK_NOT       = 57423
	TOK_NUM       = 57346
	TOK_OBJ_TMPL  = 57364
	TOK_OCBLDG    = 57392
	TOK_OCCORIDOR = 57437
	TOK_OCDEL     = 57366
	TOK_OCDEV     = 57393
	TOK_OCGROUP   = 57435
	TOK_OCRACK    = 57394
	TOK_OCROOM    = 57395
	TOK_OCSITE    = 57397
	TOK_OCTENANT  = 57398
	TOK_OCWALL    = 57436
	TOK_OR        = 57418
	TOK_PANEL     = 57359
	TOK_PLUS      = 57365
	TOK_PRNT      = 57421
	TOK_PWD       = 57380
	TOK_QUOT      = 57422
	TOK_RACK      = 57352
	TOK_RBLOCK    = 57415
	TOK_RBRAC     = 57402
	TOK_ROOM      = 57351
	TOK_ROOM_TMPL = 57363
	TOK_RPAREN    = 57417
	TOK_SEARCH    = 57372
	TOK_SELECT    = 57400
	TOK_SEMICOL   = 57409
	TOK_SENSOR    = 57362
	TOK_SITE      = 57349
	TOK_SLASH     = 57376
	TOK_TEMPLATE  = 57406
	TOK_TENANT    = 57348
	TOK_THEN      = 57428
	TOK_TILE      = 57361
	TOK_TREE      = 57384
	TOK_UNSET     = 57431
	TOK_UPDATE    = 57370
	TOK_VAR       = 57407
	TOK_WALL      = 57356
	TOK_WHILE     = 57412
	TOK_WORD      = 57347
	yyErrCode     = 57345

	yyMaxDepth = 200
	yyTabOfs   = -210
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57430: 0,   // TOK_DONE (233x)
		57417: 1,   // TOK_RPAREN (231x)
		57413: 2,   // TOK_ELSE (227x)
		57402: 3,   // TOK_RBRAC (227x)
		57409: 4,   // TOK_SEMICOL (226x)
		57432: 5,   // TOK_ELIF (225x)
		57429: 6,   // TOK_FI (225x)
		57344: 7,   // $end (224x)
		57347: 8,   // TOK_WORD (191x)
		57366: 9,   // TOK_OCDEL (176x)
		57346: 10,  // TOK_NUM (98x)
		57365: 11,  // TOK_PLUS (97x)
		57408: 12,  // TOK_DEREF (94x)
		57367: 13,  // TOK_BOOL (80x)
		57404: 14,  // TOK_DOT (80x)
		57396: 15,  // TOK_ATTRSPEC (76x)
		57376: 16,  // TOK_SLASH (72x)
		57374: 17,  // TOK_EQUAL (56x)
		57465: 18,  // P1 (54x)
		57399: 19,  // TOK_COL (54x)
		57464: 20,  // P (51x)
		57423: 21,  // TOK_NOT (51x)
		57470: 22,  // WORDORNUM (49x)
		57422: 23,  // TOK_QUOT (45x)
		57418: 24,  // TOK_OR (39x)
		57415: 25,  // TOK_RBLOCK (37x)
		57416: 26,  // TOK_LPAREN (32x)
		57419: 27,  // TOK_AND (30x)
		57471: 28,  // factor (24x)
		57434: 29,  // TOK_LEN (24x)
		57477: 30,  // unary (23x)
		57476: 31,  // term (19x)
		57426: 32,  // TOK_GREATER (19x)
		57427: 33,  // TOK_LESS (19x)
		57424: 34,  // TOK_DIV (18x)
		57425: 35,  // TOK_MULT (18x)
		57472: 36,  // nex (17x)
		57379: 37,  // TOK_CD (17x)
		57383: 38,  // TOK_LS (17x)
		57388: 39,  // TOK_LSBLDG (17x)
		57391: 40,  // TOK_LSDEV (17x)
		57385: 41,  // TOK_LSOG (17x)
		57390: 42,  // TOK_LSRACK (17x)
		57389: 43,  // TOK_LSROOM (17x)
		57387: 44,  // TOK_LSSITE (17x)
		57386: 45,  // TOK_LSTEN (17x)
		57421: 46,  // TOK_PRNT (17x)
		57380: 47,  // TOK_PWD (17x)
		57384: 48,  // TOK_TREE (17x)
		57431: 49,  // TOK_UNSET (17x)
		57439: 50,  // BASH (16x)
		57466: 51,  // Q (16x)
		57381: 52,  // TOK_CLR (16x)
		57368: 53,  // TOK_CREATE (16x)
		57371: 54,  // TOK_DELETE (16x)
		57378: 55,  // TOK_DOC (16x)
		57377: 56,  // TOK_EXIT (16x)
		57369: 57,  // TOK_GET (16x)
		57382: 58,  // TOK_GREP (16x)
		57400: 59,  // TOK_SELECT (16x)
		57370: 60,  // TOK_UPDATE (16x)
		57450: 61,  // K (15x)
		57451: 62,  // NT_CREATE (15x)
		57452: 63,  // NT_DEL (15x)
		57453: 64,  // NT_GET (15x)
		57454: 65,  // NT_UPDATE (15x)
		57455: 66,  // OCCHOOSE (15x)
		57457: 67,  // OCDEL (15x)
		57459: 68,  // OCGET (15x)
		57461: 69,  // OCSEL (15x)
		57462: 70,  // OCUPDATE (15x)
		57458: 71,  // OCDOT (14x)
		57460: 72,  // OCLISYNTX (14x)
		57447: 73,  // FUNC (13x)
		57467: 74,  // REL (13x)
		57475: 75,  // stmnt (13x)
		57411: 76,  // TOK_FOR (13x)
		57410: 77,  // TOK_IF (13x)
		57412: 78,  // TOK_WHILE (13x)
		57441: 79,  // CTRL (12x)
		57463: 80,  // OPEN_STMT (12x)
		57473: 81,  // st2 (12x)
		57444: 82,  // EQAL (11x)
		57449: 83,  // JOIN (10x)
		57445: 84,  // EXPR (9x)
		57350: 85,  // TOK_BLDG (6x)
		57354: 86,  // TOK_CORIDOR (6x)
		57353: 87,  // TOK_DEVICE (6x)
		57355: 88,  // TOK_GROUP (6x)
		57352: 89,  // TOK_RACK (6x)
		57351: 90,  // TOK_ROOM (6x)
		57349: 91,  // TOK_SITE (6x)
		57348: 92,  // TOK_TENANT (6x)
		57446: 93,  // F (5x)
		57414: 94,  // TOK_LBLOCK (5x)
		57468: 95,  // STRARG (4x)
		57440: 96,  // CDORFG (3x)
		57442: 97,  // E (3x)
		57456: 98,  // OCCR (3x)
		57357: 99,  // TOK_AC (3x)
		57360: 100, // TOK_AISLE (3x)
		57358: 101, // TOK_CABINET (3x)
		57405: 102, // TOK_CMDS (3x)
		57401: 103, // TOK_LBRAC (3x)
		57364: 104, // TOK_OBJ_TMPL (3x)
		57392: 105, // TOK_OCBLDG (3x)
		57437: 106, // TOK_OCCORIDOR (3x)
		57393: 107, // TOK_OCDEV (3x)
		57435: 108, // TOK_OCGROUP (3x)
		57394: 109, // TOK_OCRACK (3x)
		57395: 110, // TOK_OCROOM (3x)
		57397: 111, // TOK_OCSITE (3x)
		57398: 112, // TOK_OCTENANT (3x)
		57436: 113, // TOK_OCWALL (3x)
		57359: 114, // TOK_PANEL (3x)
		57363: 115, // TOK_ROOM_TMPL (3x)
		57362: 116, // TOK_SENSOR (3x)
		57361: 117, // TOK_TILE (3x)
		57356: 118, // TOK_WALL (3x)
		57469: 119, // WNARG (3x)
		57443: 120, // EIF (2x)
		57448: 121, // GETOBJS (2x)
		57433: 122, // TOK_DO (2x)
		57406: 123, // TOK_TEMPLATE (2x)
		57428: 124, // TOK_THEN (2x)
		57407: 125, // TOK_VAR (2x)
		57474: 126, // start (1x)
		57403: 127, // TOK_COMMA (1x)
		57420: 128, // TOK_IN (1x)
		57438: 129, // $default (0x)
		57345: 130, // error (0x)
		57373: 131, // TOK_BASHTYPE (0x)
		57375: 132, // TOK_CMDFLAG (0x)
		57372: 133, // TOK_SEARCH (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_RPAREN",
		"TOK_ELSE",
		"TOK_RBRAC",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"$end",
		"TOK_WORD",
		"TOK_OCDEL",
		"TOK_NUM",
		"TOK_PLUS",
		"TOK_DEREF",
		"TOK_BOOL",
		"TOK_DOT",
		"TOK_ATTRSPEC",
		"TOK_SLASH",
		"TOK_EQUAL",
		"P1",
		"TOK_COL",
		"P",
		"TOK_NOT",
		"WORDORNUM",
		"TOK_QUOT",
		"TOK_OR",
		"TOK_RBLOCK",
		"TOK_LPAREN",
		"TOK_AND",
		"factor",
		"TOK_LEN",
		"unary",
		"term",
		"TOK_GREATER",
		"TOK_LESS",
		"TOK_DIV",
		"TOK_MULT",
		"nex",
		"TOK_CD",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_TREE",
		"TOK_UNSET",
		"BASH",
		"Q",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_SELECT",
		"TOK_UPDATE",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCGET",
		"OCSEL",
		"OCUPDATE",
		"OCDOT",
		"OCLISYNTX",
		"FUNC",
		"REL",
		"stmnt",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"EQAL",
		"JOIN",
		"EXPR",
		"TOK_BLDG",
		"TOK_CORIDOR",
		"TOK_DEVICE",
		"TOK_GROUP",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_SITE",
		"TOK_TENANT",
		"F",
		"TOK_LBLOCK",
		"STRARG",
		"CDORFG",
		"E",
		"OCCR",
		"TOK_AC",
		"TOK_AISLE",
		"TOK_CABINET",
		"TOK_CMDS",
		"TOK_LBRAC",
		"TOK_OBJ_TMPL",
		"TOK_OCBLDG",
		"TOK_OCCORIDOR",
		"TOK_OCDEV",
		"TOK_OCGROUP",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_OCWALL",
		"TOK_PANEL",
		"TOK_ROOM_TMPL",
		"TOK_SENSOR",
		"TOK_TILE",
		"TOK_WALL",
		"WNARG",
		"EIF",
		"GETOBJS",
		"TOK_DO",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"start",
		"TOK_COMMA",
		"TOK_IN",
		"$default",
		"error",
		"TOK_BASHTYPE",
		"TOK_CMDFLAG",
		"TOK_SEARCH",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {126, 1},
		2:   {81, 1},
		3:   {81, 3},
		4:   {81, 1},
		5:   {75, 1},
		6:   {75, 1},
		7:   {75, 1},
		8:   {75, 1},
		9:   {75, 0},
		10:  {79, 1},
		11:  {80, 7},
		12:  {80, 10},
		13:  {80, 6},
		14:  {80, 15},
		15:  {80, 7},
		16:  {80, 12},
		17:  {80, 10},
		18:  {80, 10},
		19:  {120, 7},
		20:  {120, 0},
		21:  {84, 3},
		22:  {84, 1},
		23:  {83, 3},
		24:  {83, 1},
		25:  {82, 4},
		26:  {82, 4},
		27:  {82, 1},
		28:  {74, 3},
		29:  {74, 4},
		30:  {74, 4},
		31:  {74, 3},
		32:  {74, 1},
		33:  {36, 3},
		34:  {36, 3},
		35:  {36, 1},
		36:  {31, 3},
		37:  {31, 3},
		38:  {31, 1},
		39:  {30, 2},
		40:  {30, 2},
		41:  {30, 1},
		42:  {28, 3},
		43:  {28, 1},
		44:  {28, 5},
		45:  {28, 2},
		46:  {28, 5},
		47:  {28, 4},
		48:  {28, 1},
		49:  {28, 3},
		50:  {28, 1},
		51:  {61, 1},
		52:  {61, 1},
		53:  {61, 1},
		54:  {61, 1},
		55:  {62, 4},
		56:  {64, 2},
		57:  {64, 3},
		58:  {65, 3},
		59:  {63, 2},
		60:  {97, 1},
		61:  {97, 1},
		62:  {97, 1},
		63:  {97, 1},
		64:  {97, 1},
		65:  {97, 1},
		66:  {97, 1},
		67:  {97, 1},
		68:  {97, 1},
		69:  {97, 1},
		70:  {97, 1},
		71:  {97, 1},
		72:  {97, 1},
		73:  {97, 1},
		74:  {97, 1},
		75:  {97, 1},
		76:  {22, 1},
		77:  {22, 1},
		78:  {22, 4},
		79:  {22, 4},
		80:  {22, 4},
		81:  {22, 4},
		82:  {22, 1},
		83:  {93, 4},
		84:  {93, 3},
		85:  {93, 3},
		86:  {93, 4},
		87:  {20, 1},
		88:  {20, 2},
		89:  {18, 3},
		90:  {18, 1},
		91:  {18, 4},
		92:  {18, 3},
		93:  {18, 2},
		94:  {18, 1},
		95:  {18, 2},
		96:  {18, 0},
		97:  {51, 2},
		98:  {51, 2},
		99:  {51, 2},
		100: {51, 2},
		101: {51, 2},
		102: {51, 2},
		103: {51, 2},
		104: {51, 2},
		105: {51, 2},
		106: {51, 3},
		107: {51, 4},
		108: {51, 1},
		109: {50, 1},
		110: {50, 1},
		111: {50, 4},
		112: {50, 1},
		113: {50, 1},
		114: {50, 1},
		115: {50, 1},
		116: {50, 2},
		117: {50, 2},
		118: {50, 2},
		119: {50, 2},
		120: {50, 2},
		121: {50, 2},
		122: {50, 2},
		123: {50, 2},
		124: {50, 2},
		125: {50, 2},
		126: {50, 2},
		127: {50, 2},
		128: {50, 2},
		129: {50, 2},
		130: {50, 2},
		131: {50, 2},
		132: {50, 2},
		133: {50, 2},
		134: {50, 2},
		135: {50, 2},
		136: {50, 2},
		137: {50, 2},
		138: {50, 2},
		139: {50, 2},
		140: {50, 3},
		141: {50, 3},
		142: {50, 3},
		143: {50, 2},
		144: {50, 2},
		145: {72, 2},
		146: {72, 1},
		147: {72, 1},
		148: {72, 1},
		149: {72, 1},
		150: {72, 1},
		151: {72, 1},
		152: {98, 5},
		153: {98, 5},
		154: {98, 5},
		155: {98, 5},
		156: {98, 7},
		157: {98, 7},
		158: {98, 7},
		159: {98, 7},
		160: {98, 7},
		161: {98, 7},
		162: {98, 7},
		163: {98, 7},
		164: {98, 11},
		165: {98, 11},
		166: {98, 6},
		167: {98, 6},
		168: {98, 9},
		169: {98, 9},
		170: {67, 2},
		171: {70, 5},
		172: {68, 2},
		173: {121, 3},
		174: {121, 1},
		175: {66, 4},
		176: {71, 6},
		177: {71, 8},
		178: {71, 8},
		179: {71, 9},
		180: {71, 9},
		181: {71, 10},
		182: {71, 9},
		183: {71, 9},
		184: {71, 9},
		185: {71, 9},
		186: {71, 9},
		187: {71, 4},
		188: {71, 4},
		189: {71, 6},
		190: {71, 6},
		191: {71, 6},
		192: {71, 2},
		193: {71, 7},
		194: {71, 5},
		195: {71, 5},
		196: {71, 7},
		197: {71, 8},
		198: {71, 4},
		199: {69, 1},
		200: {69, 5},
		201: {95, 2},
		202: {95, 0},
		203: {119, 2},
		204: {119, 4},
		205: {119, 0},
		206: {73, 6},
		207: {73, 1},
		208: {96, 3},
		209: {96, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [501][]uint16{
		// 0
		{4: 201, 7: 201, 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 212, 126: 211},
		{7: 210},
		{7: 209},
		{208, 2: 208, 208, 709, 208, 208, 208},
		{206, 2: 206, 206, 5: 206, 206, 206},
		// 5
		{205, 205, 205, 205, 205, 205, 205, 205},
		{204, 204, 204, 204, 204, 204, 204, 204},
		{203, 203, 203, 203, 203, 203, 203, 203},
		{202, 202, 202, 202, 202, 202, 202, 202},
		{200, 2: 200, 200, 5: 200, 200, 200},
		// 10
		{94: 692},
		{26: 687},
		{8: 647, 26: 646},
		{159, 159, 159, 159, 159, 159, 159, 159},
		{158, 158, 158, 158, 158, 158, 158, 158},
		// 15
		{157, 157, 157, 157, 157, 157, 157, 157},
		{156, 156, 156, 156, 156, 156, 156, 156},
		{85: 622, 632, 625, 633, 624, 623, 621, 620, 97: 643, 99: 626, 629, 628, 104: 634, 114: 627, 635, 631, 630},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 640, 85: 622, 632, 625, 633, 624, 623, 621, 620, 97: 641, 99: 626, 629, 628, 104: 634, 114: 627, 635, 631, 630},
		{8: 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 616},
		// 20
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 615},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 10: 123, 15: 123, 19: 123},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 114, 12: 272, 14: 270, 114, 18: 614, 114},
		{3, 3, 3, 3, 3, 3, 3, 3, 14: 285, 16: 284, 19: 120, 26: 609},
		{14: 281, 102: 561, 123: 562, 125: 560},
		// 25
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 116, 559},
		{8: 487},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 486},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 485},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 484},
		// 30
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 483},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 482},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 481},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 480},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 479},
		// 35
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 114, 12: 272, 14: 270, 16: 232, 18: 231, 20: 477},
		{9: 474},
		{102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100},
		// 40
		{23: 469},
		{98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 447, 462, 11: 464, 14: 463, 17: 465, 37: 442, 439, 458, 461, 455, 460, 459, 457, 456, 441, 440, 448, 452, 53: 443, 446, 57: 444, 59: 453, 445, 76: 451, 449, 450, 102: 454},
		// 45
		{85: 313, 321, 319, 323, 317, 315, 311, 309, 98: 307, 105: 312, 320, 318, 322, 316, 314, 310, 308, 324, 118: 325},
		{64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 63, 63, 63, 63, 63},
		{62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61},
		// 50
		{60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59},
		{19: 288},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 273, 103: 274},
		{11, 11, 11, 11, 11, 11, 11, 11, 14: 265},
		// 55
		{8: 266},
		{17: 267},
		{8: 268},
		{10, 10, 10, 10, 10, 10, 10, 10},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 10: 120, 14: 285, 120, 284, 19: 120},
		// 60
		{14: 281},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 10: 116, 15: 116, 19: 116},
		{8: 280},
		{38, 38, 38, 38, 38, 38, 38, 38},
		{8: 275, 121: 276},
		// 65
		{3: 36, 127: 278},
		{3: 277},
		{35, 35, 35, 35, 35, 35, 35, 35},
		{8: 275, 121: 279},
		{3: 37},
		// 70
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 10: 115, 15: 115, 19: 115},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 10: 117, 15: 117, 282, 19: 117},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 114, 12: 272, 14: 270, 114, 18: 283, 114},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 10: 119, 15: 119, 19: 119},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 114, 12: 272, 14: 270, 114, 18: 287, 114},
		// 75
		{8: 286},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 10: 118, 15: 118, 19: 118},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 10: 121, 15: 121, 19: 121},
		{8: 289},
		{17: 290},
		// 80
		{8: 291, 294, 292, 293, 13: 295, 22: 296},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 13: 134, 15: 134, 23: 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 13: 133, 15: 133, 23: 133},
		{8: 302},
		{8: 297},
		// 85
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 13: 128, 15: 128, 23: 128},
		{39, 39, 39, 39, 39, 39, 39, 39},
		{9: 298, 11: 299},
		{8: 301},
		{8: 300},
		// 90
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 13: 129, 15: 129, 23: 129},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 13: 130, 15: 130, 23: 130},
		{9: 304, 11: 303},
		{8: 306},
		{8: 305},
		// 95
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 13: 131, 15: 131, 23: 131},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 13: 132, 15: 132, 23: 132},
		{65, 65, 65, 65, 65, 65, 65, 65},
		{19: 435},
		{19: 431},
		// 100
		{19: 427},
		{19: 423},
		{19: 417},
		{19: 411},
		{19: 405},
		// 105
		{19: 399},
		{19: 393},
		{19: 387},
		{19: 381},
		{19: 375},
		// 110
		{19: 365},
		{19: 355},
		{19: 350},
		{19: 342},
		{19: 334},
		// 115
		{19: 326},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 327},
		{15: 328},
		{8: 291, 294, 292, 293, 13: 295, 22: 329},
		{15: 330},
		// 120
		{8: 291, 294, 292, 293, 13: 295, 22: 331},
		{15: 332},
		{8: 291, 294, 292, 293, 13: 295, 22: 333},
		{41, 41, 41, 41, 41, 41, 41, 41},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 335},
		// 125
		{15: 336},
		{8: 291, 294, 292, 293, 13: 295, 22: 337},
		{15: 338},
		{8: 291, 294, 292, 293, 13: 295, 22: 339},
		{15: 340},
		// 130
		{8: 291, 294, 292, 293, 13: 295, 22: 341},
		{42, 42, 42, 42, 42, 42, 42, 42},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 343},
		{15: 344},
		{8: 291, 294, 292, 293, 13: 295, 22: 345},
		// 135
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 347, 96: 346},
		{43, 43, 43, 43, 43, 43, 43, 43},
		{8: 291, 294, 292, 293, 13: 295, 22: 348},
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 347, 96: 349},
		{2, 2, 2, 2, 2, 2, 2, 2},
		// 140
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 351},
		{15: 352},
		{8: 291, 294, 292, 293, 13: 295, 22: 353},
		{1, 1, 1, 1, 1, 1, 1, 1, 15: 347, 96: 354},
		{44, 44, 44, 44, 44, 44, 44, 44},
		// 145
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 356},
		{15: 357},
		{8: 291, 294, 292, 293, 13: 295, 22: 358},
		{15: 359},
		{8: 291, 294, 292, 293, 13: 295, 22: 360},
		// 150
		{15: 361},
		{8: 291, 294, 292, 293, 13: 295, 22: 362},
		{15: 363},
		{8: 291, 294, 292, 293, 13: 295, 22: 364},
		{45, 45, 45, 45, 45, 45, 45, 45},
		// 155
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 366},
		{15: 367},
		{8: 291, 294, 292, 293, 13: 295, 22: 368},
		{15: 369},
		{8: 291, 294, 292, 293, 13: 295, 22: 370},
		// 160
		{15: 371},
		{8: 291, 294, 292, 293, 13: 295, 22: 372},
		{15: 373},
		{8: 291, 294, 292, 293, 13: 295, 22: 374},
		{46, 46, 46, 46, 46, 46, 46, 46},
		// 165
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 376},
		{15: 377},
		{8: 291, 294, 292, 293, 13: 295, 22: 378},
		{15: 379},
		{8: 291, 294, 292, 293, 13: 295, 22: 380},
		// 170
		{47, 47, 47, 47, 47, 47, 47, 47},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 382},
		{15: 383},
		{8: 291, 294, 292, 293, 13: 295, 22: 384},
		{15: 385},
		// 175
		{8: 291, 294, 292, 293, 13: 295, 22: 386},
		{48, 48, 48, 48, 48, 48, 48, 48},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 388},
		{15: 389},
		{8: 291, 294, 292, 293, 13: 295, 22: 390},
		// 180
		{15: 391},
		{8: 291, 294, 292, 293, 13: 295, 22: 392},
		{49, 49, 49, 49, 49, 49, 49, 49},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 394},
		{15: 395},
		// 185
		{8: 291, 294, 292, 293, 13: 295, 22: 396},
		{15: 397},
		{8: 291, 294, 292, 293, 13: 295, 22: 398},
		{50, 50, 50, 50, 50, 50, 50, 50},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 400},
		// 190
		{15: 401},
		{8: 291, 294, 292, 293, 13: 295, 22: 402},
		{15: 403},
		{8: 291, 294, 292, 293, 13: 295, 22: 404},
		{51, 51, 51, 51, 51, 51, 51, 51},
		// 195
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 406},
		{15: 407},
		{8: 291, 294, 292, 293, 13: 295, 22: 408},
		{15: 409},
		{8: 291, 294, 292, 293, 13: 295, 22: 410},
		// 200
		{52, 52, 52, 52, 52, 52, 52, 52},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 412},
		{15: 413},
		{8: 291, 294, 292, 293, 13: 295, 22: 414},
		{15: 415},
		// 205
		{8: 291, 294, 292, 293, 13: 295, 22: 416},
		{53, 53, 53, 53, 53, 53, 53, 53},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 418},
		{15: 419},
		{8: 291, 294, 292, 293, 13: 295, 22: 420},
		// 210
		{15: 421},
		{8: 291, 294, 292, 293, 13: 295, 22: 422},
		{54, 54, 54, 54, 54, 54, 54, 54},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 424},
		{15: 425},
		// 215
		{8: 291, 294, 292, 293, 13: 295, 22: 426},
		{55, 55, 55, 55, 55, 55, 55, 55},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 428},
		{15: 429},
		{8: 291, 294, 292, 293, 13: 295, 22: 430},
		// 220
		{56, 56, 56, 56, 56, 56, 56, 56},
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 432},
		{15: 433},
		{8: 291, 294, 292, 293, 13: 295, 22: 434},
		{57, 57, 57, 57, 57, 57, 57, 57},
		// 225
		{8: 269, 271, 12: 272, 14: 270, 114, 232, 18: 231, 20: 436},
		{15: 437},
		{8: 291, 294, 292, 293, 13: 295, 22: 438},
		{58, 58, 58, 58, 58, 58, 58, 58},
		{94, 94, 94, 94, 94, 94, 94, 94},
		// 230
		{93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91},
		{90, 90, 90, 90, 90, 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89},
		// 235
		{88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 84, 84, 84},
		// 240
		{83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 79, 79, 79, 79, 79, 79},
		// 245
		{78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74},
		// 250
		{73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 71, 71, 71, 71, 71},
		{102: 467, 123: 466, 125: 468},
		{67, 67, 67, 67, 67, 67, 67, 67},
		// 255
		{66, 66, 66, 66, 66, 66, 66, 66},
		{70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68},
		{8: 291, 294, 292, 293, 13: 295, 22: 471, 8, 95: 470},
		// 260
		{23: 473},
		{8: 291, 294, 292, 293, 13: 295, 22: 471, 8, 95: 472},
		{23: 9},
		{99, 99, 99, 99, 99, 99, 99, 99},
		{8: 475},
		// 265
		{8: 476},
		{103, 103, 103, 103, 103, 103, 103, 103},
		{105, 105, 105, 105, 105, 105, 105, 105, 10: 478},
		{104, 104, 104, 104, 104, 104, 104, 104},
		{106, 106, 106, 106, 106, 106, 106, 106},
		// 270
		{107, 107, 107, 107, 107, 107, 107, 107},
		{108, 108, 108, 108, 108, 108, 108, 108},
		{109, 109, 109, 109, 109, 109, 109, 109},
		{110, 110, 110, 110, 110, 110, 110, 110},
		{111, 111, 111, 111, 111, 111, 111, 111},
		// 275
		{112, 112, 112, 112, 112, 112, 112, 112},
		{113, 113, 113, 113, 113, 113, 113, 113},
		{18, 18, 18, 18, 18, 18, 18, 18, 17: 489, 19: 115, 94: 488},
		{8: 548, 10: 549},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 490},
		// 280
		{12, 12, 12, 12, 12, 12, 12, 12, 24: 519},
		{188, 188, 188, 188, 188, 188, 188, 188, 24: 188, 188, 27: 522},
		{186, 186, 186, 186, 186, 186, 186, 186, 17: 524, 21: 525, 24: 186, 186, 27: 186},
		{183, 183, 183, 183, 183, 183, 183, 183, 17: 183, 21: 183, 24: 183, 183, 27: 183},
		{178, 178, 178, 178, 178, 178, 178, 178, 9: 539, 11: 538, 17: 178, 21: 178, 24: 178, 178, 27: 178, 32: 537, 536},
		// 285
		{175, 175, 175, 175, 175, 175, 175, 175, 9: 175, 11: 175, 17: 175, 21: 175, 24: 175, 175, 27: 175, 32: 175, 175, 533, 532},
		{172, 172, 172, 172, 172, 172, 172, 172, 9: 172, 11: 172, 17: 172, 21: 172, 24: 172, 172, 27: 172, 32: 172, 172, 172, 172},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 531},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 530},
		{169, 169, 169, 169, 169, 169, 169, 169, 9: 169, 11: 169, 17: 169, 21: 169, 24: 169, 169, 27: 169, 32: 169, 169, 169, 169},
		// 290
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 518},
		{167, 167, 167, 167, 167, 167, 167, 167, 9: 167, 11: 167, 17: 167, 21: 167, 24: 167, 167, 27: 167, 32: 167, 167, 167, 167},
		{8: 512},
		{26: 509},
		{162, 162, 162, 162, 162, 162, 162, 162, 9: 162, 11: 162, 17: 162, 21: 162, 24: 162, 162, 27: 162, 32: 162, 162, 162, 162},
		// 295
		{8: 291, 294, 292, 293, 13: 295, 22: 471, 8, 95: 507},
		{160, 160, 160, 160, 160, 160, 160, 160, 9: 160, 11: 160, 17: 160, 21: 160, 24: 160, 160, 27: 160, 32: 160, 160, 160, 160},
		{23: 508},
		{161, 161, 161, 161, 161, 161, 161, 161, 9: 161, 11: 161, 17: 161, 21: 161, 24: 161, 161, 27: 161, 32: 161, 161, 161, 161},
		{8: 510},
		// 300
		{1: 511},
		{163, 163, 163, 163, 163, 163, 163, 163, 9: 163, 11: 163, 17: 163, 21: 163, 24: 163, 163, 27: 163, 32: 163, 163, 163, 163},
		{165, 165, 165, 165, 165, 165, 165, 165, 9: 165, 11: 165, 17: 165, 21: 165, 24: 165, 165, 27: 165, 32: 165, 165, 165, 165, 94: 513},
		{8: 514, 10: 515},
		{25: 517},
		// 305
		{25: 516},
		{164, 164, 164, 164, 164, 164, 164, 164, 9: 164, 11: 164, 17: 164, 21: 164, 24: 164, 164, 27: 164, 32: 164, 164, 164, 164},
		{166, 166, 166, 166, 166, 166, 166, 166, 9: 166, 11: 166, 17: 166, 21: 166, 24: 166, 166, 27: 166, 32: 166, 166, 166, 166},
		{1: 520, 24: 519},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 521},
		// 310
		{168, 168, 168, 168, 168, 168, 168, 168, 9: 168, 11: 168, 17: 168, 21: 168, 24: 168, 168, 27: 168, 32: 168, 168, 168, 168},
		{189, 189, 189, 189, 189, 189, 189, 189, 24: 189, 189, 27: 522},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 523},
		{187, 187, 187, 187, 187, 187, 187, 187, 17: 524, 21: 525, 24: 187, 187, 27: 187},
		{17: 528},
		// 315
		{17: 526},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 527},
		{184, 184, 184, 184, 184, 184, 184, 184, 17: 184, 21: 184, 24: 184, 184, 27: 184},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 529},
		{185, 185, 185, 185, 185, 185, 185, 185, 17: 185, 21: 185, 24: 185, 185, 27: 185},
		// 320
		{170, 170, 170, 170, 170, 170, 170, 170, 9: 170, 11: 170, 17: 170, 21: 170, 24: 170, 170, 27: 170, 32: 170, 170, 170, 170},
		{171, 171, 171, 171, 171, 171, 171, 171, 9: 171, 11: 171, 17: 171, 21: 171, 24: 171, 171, 27: 171, 32: 171, 171, 171, 171},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 535},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 534},
		{173, 173, 173, 173, 173, 173, 173, 173, 9: 173, 11: 173, 17: 173, 21: 173, 24: 173, 173, 27: 173, 32: 173, 173, 173, 173},
		// 325
		{174, 174, 174, 174, 174, 174, 174, 174, 9: 174, 11: 174, 17: 174, 21: 174, 24: 174, 174, 27: 174, 32: 174, 174, 174, 174},
		{8: 504, 498, 501, 12: 502, 506, 17: 546, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 545},
		{8: 504, 498, 501, 12: 502, 506, 17: 542, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 543},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 541},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 540},
		// 330
		{176, 176, 176, 176, 176, 176, 176, 176, 9: 176, 11: 176, 17: 176, 21: 176, 24: 176, 176, 27: 176, 32: 176, 176, 533, 532},
		{177, 177, 177, 177, 177, 177, 177, 177, 9: 177, 11: 177, 17: 177, 21: 177, 24: 177, 177, 27: 177, 32: 177, 177, 533, 532},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 544},
		{179, 179, 179, 179, 179, 179, 179, 179, 9: 539, 11: 538, 17: 179, 21: 179, 24: 179, 179, 27: 179},
		{180, 180, 180, 180, 180, 180, 180, 180, 9: 539, 11: 538, 17: 180, 21: 180, 24: 180, 180, 27: 180},
		// 335
		{182, 182, 182, 182, 182, 182, 182, 182, 9: 539, 11: 538, 17: 182, 21: 182, 24: 182, 182, 27: 182},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 547},
		{181, 181, 181, 181, 181, 181, 181, 181, 9: 539, 11: 538, 17: 181, 21: 181, 24: 181, 181, 27: 181},
		{25: 556},
		{25: 550},
		// 340
		{15, 15, 15, 15, 15, 15, 15, 15, 17: 551, 94: 552},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 555},
		{8: 553},
		{25: 554},
		{13, 13, 13, 13, 13, 13, 13, 13},
		// 345
		{14, 14, 14, 14, 14, 14, 14, 14, 24: 519},
		{16, 16, 16, 16, 16, 16, 16, 16, 17: 557},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 558},
		{17, 17, 17, 17, 17, 17, 17, 17, 24: 519},
		{40, 40, 40, 40, 40, 40, 40, 40},
		// 350
		{19: 567},
		{19: 565},
		{19: 563},
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 564},
		{22, 22, 22, 22, 22, 22, 22, 22},
		// 355
		{114, 114, 114, 114, 114, 114, 114, 114, 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 566},
		{23, 23, 23, 23, 23, 23, 23, 23},
		{8: 568},
		{17: 569},
		{8: 570, 572, 292, 571, 573, 295, 234, 16: 232, 263, 231, 114, 262, 22: 574, 575, 26: 576, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 577, 248, 227, 230, 254, 253, 228, 249, 264, 229, 578, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 579},
		// 360
		{134, 134, 134, 134, 134, 134, 134, 134, 14: 285, 16: 284, 19: 120},
		{8: 302, 85: 313, 321, 319, 323, 317, 315, 311, 309, 98: 307, 105: 312, 320, 318, 322, 316, 314, 310, 308, 324, 118: 325},
		{114, 114, 114, 114, 114, 114, 114, 114, 608, 271, 12: 272, 14: 270, 16: 232, 18: 231, 116, 559},
		{8: 487, 26: 590},
		{34, 34, 34, 34, 34, 34, 34, 34},
		// 365
		{8: 291, 294, 292, 293, 13: 295, 22: 471, 8, 95: 588},
		{1: 5, 8: 291, 294, 292, 293, 13: 295, 22: 581, 582, 119: 580},
		{21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19},
		// 370
		{1: 587},
		{1: 5, 8: 291, 294, 292, 293, 13: 295, 22: 581, 582, 119: 586},
		{8: 291, 294, 292, 293, 13: 295, 22: 583},
		{23: 584},
		{1: 5, 8: 291, 294, 292, 293, 13: 295, 22: 581, 582, 119: 585},
		// 375
		{1: 6},
		{1: 7},
		{32, 32, 32, 32, 32, 32, 32, 32},
		{23: 589},
		{33, 33, 33, 33, 33, 33, 33, 33},
		// 380
		{8: 269, 235, 11: 593, 272, 14: 270, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 592, 248, 227, 230, 254, 253, 228, 249, 264, 229, 591, 223, 226, 224, 225, 597, 594, 596, 598, 595},
		{1: 607},
		{1: 606},
		{85: 313, 321, 319, 323, 317, 315, 311, 309, 98: 604, 105: 312, 320, 318, 322, 316, 314, 310, 308, 324, 118: 325},
		{1: 603},
		// 385
		{1: 602},
		{1: 601},
		{1: 600},
		{1: 599},
		{24, 24, 24, 24, 24, 24, 24, 24},
		// 390
		{25, 25, 25, 25, 25, 25, 25, 25},
		{26, 26, 26, 26, 26, 26, 26, 26},
		{27, 27, 27, 27, 27, 27, 27, 27},
		{28, 28, 28, 28, 28, 28, 28, 28},
		{1: 605},
		// 395
		{29, 29, 29, 29, 29, 29, 29, 29},
		{30, 30, 30, 30, 30, 30, 30, 30},
		{31, 31, 31, 31, 31, 31, 31, 31},
		{120, 120, 120, 120, 120, 120, 120, 120, 9: 298, 11: 299, 14: 285, 16: 284},
		{1: 610},
		// 400
		{103: 611},
		{3: 201, 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 612},
		{3: 613},
		{4, 4, 4, 4, 4, 4, 4, 4},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 10: 122, 15: 122, 19: 122},
		// 405
		{151, 151, 151, 151, 151, 151, 151, 151},
		{8: 618, 93: 617},
		{152, 152, 152, 152, 152, 152, 152, 152},
		{17: 619},
		{8: 291, 294, 292, 293, 13: 295, 22: 636, 85: 622, 632, 625, 633, 624, 623, 621, 620, 97: 637, 99: 626, 629, 628, 104: 634, 114: 627, 635, 631, 630},
		// 410
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 12: 150, 14: 150, 16: 150},
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 12: 149, 14: 149, 16: 149},
		{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 12: 148, 14: 148, 16: 148},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 12: 147, 14: 147, 16: 147},
		{146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 12: 146, 14: 146, 16: 146},
		// 415
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 12: 145, 14: 145, 16: 145},
		{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 12: 144, 14: 144, 16: 144},
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 12: 143, 14: 143, 16: 143},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 12: 142, 14: 142, 16: 142},
		{141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 12: 141, 14: 141, 16: 141},
		// 420
		{140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 12: 140, 14: 140, 16: 140},
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 12: 139, 14: 139, 16: 139},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 12: 138, 14: 138, 16: 138},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 12: 137, 14: 137, 16: 137},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 12: 136, 14: 136, 16: 136},
		// 425
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 12: 135, 14: 135, 16: 135},
		{126, 126, 126, 126, 126, 126, 126, 126, 618, 93: 639},
		{125, 125, 125, 125, 125, 125, 125, 125, 618, 93: 638},
		{124, 124, 124, 124, 124, 124, 124, 124},
		{127, 127, 127, 127, 127, 127, 127, 127},
		// 430
		{154, 154, 154, 154, 154, 154, 154, 154},
		{8: 618, 93: 642},
		{153, 153, 153, 153, 153, 153, 153, 153},
		{8: 269, 271, 12: 272, 14: 270, 16: 232, 18: 231, 20: 644},
		{8: 618, 93: 645},
		// 435
		{155, 155, 155, 155, 155, 155, 155, 155},
		{26: 674},
		{128: 648},
		{8: 504, 498, 501, 12: 651, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 649, 103: 650},
		{4: 671, 24: 519},
		// 440
		{10: 663},
		{8: 512, 26: 652},
		{8: 504, 10: 501, 12: 502, 506, 23: 505, 26: 500, 28: 654, 503, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 653, 248, 55: 254, 253, 58: 249},
		{1: 659},
		{1: 655},
		// 445
		{122: 656},
		{201, 4: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 657},
		{658},
		{192, 2: 192, 192, 5: 192, 192, 192},
		{122: 660},
		// 450
		{201, 4: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 661},
		{662},
		{193, 2: 193, 193, 5: 193, 193, 193},
		{14: 664},
		{14: 665},
		// 455
		{10: 666},
		{3: 667},
		{4: 668},
		{201, 4: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 669},
		{670},
		// 460
		{194, 2: 194, 194, 5: 194, 194, 194},
		{201, 4: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 672},
		{673},
		{195, 2: 195, 195, 5: 195, 195, 195},
		{8: 675},
		// 465
		{17: 676},
		{8: 291, 294, 292, 293, 13: 295, 22: 677},
		{4: 678},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 679},
		{4: 680, 24: 519},
		// 470
		{1: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 681},
		{1: 682},
		{1: 683},
		{4: 684},
		{201, 4: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 685},
		// 475
		{686},
		{196, 2: 196, 196, 5: 196, 196, 196},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 688},
		{1: 689, 24: 519},
		{201, 4: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 690},
		// 480
		{691},
		{197, 2: 197, 197, 5: 197, 197, 197},
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 693},
		{24: 519, 694},
		{124: 695},
		// 485
		{2: 201, 4: 201, 201, 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 696},
		{2: 190, 5: 699, 697, 120: 698},
		{199, 2: 199, 199, 5: 199, 199, 199},
		{2: 706},
		{94: 700},
		// 490
		{8: 504, 498, 501, 12: 502, 506, 21: 497, 23: 505, 26: 500, 28: 499, 503, 496, 495, 36: 494, 74: 493, 82: 492, 491, 701},
		{24: 519, 702},
		{124: 703},
		{2: 201, 4: 201, 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 704},
		{2: 190, 5: 699, 120: 705},
		// 495
		{2: 191},
		{4: 201, 6: 201, 8: 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 707},
		{6: 708},
		{198, 2: 198, 198, 5: 198, 198, 198},
		{201, 2: 201, 201, 201, 201, 201, 201, 233, 235, 11: 255, 236, 14: 234, 16: 232, 263, 231, 114, 262, 37: 237, 238, 241, 244, 251, 243, 242, 240, 239, 250, 252, 245, 246, 247, 216, 248, 227, 230, 254, 253, 228, 249, 264, 229, 215, 223, 226, 224, 225, 259, 256, 258, 261, 257, 260, 217, 218, 75: 213, 222, 220, 221, 214, 219, 710},
		// 500
		{207, 2: 207, 207, 5: 207, 207, 207},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 130

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}, nil}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}, nil}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			arrNd := yyS[yypt-4].node
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 18:
		{
			arrNd := yyS[yypt-4].node
			//This NonTerminal is broken, it is kept
			//here to show that eventuall the feature
			//must be added
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 19:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 20:
		{
			yyVAL.elifArr = nil
		}
	case 24:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 38:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 39:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 40:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 41:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 42:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 43:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 44:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &strNode{STR, yyS[yypt-1].s}, nil}
		}
	case 45:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 46:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &numNode{NUM, yyS[yypt-1].n}, nil}
		}
	case 47:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-1].s, &numNode{NUM, -1}, nil}
			yyVAL.node = &numNode{NUM, x.execute().(int)}
		}
	case 48:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 49:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-1].s}
		}
	case 50:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 51:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State start")
			}
		}
	case 55:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s, yyS[yypt-2].s))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-2].s), yyS[yypt-2].s, resMap(&yyS[yypt-0].s, yyS[yypt-2].s)}}
		}
	case 56:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 57:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s, yyS[yypt-1].s)}}
		}
	case 58:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s, auxGetNode(yyS[yypt-1].s))}}
		}
	case 59:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State NT_DEL")
			}
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 76:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 77:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 78:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 79:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 80:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 81:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 82:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 83:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 84:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 85:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 86:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 88:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 89:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 90:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 91:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 92:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 93:
		{
			yyVAL.s = ".."
		}
	case 94:
		{
			yyVAL.s = "-"
		}
	case 95:
		{
			yyVAL.s = ""
		}
	case 96:
		{
			yyVAL.s = ""
		}
	case 97:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 98:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 99:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 100:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 101:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 102:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 103:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 104:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 105:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s}}
		}
	case 108:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", []interface{}{yyS[yypt-1].s}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 114:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 115:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 116:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 117:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"pwd"}}
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"print"}}
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 123:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 124:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"if"}}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"while"}}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"for"}}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"unset"}}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"select"}}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cmds"}}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsten"}}
		}
	case 134:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssite"}}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsbldg"}}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsroom"}}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsrack"}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsdev"}}
		}
	case 139:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"-"}}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".template"}}
		}
	case 141:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".cmds"}}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".var"}}
		}
	case 143:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"+"}}
		}
	case 144:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"="}}
		}
	case 145:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 146:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 147:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 148:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 149:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 150:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 151:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 152:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 153:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 154:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 155:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 156:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 157:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 158:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 159:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 160:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 161:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 162:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 163:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 164:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 165:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 166:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 167:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 168:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 169:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 170:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 171:
		{
			val := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), resMap(&val, auxGetNode(replaceOCLICurrPath(yyS[yypt-4].s)))}}
			if cmd.State.DebugLvl >= 3 {
				println("Attribute Acquired")
			}
		}
	case 172:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 173:
		{
			x := make([]string, 0)
			x = append(x, cmd.State.CurrPath+"/"+yyS[yypt-2].s)
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 174:
		{
			yyVAL.sarr = []string{cmd.State.CurrPath + "/" + yyS[yypt-0].s}
		}
	case 175:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 176:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, dCatchNodePtr}
		}
	case 177:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &strNode{STR, yyS[yypt-1].s}}
		}
	case 178:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 179:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 180:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 181:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-6].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 182:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 183:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 184:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 185:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 186:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 187:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 188:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 189:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 190:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 191:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 192:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 193:
		{
			y := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &strNode{STR, yyS[yypt-3].s}, nil}
			x := &assignNode{ASSIGN, y, yyS[yypt-0].node}
			mp := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, -1}, nil}

			z := &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{mp, yyS[yypt-3].s, yyS[yypt-0].node, true}}
			yyVAL.node = &ast{ASSIGN, []node{x, z}}

		}
	case 194:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &strNode{STR, yyS[yypt-1].s}, nil}
		}
	case 195:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, &numNode{NUM, yyS[yypt-1].n}, nil}
		}
	case 196:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, yyS[yypt-3].n}, nil}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 197:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-6].s, &numNode{NUM, yyS[yypt-4].n}, &strNode{STR, yyS[yypt-1].s}}
		}
	case 198:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}, nil}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 199:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 200:
		{
			x := yyS[yypt-2].s + "=" + yyS[yypt-0].s
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{resMap(&x, "other")}}
		}
	case 201:
		{
			if yyS[yypt-0].s != "" {
				yyVAL.s = yyS[yypt-1].s + " " + yyS[yypt-0].s
			} else {
				yyVAL.s = yyS[yypt-1].s
			}
		}
	case 202:
		{
			yyVAL.s = ""
		}
	case 203:
		{
			x := []interface{}{yyS[yypt-1].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 204:
		{
			x := []interface{}{yyS[yypt-2].s}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 205:
		{
			yyVAL.arr = nil
		}
	case 206:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 207:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}
	case 208:
		{
			x := yyS[yypt-1].s
			yyVAL.s = x + "," + yyS[yypt-0].s
		}
	case 209:
		{
			yyVAL.s = ""
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
